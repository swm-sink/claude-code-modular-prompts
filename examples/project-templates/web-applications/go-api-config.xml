<?xml version="1.0" encoding="UTF-8"?>
<!--
  Go API Project Configuration
  
  This configuration is optimized for Go REST API applications with Gin,
  PostgreSQL, and comprehensive testing.
  
  Copy this file to your Go project root as PROJECT_CONFIG.xml
  and customize the values for your specific project.
-->

<project_config>
  <project_metadata>
    <name>my-go-api</name>
    <version>1.0.0</version>
    <description>Go REST API with Gin and PostgreSQL</description>
    <repository>https://github.com/yourorg/my-go-api</repository>
  </project_metadata>

  <tech_stack>
    <primary_language>go</primary_language>
    <framework>gin</framework>
    <database>postgresql</database>
    <additional_tech>
      <tech>gorm</tech>
      <tech>redis</tech>
      <tech>jwt</tech>
      <tech>docker</tech>
      <tech>kubernetes</tech>
    </additional_tech>
  </tech_stack>

  <project_structure>
    <source_directory>internal</source_directory>
    <test_directory>tests</test_directory>
    <docs_directory>docs</docs_directory>
    <scripts_directory>scripts</scripts_directory>
    <config_directory>configs</config_directory>
    <static_directory>web/static</static_directory>
    <templates_directory>web/templates</templates_directory>
  </project_structure>

  <commands>
    <test>go test -v -race -coverprofile=coverage.out ./... && go tool cover -html=coverage.out -o coverage.html</test>
    <lint>golangci-lint run --timeout=5m</lint>
    <build>go build -o bin/api cmd/api/main.go</build>
    <format>gofmt -w . && goimports -w .</format>
    <dev_server>go run cmd/api/main.go</dev_server>
    <migrate>go run cmd/migrate/main.go</migrate>
    <install>go mod download && go mod tidy</install>
  </commands>

  <quality_standards>
    <test_coverage>
      <threshold>88</threshold>
      <enforcement>blocking</enforcement>
    </test_coverage>
    <performance>
      <response_time_p95>150</response_time_p95>
      <memory_limit>128</memory_limit>
    </performance>
    <code_quality>
      <max_complexity>12</max_complexity>
      <max_line_length>120</max_line_length>
    </code_quality>
  </quality_standards>

  <framework_behavior>
    <file_creation_policy>conservative</file_creation_policy>
    <test_first_enforcement>strict</test_first_enforcement>
    <context_management>
      <max_file_tokens>3500</max_file_tokens>
      <max_context_tokens>110000</max_context_tokens>
      <reserved_work_tokens>45000</reserved_work_tokens>
    </context_management>
  </framework_behavior>

  <ai_temperature>
    <factual>0.1</factual>
    <analysis>0.2</analysis>
    <creative>0.6</creative>
  </ai_temperature>

  <security>
    <security_scanning>true</security_scanning>
    <dependency_scanning>true</dependency_scanning>
    <secrets_detection>true</secrets_detection>
  </security>

  <development_workflow>
    <git_workflow>feature-branch</git_workflow>
    <branch_naming>feature/api-endpoint</branch_naming>
    <commit_format>conventional</commit_format>
    <code_review>
      <required>true</required>
      <min_reviewers>1</min_reviewers>
    </code_review>
  </development_workflow>

  <testing_strategy>
    <test_types>
      <unit_tests>true</unit_tests>
      <integration_tests>true</integration_tests>
      <end_to_end_tests>true</end_to_end_tests>
    </test_types>
    <test_framework>
      <name>testify</name>
      <config_file>go.mod</config_file>
    </test_framework>
  </testing_strategy>

  <deployment>
    <strategy>ci-cd</strategy>
    <environments>
      <environment>
        <name>development</name>
        <url>http://localhost:8080</url>
      </environment>
      <environment>
        <name>staging</name>
        <url>https://staging-api.myapp.com</url>
      </environment>
      <environment>
        <name>production</name>
        <url>https://api.myapp.com</url>
      </environment>
    </environments>
  </deployment>

  <team>
    <size>small</size>
    <methodology>agile</methodology>
    <communication>
      <issue_tracking>github</issue_tracking>
      <documentation_style>godoc</documentation_style>
    </communication>
  </team>

  <integrations>
    <services>
      <service>
        <name>github</name>
        <enabled>true</enabled>
        <config>
          <issue_tracking>true</issue_tracking>
          <pr_automation>true</pr_automation>
        </config>
      </service>
      <service>
        <name>kubernetes</name>
        <enabled>true</enabled>
        <config>
          <auto_deploy>true</auto_deploy>
          <health_checks>true</health_checks>
        </config>
      </service>
      <service>
        <name>prometheus</name>
        <enabled>true</enabled>
        <config>
          <metrics_collection>true</metrics_collection>
          <alerting>true</alerting>
        </config>
      </service>
    </services>
  </integrations>

  <!-- Go-specific configurations -->
  <go_specific>
    <go_version>1.21</go_version>
    <module_name>github.com/yourorg/my-go-api</module_name>
    <web_framework>gin</web_framework>
    <orm>gorm</orm>
    <migration_tool>golang-migrate</migration_tool>
    <logging>logrus</logging>
    <config_management>viper</config_management>
    <validation>validator</validation>
  </go_specific>
</project_config>