{
  "multi_agent_coordination": {
    "task_pattern": {
      "description": "Specialized expertise for different domains",
      "usage": "Task('Security analysis of authentication flow')",
      "triggers": ["security expertise", "specialized knowledge", "domain-specific work"],
      "session_required": false,
      "parallel_execution": true
    },
    "batch_pattern": {
      "description": "Similar work across multiple targets", 
      "usage": "Batch(['file1.py', 'file2.py'], 'Add error handling')",
      "triggers": ["multiple similar tasks", "bulk operations", "consistent changes"],
      "session_required": false,
      "parallel_execution": true
    },
    "swarm_pattern": {
      "description": "Complex multi-agent coordination with session tracking",
      "usage": "/swarm 'Build e-commerce platform with microservices'",
      "triggers": ["complex projects", "multiple components", "coordination needed"],
      "session_required": true,
      "parallel_execution": true
    }
  },
  "execution_patterns": {
    "research_first": {
      "description": "Always research before implementing",
      "mandatory_for": ["auto", "query", "complex_tasks"],
      "tools": ["WebSearch", "Glob", "Grep", "Read"],
      "parallel_research": true
    },
    "read_before_write": {
      "description": "Always read files before modifying",
      "mandatory": true,
      "tools": ["Read", "Edit", "MultiEdit", "Write"],
      "validation": "ensure_context_before_changes"
    },
    "parallel_tool_execution": {
      "description": "Batch multiple tool calls in single message",
      "priority": "highest",
      "examples": ["Read(file1), Read(file2), Read(file3)", "Glob(*.py), Grep(class, *.py)"],
      "efficiency_gain": "70% latency reduction"
    }
  },
  "quality_patterns": {
    "tdd_enforcement": {
      "cycle": "RED-GREEN-REFACTOR",
      "mandatory_for": ["task", "feature", "protocol"],
      "coverage_minimum": 90,
      "quality_gates": true
    },
    "critical_thinking": {
      "challenge_assumptions": "mandatory",
      "evidence_based": "mandatory", 
      "alternative_perspectives": "encouraged",
      "constructive_disagreement": "when_needed"
    },
    "aware_process": {
      "phases": ["assess", "watch", "architect", "run", "evaluate"],
      "mandatory_for": ["complex_work", "protocol_enforcement"],
      "documentation": "document_decisions_and_rationale"
    }
  },
  "github_integration": {
    "session_creation": {
      "auto_triggers": ["swarm_commands", "complex_multi_step", "epic_work"],
      "manual_triggers": ["session_command", "user_request"],
      "issue_templates": ["ai-session", "epic-project", "multi-agent", "quality-gate"]
    },
    "issue_management": {
      "epic_creation": "for_complex_projects",
      "phase_tracking": "atomic_steps_with_checkboxes",
      "progress_updates": "real_time_coordination",
      "outcome_documentation": "comprehensive_results"
    }
  },
  "delegation_patterns": {
    "command_structure": {
      "commands_only_delegate": true,
      "modules_only_implement": true,
      "xml_interface_required": true,
      "zero_redundancy": true
    },
    "module_composition": {
      "dynamic_loading": "based_on_request_complexity",
      "dependency_resolution": "automatic",
      "fallback_behavior": "graceful_degradation",
      "error_handling": "informative_messages"
    }
  },
  "optimization_patterns": {
    "token_efficiency": {
      "module_size_limit": "2000_tokens",
      "foundation_file_limit": "3000_tokens", 
      "lazy_loading": "load_only_needed_modules",
      "caching": "reuse_module_content_when_possible"
    },
    "performance_targets": {
      "command_completion": "under_5_seconds",
      "api_response_p95": "under_200ms",
      "github_operations": "under_3_seconds",
      "research_operations": "under_10_seconds"
    }
  },
  "modular_prompt_preservation": {
    "core_principle": "NEVER_DELETE_PROMPT_COMPONENTS",
    "consolidation_approach": "merge_while_preserving_functionality",
    "xml_structure": "maintain_consistent_interfaces",
    "delegation_integrity": "ensure_all_paths_resolve",
    "content_value": "preserve_all_useful_prompts"
  }
}