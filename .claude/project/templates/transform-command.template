# Transform Command Template
# Used by /quick-command for transform-type requests

## Template Variables
# {{COMMAND_NAME}} - Generated command name
# {{DESCRIPTION}} - User's description  
# {{TRANSFORM_TYPE}} - Type of transformation
# {{INPUT_PATTERN}} - Input file pattern
# {{OUTPUT_PATTERN}} - Output file pattern
# {{TRANSFORM_TOOLS}} - Required tools

---
name: /{{COMMAND_NAME}}
description: {{DESCRIPTION}}
usage: '[--input pattern] [--output pattern] [--backup] [--dry-run]'
allowed-tools:
{{TRANSFORM_TOOLS}}
category: generated
---

# {{COMMAND_TITLE}}

I'll {{TRANSFORM_TYPE}} your files as specified.

## Input Validation
I'll verify transformation parameters:
- Check input file pattern is valid and files exist
- Validate output pattern won't overwrite critical files
- Ensure backup location is writable if backup requested
- Confirm transformation type is supported

## Safety Checks
Before making changes:
- Create backups of original files (unless --no-backup specified)
- Verify sufficient disk space for transformation
- Check file permissions for read/write access
- Validate transformation won't corrupt data

## File Discovery
I'll identify files to transform:
- Use Glob to find files matching {{INPUT_PATTERN}}
- Apply any additional filters specified
- Exclude system files and directories
- Report total files found for processing

## Transformation Process
For each file, I'll:
- {{TRANSFORMATION_LOGIC}}
- Read original file content safely
- Apply specified transformation logic
- Validate transformed content
- Write to output location with error checking

## Progress Tracking
During transformation:
- Show current file being processed
- Report progress (X of Y files)
- Display any warnings or issues
- Indicate successful completions

## Error Handling
If problems occur:
- File read errors → Skip and log
- Transformation failures → Report and continue
- Write permission issues → Alert and skip
- Invalid content → Backup original and report

## Backup Management
I'll handle backups by:
- Creating .bak files before transformation
- Storing backups in organized structure
- Providing restore instructions if needed
- Cleaning up old backups on request

## Results Summary
After completion, I'll report:
```
# {{TRANSFORM_TYPE}} Results

## Summary
- Files processed: X
- Successful transformations: Y
- Errors/skipped: Z
- Backups created: W

## Detailed Results
✅ file1.ext → transformed successfully
✅ file2.ext → transformed successfully  
⚠️  file3.ext → skipped (permission error)
❌ file4.ext → failed (invalid format)

## Next Steps
- Review transformed files: [list]
- Check error files: [list]
- Restore from backup if needed: [instructions]
```

## Safety Features
- Automatic backup creation
- Dry-run mode for preview
- Rollback instructions provided
- Input validation prevents damage

## Examples
```
{{COMMAND_NAME}} --input "*.json" --output "*.yaml"
{{COMMAND_NAME}} --backup --dry-run
{{COMMAND_NAME}} --input "src/*.js" --output "dist/*.min.js"
```