{
  "id": "multi-agent-coordination-pattern",
  "version": "1.0.0",
  "category": "patterns",
  "name": "Multi-Agent Coordination Pattern",
  "description": "Orchestrates multiple specialized agents for complex tasks with proper handoffs and result aggregation",
  "prompt": {
    "template": "Design and implement a multi-agent coordination pattern for {{task_description}}:\n\n## Task Decomposition\n\n### Primary Objective\n{{primary_objective}}\n\n### Success Criteria\n{{#each success_criteria}}\n- {{this}}\n{{/each}}\n\n## Agent Architecture\n\n### 1. Agent Specializations Required\n{{#each required_agents}}\n**{{this.name}}** ({{this.type}})\n- **Responsibility**: {{this.responsibility}}\n- **Expertise**: {{this.expertise}}\n- **Deliverables**: {{#each this.deliverables}}{{this}}, {{/each}}\n{{/each}}\n\n### 2. Coordination Strategy\n**Pattern**: {{coordination_pattern}}\n\n**Workflow**:\n{{#if sequential_workflow}}\n1. Sequential Execution with Handoffs\n   {{#each workflow_steps}}\n   Step {{@index}}: {{this.agent}} - {{this.action}}\n   {{/each}}\n{{/if}}\n\n{{#if parallel_workflow}}\n2. Parallel Execution Groups\n   {{#each parallel_groups}}\n   Group {{@index}}: {{#each this}}{{this}}, {{/each}}\n   {{/each}}\n{{/if}}\n\n### 3. Communication Protocol\n- **Message Format**: {{message_format}}\n- **State Sharing**: {{state_sharing_method}}\n- **Result Aggregation**: {{aggregation_strategy}}\n\n### 4. Error Handling & Recovery\n{{#each error_scenarios}}\n- **Scenario**: {{this.scenario}}\n  **Recovery**: {{this.recovery}}\n{{/each}}\n\n### 5. Quality Gates\n{{#each quality_gates}}\n- **Gate**: {{this.name}}\n  **Criteria**: {{this.criteria}}\n  **Validator**: {{this.validator_agent}}\n{{/each}}\n\n### 6. Session Management\n- **Session Type**: {{session_type}}\n- **Persistence**: {{persistence_strategy}}\n- **Progress Tracking**: {{progress_tracking_method}}\n\n{{#if performance_requirements}}\n### 7. Performance Requirements\n- **Total Execution Time**: <{{max_execution_time}}\n- **Agent Concurrency**: {{max_concurrent_agents}}\n- **Resource Limits**: {{resource_constraints}}\n{{/if}}\n\n### Implementation Steps\n1. Initialize session with GitHub issue (if >10 atomic steps)\n2. Create agent instances with specializations\n3. Set up communication channels\n4. Execute workflow with proper handoffs\n5. Aggregate results and validate\n6. Document outcomes and close session\n\nGenerate the complete implementation with all necessary code, configurations, and documentation.",
    "variables": [
      {
        "name": "task_description",
        "description": "High-level description of the task",
        "type": "string",
        "required": true
      },
      {
        "name": "primary_objective",
        "description": "Main goal to achieve",
        "type": "string",
        "required": true
      },
      {
        "name": "success_criteria",
        "description": "Measurable success criteria",
        "type": "array",
        "required": true
      },
      {
        "name": "required_agents",
        "description": "Agent specifications",
        "type": "array",
        "required": true,
        "examples": [
          [
            {
              "name": "ArchitectAgent",
              "type": "specialist",
              "responsibility": "System design and architecture",
              "expertise": "Design patterns, scalability",
              "deliverables": ["Architecture diagram", "Design document"]
            }
          ]
        ]
      },
      {
        "name": "coordination_pattern",
        "description": "How agents coordinate",
        "type": "string",
        "required": true,
        "examples": ["pipeline", "hub-spoke", "peer-to-peer", "hierarchical"]
      },
      {
        "name": "sequential_workflow",
        "description": "Whether workflow is sequential",
        "type": "boolean",
        "required": true
      },
      {
        "name": "workflow_steps",
        "description": "Sequential workflow steps",
        "type": "array",
        "required": false
      },
      {
        "name": "parallel_workflow",
        "description": "Whether workflow has parallel execution",
        "type": "boolean",
        "required": true
      },
      {
        "name": "parallel_groups",
        "description": "Groups of agents that can run in parallel",
        "type": "array",
        "required": false
      },
      {
        "name": "message_format",
        "description": "Format for inter-agent messages",
        "type": "string",
        "required": true,
        "default": "JSON"
      },
      {
        "name": "state_sharing_method",
        "description": "How agents share state",
        "type": "string",
        "required": true,
        "examples": ["shared memory", "message passing", "blackboard"]
      },
      {
        "name": "aggregation_strategy",
        "description": "How to aggregate agent results",
        "type": "string",
        "required": true
      },
      {
        "name": "error_scenarios",
        "description": "Error handling scenarios",
        "type": "array",
        "required": true
      },
      {
        "name": "quality_gates",
        "description": "Quality checkpoints",
        "type": "array",
        "required": true
      },
      {
        "name": "session_type",
        "description": "Type of session management",
        "type": "string",
        "required": true,
        "examples": ["persistent", "ephemeral", "hybrid"]
      },
      {
        "name": "persistence_strategy",
        "description": "How to persist session state",
        "type": "string",
        "required": true
      },
      {
        "name": "progress_tracking_method",
        "description": "How to track progress",
        "type": "string",
        "required": true
      },
      {
        "name": "performance_requirements",
        "description": "Whether to include performance requirements",
        "type": "boolean",
        "required": false,
        "default": true
      },
      {
        "name": "max_execution_time",
        "description": "Maximum allowed execution time",
        "type": "string",
        "required": false,
        "default": "5 minutes"
      },
      {
        "name": "max_concurrent_agents",
        "description": "Maximum concurrent agents",
        "type": "number",
        "required": false,
        "default": 5
      },
      {
        "name": "resource_constraints",
        "description": "Resource limitations",
        "type": "string",
        "required": false
      }
    ]
  },
  "metadata": {
    "created": "2024-01-06T00:00:00Z",
    "updated": "2024-01-06T00:00:00Z",
    "author": "system",
    "tags": ["multi-agent", "coordination", "orchestration", "patterns", "distributed"],
    "dependencies": ["session-management", "agent-communication"]
  },
  "performance": {
    "estimatedTokens": 2000,
    "complexity": "high",
    "timeout": 180
  },
  "validation": {
    "outputFormat": "mixed",
    "successCriteria": [
      "Complete agent architecture defined",
      "Clear workflow and handoffs",
      "Error handling implemented",
      "Session management configured",
      "Quality gates established"
    ]
  }
}