{
  "id": "api-endpoint-implementation",
  "version": "1.0.0",
  "category": "features",
  "name": "REST API Endpoint Implementation",
  "description": "Implements a complete REST API endpoint with validation, error handling, and tests",
  "prompt": {
    "template": "Implement a {{method}} REST API endpoint for {{resource}} with the following specifications:\n\n**Endpoint**: {{endpoint_path}}\n**Purpose**: {{purpose}}\n\n**Request Structure**:\n{{#if request_body}}\n```json\n{{request_body}}\n```\n{{/if}}\n{{#if query_parameters}}\n**Query Parameters**:\n{{#each query_parameters}}\n- {{this.name}} ({{this.type}}): {{this.description}}{{#if this.required}} - Required{{/if}}\n{{/each}}\n{{/if}}\n\n**Response Structure**:\n```json\n{{response_structure}}\n```\n\n**Implementation Requirements**:\n1. Input validation with detailed error messages\n2. Proper HTTP status codes\n3. {{auth_type}} authentication\n4. Rate limiting: {{rate_limit}} requests per {{rate_window}}\n5. Comprehensive error handling\n6. Request/response logging\n7. OpenAPI/Swagger documentation\n\n{{#if business_rules}}\n**Business Rules**:\n{{#each business_rules}}\n- {{this}}\n{{/each}}\n{{/if}}\n\n{{#if include_tests}}\n**Testing Requirements**:\n- Unit tests with >90% coverage\n- Integration tests for happy path\n- Edge case testing\n- Error scenario testing\n- Performance benchmarks\n{{/if}}\n\n**Technology Stack**: {{tech_stack}}\n\nImplement following best practices and include all necessary middleware, validators, and handlers.",
    "variables": [
      {
        "name": "method",
        "description": "HTTP method",
        "type": "string",
        "required": true,
        "examples": ["GET", "POST", "PUT", "DELETE", "PATCH"]
      },
      {
        "name": "resource",
        "description": "Resource being operated on",
        "type": "string",
        "required": true,
        "examples": ["users", "products", "orders"]
      },
      {
        "name": "endpoint_path",
        "description": "Full endpoint path",
        "type": "string",
        "required": true,
        "examples": ["/api/v1/users/:id", "/api/v1/products"]
      },
      {
        "name": "purpose",
        "description": "What this endpoint does",
        "type": "string",
        "required": true
      },
      {
        "name": "request_body",
        "description": "JSON schema for request body",
        "type": "string",
        "required": false
      },
      {
        "name": "query_parameters",
        "description": "Query parameters specification",
        "type": "array",
        "required": false
      },
      {
        "name": "response_structure",
        "description": "JSON schema for response",
        "type": "string",
        "required": true
      },
      {
        "name": "auth_type",
        "description": "Authentication method",
        "type": "string",
        "required": true,
        "examples": ["JWT", "OAuth2", "API Key", "Basic"]
      },
      {
        "name": "rate_limit",
        "description": "Number of requests allowed",
        "type": "number",
        "required": true,
        "default": 100
      },
      {
        "name": "rate_window",
        "description": "Rate limit time window",
        "type": "string",
        "required": true,
        "default": "minute"
      },
      {
        "name": "business_rules",
        "description": "Specific business logic requirements",
        "type": "array",
        "required": false
      },
      {
        "name": "include_tests",
        "description": "Whether to generate tests",
        "type": "boolean",
        "required": false,
        "default": true
      },
      {
        "name": "tech_stack",
        "description": "Technology stack to use",
        "type": "string",
        "required": true,
        "examples": ["Node.js/Express", "Python/FastAPI", "Go/Gin", "Ruby/Rails"]
      }
    ]
  },
  "metadata": {
    "created": "2024-01-06T00:00:00Z",
    "updated": "2024-01-06T00:00:00Z",
    "author": "system",
    "tags": ["api", "rest", "implementation", "backend"],
    "dependencies": ["code-quality-standards", "testing-framework"]
  },
  "performance": {
    "estimatedTokens": 1200,
    "complexity": "high",
    "timeout": 60
  },
  "validation": {
    "outputFormat": "code",
    "successCriteria": [
      "Complete endpoint implementation",
      "All requirements addressed",
      "Tests included if requested",
      "Proper error handling",
      "Documentation included"
    ]
  }
}