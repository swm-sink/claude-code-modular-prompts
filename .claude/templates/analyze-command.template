# Analyze Command Template  
# Used by /quick-command for analyze-type requests

## Template Variables
# {{COMMAND_NAME}} - Generated command name
# {{DESCRIPTION}} - User's description
# {{ANALYSIS_TYPE}} - Type of analysis (quality, complexity, etc.)
# {{FILE_PATTERN}} - Target file pattern
# {{ANALYSIS_TOOLS}} - Appropriate tools

---
name: /{{COMMAND_NAME}}
description: {{DESCRIPTION}}
usage: '[--path directory] [--type extension] [--detail level]'
allowed-tools:
{{ANALYSIS_TOOLS}}
category: generated
---

# {{COMMAND_TITLE}}

I'll analyze {{ANALYSIS_TYPE}} in your codebase.

## Input Validation
I'll validate the analysis parameters:
- Check if target path exists and is accessible
- Verify file type filters are valid
- Ensure detail level is appropriate (basic/detailed/full)

## File Discovery
I'll find relevant files to analyze:
- Use Glob to discover files matching {{FILE_PATTERN}}
- Filter by specified file types if provided
- Exclude common non-code files (.git, node_modules, etc.)
- Report total files found for analysis

## Analysis Process
For each file, I'll examine:
- {{ANALYSIS_SPECIFIC_LOGIC}}
- Code structure and organization
- Potential issues or improvements
- Metrics relevant to {{ANALYSIS_TYPE}}

## Quality Metrics
I'll calculate and report:
- File-level metrics (size, complexity, etc.)
- Pattern-based analysis results
- Issue severity and priority
- Improvement suggestions

## Error Handling
If problems occur:
- File read errors → Skip and report
- Binary files → Skip automatically  
- Permission issues → Note and continue
- Analysis failures → Report specific file

## Results Compilation
I'll organize findings into:
```
# {{ANALYSIS_TYPE}} Analysis Report

## Summary
- Files analyzed: X
- Issues found: Y
- Overall rating: Z/10

## Detailed Findings

### High Priority Issues
- Issue 1: Description (file:line)
- Issue 2: Description (file:line)

### Medium Priority Issues  
- Issue 3: Description (file:line)
- Issue 4: Description (file:line)

### Recommendations
1. Specific actionable suggestion
2. Another improvement recommendation
3. Best practice to consider

## File-by-File Results
[Detailed per-file analysis if requested]
```

## Examples
```
{{COMMAND_NAME}} --path src/
{{COMMAND_NAME}} --type js --detail full
{{COMMAND_NAME}} --path components/ --detail basic
```