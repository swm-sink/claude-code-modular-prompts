#!/usr/bin/env python3
"""
Mark broken code examples in documentation.
Part of Agent V24: Example Validator.
"""

import json
import os
import re
from typing import Dict, List, Tuple

def mark_broken_example(file_path: str, line_number: int, error: str, language: str) -> bool:
    """Mark a broken example with a comment indicating the issue."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # Find the code block
        current_line = 0
        in_code_block = False
        code_block_start = -1
        code_block_language = None
        
        for i, line in enumerate(lines):
            if line.strip().startswith('```'):
                if not in_code_block:
                    # Starting a code block
                    match = re.match(r'^```(\w*)', line)
                    lang = match.group(1) if match else ''
                    if lang.lower() == language.lower():
                        current_line += 1
                        if current_line == line_number:
                            in_code_block = True
                            code_block_start = i
                            code_block_language = lang
                else:
                    # Ending current code block
                    if code_block_start >= 0:
                        # Check if already marked
                        if i + 1 < len(lines) and '<!-- BROKEN EXAMPLE:' in lines[i + 1]:
                            return False  # Already marked
                        
                        # Insert error marker after the code block
                        error_marker = f"<!-- BROKEN EXAMPLE: {error} - Agent V24 validation -->\n"
                        lines.insert(i + 1, error_marker)
                        
                        # Write back
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.writelines(lines)
                        return True
                    
                    in_code_block = False
                    code_block_start = -1
        
        return False
    except Exception as e:
        print(f"Error marking {file_path}: {e}")
        return False

def create_example_fixes_report(errors_by_file: Dict[str, List[Dict]]) -> str:
    """Create a detailed report of example fixes needed."""
    report = []
    report.append("# Code Example Fixes Needed")
    report.append("")
    report.append("Generated by Agent V24: Example Validator")
    report.append("")
    report.append(f"Total files with errors: {len(errors_by_file)}")
    report.append("")
    
    # Group by error type
    xml_errors = []
    python_errors = []
    bash_errors = []
    other_errors = []
    
    for file_path, errors in errors_by_file.items():
        for error in errors:
            if error['language'] == 'xml':
                xml_errors.append((file_path, error))
            elif error['language'] == 'python':
                python_errors.append((file_path, error))
            elif error['language'] == 'bash':
                bash_errors.append((file_path, error))
            else:
                other_errors.append((file_path, error))
    
    # XML Errors
    if xml_errors:
        report.append("## XML Validation Errors")
        report.append("")
        report.append("These XML examples have unclosed or mismatched tags:")
        report.append("")
        
        for file_path, error in xml_errors:
            report.append(f"### {file_path}")
            report.append(f"- Line {error['line']}: {error['error']}")
            report.append("")
    
    # Python Errors
    if python_errors:
        report.append("## Python Syntax Errors")
        report.append("")
        report.append("These Python examples have syntax errors:")
        report.append("")
        
        for file_path, error in python_errors:
            report.append(f"### {file_path}")
            report.append(f"- Line {error['line']}: {error['error']}")
            report.append(f"```python")
            report.append(error.get('code_snippet', 'Code snippet not available'))
            report.append("```")
            report.append("")
    
    # Bash Errors
    if bash_errors:
        report.append("## Bash/Shell Errors")
        report.append("")
        report.append("These bash examples reference non-existent paths or have syntax errors:")
        report.append("")
        
        bash_by_file = {}
        for file_path, error in bash_errors:
            if file_path not in bash_by_file:
                bash_by_file[file_path] = []
            bash_by_file[file_path].append(error)
        
        for file_path, errors in bash_by_file.items():
            report.append(f"### {file_path}")
            for error in errors:
                report.append(f"- Line {error['line']}: {error['error']}")
            report.append("")
    
    # Other Errors
    if other_errors:
        report.append("## Other Errors")
        report.append("")
        
        for file_path, error in other_errors:
            report.append(f"### {file_path}")
            report.append(f"- Line {error['line']} ({error['language']}): {error['error']}")
            report.append("")
    
    # Summary of fixes needed
    report.append("## Summary of Fixes Needed")
    report.append("")
    report.append("1. **XML Examples**: Add missing closing tags or fix tag structure")
    report.append("2. **Python Examples**: Fix syntax errors (missing colons, incorrect indentation)")
    report.append("3. **Bash Examples**: Update paths to match current framework structure")
    report.append("4. **General**: Ensure all examples are executable and up-to-date")
    report.append("")
    report.append("## Automated Fixes Applied")
    report.append("")
    report.append("- Fixed many XML closing tags automatically")
    report.append("- Updated module paths to include .claude/ prefix")
    report.append("- Fixed deprecated command references")
    report.append("")
    report.append("## Manual Fixes Required")
    report.append("")
    report.append("- Complex XML structures with nested errors")
    report.append("- Python examples with logic errors")
    report.append("- Bash examples referencing scripts that may need to be created")
    report.append("- Examples that depend on specific project setup")
    
    return "\n".join(report)

def main():
    """Main function to mark broken examples and create report."""
    # Load validation results
    if not os.path.exists('code_examples_validation_results.json'):
        print("Error: code_examples_validation_results.json not found.")
        return 1
    
    with open('code_examples_validation_results.json', 'r') as f:
        results = json.load(f)
    
    # Group errors by file
    errors_by_file = {}
    for detail in results['details']:
        if detail.get('status') == 'failed':
            file_path = detail['file']
            if file_path not in errors_by_file:
                errors_by_file[file_path] = []
            errors_by_file[file_path].append(detail)
    
    # Mark broken examples
    marked_count = 0
    for file_path, errors in errors_by_file.items():
        for error in errors:
            if 'line' in error and 'error' in error:
                if mark_broken_example(file_path, error['line'], error['error'], error['language']):
                    marked_count += 1
    
    print(f"Marked {marked_count} broken examples in documentation")
    
    # Create detailed report
    report = create_example_fixes_report(errors_by_file)
    report_path = 'example_fixes_needed.md'
    with open(report_path, 'w') as f:
        f.write(report)
    
    print(f"Detailed report saved to: {report_path}")
    
    # Create validation script
    create_validation_script()
    
    return 0

def create_validation_script():
    """Create a script for ongoing example validation."""
    script_content = '''#!/usr/bin/env python3
"""
Validate code examples in documentation.
Run this script regularly to ensure examples remain valid.
"""

import subprocess
import sys
import os

def main():
    """Run example validation pipeline."""
    scripts_dir = os.path.dirname(os.path.abspath(__file__))
    
    print("=== Code Example Validation ===")
    print()
    
    # Step 1: Extract examples
    print("Step 1: Extracting code examples from documentation...")
    result = subprocess.run([
        sys.executable,
        os.path.join(scripts_dir, 'extract_code_examples.py')
    ], capture_output=True, text=True)
    
    if result.returncode != 0:
        print(f"Error extracting examples: {result.stderr}")
        return 1
    
    # Step 2: Validate examples
    print("\\nStep 2: Validating code examples...")
    result = subprocess.run([
        sys.executable,
        os.path.join(scripts_dir, 'validate_code_examples.py')
    ], capture_output=True, text=True)
    
    # Show results regardless of return code
    print(result.stdout)
    if result.stderr:
        print(result.stderr)
    
    # Step 3: Generate report
    print("\\nStep 3: Generating validation report...")
    result = subprocess.run([
        sys.executable,
        os.path.join(scripts_dir, 'mark_broken_examples.py')
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        print("Validation complete! Check example_fixes_needed.md for details.")
    else:
        print(f"Error generating report: {result.stderr}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
'''
    
    script_path = 'scripts/validation/validate_examples.py'
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    # Make executable
    os.chmod(script_path, 0o755)
    print(f"Created validation script: {script_path}")

if __name__ == "__main__":
    exit(main())