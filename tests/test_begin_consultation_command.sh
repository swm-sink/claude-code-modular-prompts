#!/bin/bash

# Test: /begin-consultation command functionality
# Following TDD Red-Green-Refactor cycle

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test counters
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0

# Test result tracking
print_test_result() {
    local test_name=$1
    local result=$2
    local message=$3
    
    TESTS_RUN=$((TESTS_RUN + 1))
    
    if [ "$result" = "PASS" ]; then
        echo -e "${GREEN}‚úì PASS${NC}: $test_name"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        echo -e "${RED}‚úó FAIL${NC}: $test_name - $message"
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
}

# Test 1: Command file exists (SHOULD FAIL INITIALLY)
test_command_file_exists() {
    local test_name="begin-consultation command file exists"
    local command_file="/Users/smenssink/conductor/repo/claude-code-modular-prompts/lisbon/.claude/commands/begin-consultation.md"
    
    if [ -f "$command_file" ]; then
        print_test_result "$test_name" "PASS" ""
    else
        print_test_result "$test_name" "FAIL" "Command file not found at $command_file"
    fi
}

# Test 2: Command has proper YAML frontmatter (SHOULD FAIL INITIALLY)
test_command_yaml_structure() {
    local test_name="begin-consultation command YAML frontmatter"
    local command_file="/Users/smenssink/conductor/repo/claude-code-modular-prompts/lisbon/.claude/commands/begin-consultation.md"
    
    if [ ! -f "$command_file" ]; then
        print_test_result "$test_name" "FAIL" "Command file does not exist"
        return
    fi
    
    # Check for YAML frontmatter
    if head -1 "$command_file" | grep -q "^---$"; then
        # Check for required fields
        if grep -q "^name:" "$command_file" && grep -q "^description:" "$command_file"; then
            print_test_result "$test_name" "PASS" ""
        else
            print_test_result "$test_name" "FAIL" "Missing required YAML fields (name, description)"
        fi
    else
        print_test_result "$test_name" "FAIL" "Missing YAML frontmatter"
    fi
}

# Test 3: Command mentions consultation phases (SHOULD FAIL INITIALLY)
test_consultation_phases_mentioned() {
    local test_name="begin-consultation mentions three phases"
    local command_file="/Users/smenssink/conductor/repo/claude-code-modular-prompts/lisbon/.claude/commands/begin-consultation.md"
    
    if [ ! -f "$command_file" ]; then
        print_test_result "$test_name" "FAIL" "Command file does not exist"
        return
    fi
    
    local phase_count=0
    if grep -qi "technical.*analysis" "$command_file"; then phase_count=$((phase_count + 1)); fi
    if grep -qi "domain.*intelligence" "$command_file"; then phase_count=$((phase_count + 1)); fi
    if grep -qi "context.*generation" "$command_file"; then phase_count=$((phase_count + 1)); fi
    
    if [ "$phase_count" -eq 3 ]; then
        print_test_result "$test_name" "PASS" ""
    else
        print_test_result "$test_name" "FAIL" "Found $phase_count/3 consultation phases mentioned"
    fi
}

# Test 4: Command directory structure exists (SHOULD FAIL INITIALLY)
test_command_directory_exists() {
    local test_name="command directory structure exists"
    local commands_dir="/Users/smenssink/conductor/repo/claude-code-modular-prompts/lisbon/.claude/commands"
    
    if [ -d "$commands_dir" ]; then
        print_test_result "$test_name" "PASS" ""
    else
        print_test_result "$test_name" "FAIL" "Commands directory not found at $commands_dir"
    fi
}

# Test 5: Generated context directory will exist (FUNCTIONAL TEST - SHOULD FAIL)
test_context_generation_capability() {
    local test_name="context generation directory structure"
    local context_dir="/Users/smenssink/conductor/repo/claude-code-modular-prompts/lisbon/.claude/context"
    
    # This test validates the infrastructure for context generation
    # The actual context files will be generated by the consultation process
    if [ -d "$context_dir" ] || [ -d "$(dirname "$context_dir")" ]; then
        print_test_result "$test_name" "PASS" "Infrastructure exists for context generation"
    else
        print_test_result "$test_name" "FAIL" "No .claude directory structure for context generation"
    fi
}

# Run all tests
echo "üî¥ RED PHASE: Running failing tests for /begin-consultation command..."
echo "Expected: All tests should FAIL initially (TDD Red phase)"
echo

test_command_directory_exists
test_command_file_exists
test_command_yaml_structure
test_consultation_phases_mentioned
test_context_generation_capability

echo
echo "üìä Test Summary:"
echo "Tests Run: $TESTS_RUN"
echo -e "Tests Passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests Failed: ${RED}$TESTS_FAILED${NC}"

if [ $TESTS_FAILED -gt 0 ]; then
    echo
    echo "üî¥ RED PHASE SUCCESS: Tests failing as expected (TDD requirement)"
    echo "Next: Implement minimal code to make these tests pass (GREEN phase)"
    exit 0  # Expected failure in RED phase
else
    echo
    echo "‚ö†Ô∏è  UNEXPECTED: All tests passed in RED phase"
    echo "This violates TDD - tests should fail before implementation"
    exit 1
fi