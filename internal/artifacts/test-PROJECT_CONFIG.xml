<?xml version="1.0" encoding="UTF-8"?>
<!-- Test Configuration for PROJECT_CONFIG Validation -->
<project_configuration version="1.0.0">
  <!-- Basic Project Information -->
  <project_info>
    <name>Test Configuration Project</name>
    <domain>web-development</domain>
    <description>Test configuration for validating PROJECT_CONFIG system</description>
    <primary_language>python</primary_language>
    <framework_stack>fastapi+sqlalchemy</framework_stack>
  </project_info>

  <!-- Project Structure - Testing custom paths -->
  <project_structure>
    <root_directory>.</root_directory>
    <source_directory>app</source_directory>
    <test_directory>test_suite</test_directory>
    <docs_directory>documentation</docs_directory>
    <scripts_directory>bin</scripts_directory>
    <config_directory>.config</config_directory>
    <build_directory>dist</build_directory>
  </project_structure>

  <!-- Quality Standards - Testing different thresholds -->
  <quality_standards>
    <test_coverage>
      <threshold>95</threshold>
      <enforcement>BLOCKING</enforcement>
      <tool>pytest-cov</tool>
    </test_coverage>
    <performance>
      <response_time_p95>150ms</response_time_p95>
      <response_time_p99>300ms</response_time_p99>
      <memory_limit>1GB</memory_limit>
    </performance>
    <code_quality>
      <linter>pylint</linter>
      <formatter>black</formatter>
      <type_checker>mypy</type_checker>
    </code_quality>
  </quality_standards>

  <!-- Development Workflow - Python specific -->
  <development_workflow>
    <commands>
      <install>pip install -r requirements.txt</install>
      <test>pytest --cov=app --cov-report=term-missing</test>
      <lint>pylint app</lint>
      <build>python setup.py build</build>
      <run>uvicorn app.main:app --reload</run>
      <format>black . --line-length 100</format>
    </commands>
    <git_workflow>
      <branch_pattern>feature-*</branch_pattern>
      <commit_style>conventional</commit_style>
      <pr_template>enabled</pr_template>
    </git_workflow>
  </development_workflow>

  <!-- Token and Context Management -->
  <context_management>
    <max_file_tokens>5000</max_file_tokens>
    <max_context_tokens>150000</max_context_tokens>
    <reserved_work_tokens>60000</reserved_work_tokens>
  </context_management>

  <!-- Domain-Specific Rules -->
  <domain_specific_rules>
    <rule>Use type hints for all function signatures</rule>
    <rule>Follow PEP 8 style guidelines</rule>
    <rule>Implement proper error handling with custom exceptions</rule>
    <rule>Use async/await for all I/O operations</rule>
    <rule>Document all API endpoints with OpenAPI annotations</rule>
  </domain_specific_rules>

  <!-- Security Requirements -->
  <security_requirements>
    <authentication>jwt</authentication>
    <data_encryption>both</data_encryption>
    <compliance>SOC2</compliance>
    <vulnerability_scanning>enabled</vulnerability_scanning>
  </security_requirements>

  <!-- Framework Behavior Customization -->
  <framework_behavior>
    <file_creation_policy>moderate</file_creation_policy>
    <documentation_generation>automatic</documentation_generation>
    <test_first_enforcement>strict</test_first_enforcement>
    <ai_temperature>
      <factual>0.1</factual>
      <analysis>0.25</analysis>
      <creative>0.8</creative>
    </ai_temperature>
  </framework_behavior>
</project_configuration>