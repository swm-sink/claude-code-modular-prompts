name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 03:00 UTC
    - cron: '0 3 * * *'

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Security and validation checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for hardcoded secrets
        run: |
          # Check for potential hardcoded secrets
          if grep -r "API_KEY\|SECRET\|PASSWORD\|TOKEN" . --exclude-dir=.git --exclude="*.log" --exclude-dir=.github; then
            echo "⚠️  Potential hardcoded secrets found"
            exit 1
          fi
          echo "✅ No hardcoded secrets detected"
          
      - name: Validate .env template exists
        run: |
          if [ ! -f ".env.template" ]; then
            echo "❌ .env.template missing"
            exit 1
          fi
          echo "✅ .env.template found"
          
      - name: Check .env is gitignored
        run: |
          if git check-ignore .env; then
            echo "✅ .env properly gitignored"
          else
            echo "❌ .env not in .gitignore"
            exit 1
          fi

  # Framework validation
  framework-validation:
    name: Framework Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install framework dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Validate framework structure
        run: |
          # Check critical framework files exist
          echo "Validating framework structure..."
          
          required_files=(
            "CLAUDE.md"
            "PROJECT_CONFIG.xml"
            ".claude"
            "streamlit_dashboard/app.py"
            "streamlit_dashboard/requirements.txt"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -e "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done
          
      - name: Validate .claude module structure
        run: |
          # Check .claude directory structure
          if [ ! -d ".claude/commands" ]; then
            echo "❌ Missing .claude/commands directory"
            exit 1
          fi
          
          if [ ! -d ".claude/modules" ]; then
            echo "❌ Missing .claude/modules directory"
            exit 1
          fi
          
          echo "✅ .claude structure validated"
          
      - name: Validate PROJECT_CONFIG.xml
        run: |
          # Basic XML validation
          python -c "
          import xml.etree.ElementTree as ET
          try:
              ET.parse('PROJECT_CONFIG.xml')
              print('✅ PROJECT_CONFIG.xml is valid XML')
          except ET.ParseError as e:
              print(f'❌ PROJECT_CONFIG.xml parse error: {e}')
              exit(1)
          "

  # Streamlit application tests
  streamlit-tests:
    name: Streamlit App Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: streamlit_dashboard
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock
          
      - name: Create test environment file
        run: |
          echo "GEMINI_API_KEY=test_key_for_ci" > .env
          echo "ENVIRONMENT=test" >> .env
          
      - name: Run tests with coverage
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=term-missing --cov-report=xml --cov-fail-under=85
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: streamlit_dashboard/coverage.xml
          flags: streamlit
          name: streamlit-coverage
          
      - name: Test app startup (dry run)
        run: |
          # Test that the app can import and initialize
          python -c "
          import sys
          sys.path.append('.')
          try:
              from app import LocalDevelopmentConfig, RailwayProductionConfig, EnvironmentDetector
              print('✅ App imports successfully')
              
              # Test configuration classes
              local_config = LocalDevelopmentConfig()
              railway_config = RailwayProductionConfig()
              env = EnvironmentDetector.detect_environment()
              print(f'✅ Environment detection works: {env}')
              
          except Exception as e:
              print(f'❌ App import/initialization failed: {e}')
              sys.exit(1)
          "

  # Documentation validation
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check documentation files
        run: |
          # Check critical documentation exists
          docs=(
            "README.md"
            "GETTING_STARTED.md"
            "streamlit_dashboard/RAILWAY_DEPLOYMENT_GUIDE.md"
            "streamlit_dashboard/SECURITY.md"
            "streamlit_dashboard/ACCESSIBILITY_VALIDATION.md"
          )
          
          for doc in "${docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "❌ Missing documentation: $doc"
              exit 1
            fi
            echo "✅ Found: $doc"
          done
          
      - name: Check for broken internal links
        run: |
          # Simple check for broken markdown links to local files
          find . -name "*.md" -exec grep -l "\](\./" {} \; | while read file; do
            echo "Checking links in: $file"
            # Extract local file links and check they exist
            grep -o "\](\.\/[^)]*)" "$file" | sed 's/](\.\///' | sed 's/)$//' | while read link; do
              if [ ! -e "$link" ]; then
                echo "❌ Broken link in $file: $link"
                exit 1
              fi
            done
          done
          echo "✅ No broken internal links found"

  # Health check simulation
  health-check:
    name: Health Check Simulation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: streamlit_dashboard
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Test health monitoring
        run: |
          python -c "
          import sys
          sys.path.append('.')
          
          try:
              from utils.health_monitor import HealthMonitor
              
              # Create health monitor instance
              monitor = HealthMonitor()
              
              # Get health status
              health = monitor.get_health_status()
              
              print(f'Health Status: {health[\"status\"]}')
              print(f'Checks: {len(health[\"checks\"])}')
              print(f'Performance metrics: {len(health[\"performance\"])}')
              
              # Verify required health checks
              required_checks = ['memory', 'disk', 'environment']
              for check in required_checks:
                  if check not in health['checks']:
                      print(f'❌ Missing health check: {check}')
                      sys.exit(1)
                  print(f'✅ Health check found: {check}')
              
              print('✅ Health monitoring system functional')
              
          except Exception as e:
              print(f'❌ Health check failed: {e}')
              sys.exit(1)
          "

  # Build and deployment test
  deployment-test:
    name: Deployment Test
    runs-on: ubuntu-latest
    needs: [security-scan, framework-validation, streamlit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Test Railway configuration
        run: |
          # Check Railway deployment files exist
          railway_files=(
            "streamlit_dashboard/railway.json"
            "streamlit_dashboard/start.sh"
            "streamlit_dashboard/requirements.txt"
          )
          
          for file in "${railway_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing Railway file: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done
          
      - name: Validate Railway configuration
        run: |
          # Validate railway.json structure
          python -c "
          import json
          with open('streamlit_dashboard/railway.json') as f:
              config = json.load(f)
              
          required_keys = ['build', 'deploy']
          for key in required_keys:
              if key not in config:
                  print(f'❌ Missing key in railway.json: {key}')
                  exit(1)
              print(f'✅ Found key: {key}')
          
          print('✅ Railway configuration valid')
          "
          
      - name: Test start script
        run: |
          # Verify start script is executable and has proper shebang
          if [ ! -x "streamlit_dashboard/start.sh" ]; then
            echo "❌ start.sh is not executable"
            exit 1
          fi
          
          if ! head -1 "streamlit_dashboard/start.sh" | grep -q "#!/bin/bash"; then
            echo "❌ start.sh missing proper shebang"
            exit 1
          fi
          
          echo "✅ start.sh configuration valid"

  # Notification of results
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [security-scan, framework-validation, streamlit-tests, documentation-check, health-check, deployment-test]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Security scan passed"
          echo "✅ Framework validation passed"
          echo "✅ Streamlit tests passed"
          echo "✅ Documentation check passed"
          echo "✅ Health check passed"
          echo "✅ Deployment test passed"
          echo ""
          echo "🚀 Ready for deployment!"