name: Deployment Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  # Pre-deployment validation
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      deploy-environment: ${{ steps.env-selector.outputs.environment }}
      deploy-ready: ${{ steps.validation.outputs.ready }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Environment selector
        id: env-selector
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Deployment validation
        id: validation
        run: |
          echo "üîç Validating deployment readiness..."
          
          # Check if this is a valid deployment trigger
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" != "refs/heads/main" ] && [[ "${{ github.ref }}" != refs/tags/v* ]]; then
            echo "‚ùå Invalid deployment trigger"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check critical files exist
          critical_files=(
            "streamlit_dashboard/app.py"
            "streamlit_dashboard/requirements.txt"
            "streamlit_dashboard/railway.json"
            "streamlit_dashboard/start.sh"
          )
          
          for file in "${critical_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing critical file: $file"
              echo "ready=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          done
          
          echo "‚úÖ Deployment validation passed"
          echo "ready=true" >> $GITHUB_OUTPUT

  # Security pre-check
  security-precheck:
    name: Security Pre-check
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-ready == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Secret scanning
        run: |
          # Enhanced secret scanning for deployment
          echo "üîí Scanning for secrets..."
          
          # Check for various secret patterns
          secret_patterns=(
            "API_KEY.*=.*[A-Za-z0-9]{20,}"
            "SECRET.*=.*[A-Za-z0-9]{20,}"
            "PASSWORD.*=.*[A-Za-z0-9]{8,}"
            "TOKEN.*=.*[A-Za-z0-9]{20,}"
            "AIza[0-9A-Za-z_-]{35}"  # Google API key pattern
          )
          
          found_secrets=false
          for pattern in "${secret_patterns[@]}"; do
            if grep -r -E "$pattern" . --exclude-dir=.git --exclude="*.log" --exclude-dir=.github; then
              echo "‚ö†Ô∏è  Potential secret found matching pattern: $pattern"
              found_secrets=true
            fi
          done
          
          if [ "$found_secrets" = true ]; then
            echo "‚ùå Security check failed - potential secrets found"
            exit 1
          fi
          
          echo "‚úÖ No secrets detected"
          
      - name: Environment variable check
        run: |
          # Verify .env is properly gitignored
          if [ -f ".env" ] && ! git check-ignore .env; then
            echo "‚ùå .env file not properly gitignored"
            exit 1
          fi
          
          # Check .env.template exists
          if [ ! -f ".env.template" ]; then
            echo "‚ùå .env.template missing"
            exit 1
          fi
          
          echo "‚úÖ Environment configuration secure"

  # Staging deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, security-precheck]
    if: needs.pre-deployment.outputs.deploy-ready == 'true' && (needs.pre-deployment.outputs.deploy-environment == 'staging' || needs.pre-deployment.outputs.deploy-environment == 'production')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Railway CLI
        run: |
          # Install Railway CLI
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
          
      - name: Deploy to Railway Staging
        run: |
          echo "üöÄ Deploying to Railway staging..."
          
          cd streamlit_dashboard
          
          # Login to Railway (if token provided)
          if [ -n "${{ secrets.RAILWAY_TOKEN }}" ]; then
            echo "Authenticating with Railway..."
            railway login --token ${{ secrets.RAILWAY_TOKEN }}
          else
            echo "‚ö†Ô∏è  No Railway token provided, skipping automated deployment"
            echo "To enable automated deployment, add RAILWAY_TOKEN to repository secrets"
            exit 0
          fi
          
          # Deploy to staging environment
          railway up --detach
          
          echo "‚úÖ Staging deployment initiated"
          
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 30  # Give Railway time to deploy
          
      - name: Health check staging
        run: |
          # Get the staging URL (this would need to be configured based on your Railway setup)
          echo "üè• Performing health check on staging deployment..."
          
          # Note: You'll need to replace this with your actual staging URL
          # STAGING_URL="https://your-staging-app.up.railway.app"
          # curl -f "$STAGING_URL" || (echo "‚ùå Staging health check failed" && exit 1)
          
          echo "‚úÖ Staging deployment healthy (health check disabled - configure with actual URL)"

  # Production deployment (only on tags or manual production trigger)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, security-precheck, deploy-staging]
    if: needs.pre-deployment.outputs.deploy-ready == 'true' && needs.pre-deployment.outputs.deploy-environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Railway CLI
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
          
      - name: Production deployment confirmation
        run: |
          echo "üéØ Preparing production deployment..."
          echo "Environment: ${{ needs.pre-deployment.outputs.deploy-environment }}"
          echo "Ref: ${{ github.ref }}"
          echo "Trigger: ${{ github.event_name }}"
          
      - name: Deploy to Railway Production
        run: |
          echo "üöÄ Deploying to Railway production..."
          
          cd streamlit_dashboard
          
          # Login to Railway
          if [ -n "${{ secrets.RAILWAY_TOKEN }}" ]; then
            railway login --token ${{ secrets.RAILWAY_TOKEN }}
          else
            echo "‚ùå No Railway token for production deployment"
            exit 1
          fi
          
          # Deploy to production environment
          railway up --detach
          
          echo "‚úÖ Production deployment initiated"
          
      - name: Production health check
        run: |
          echo "‚è≥ Waiting for production deployment..."
          sleep 60  # Give Railway more time for production
          
          echo "üè• Performing production health check..."
          
          # Note: Replace with your actual production URL
          # PROD_URL="https://your-production-app.up.railway.app"
          # curl -f "$PROD_URL" || (echo "‚ùå Production health check failed" && exit 1)
          
          echo "‚úÖ Production deployment completed (health check disabled - configure with actual URL)"

  # Post-deployment notification
  notify-deployment:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-staging, deploy-production]
    if: always() && needs.pre-deployment.outputs.deploy-ready == 'true'
    steps:
      - name: Deployment summary
        run: |
          echo "üìã Deployment Summary"
          echo "===================="
          echo "Environment: ${{ needs.pre-deployment.outputs.deploy-environment }}"
          echo "Trigger: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment: SUCCESS"
          elif [ "${{ needs.deploy-staging.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è  Staging deployment: SKIPPED"
          else
            echo "‚ùå Staging deployment: FAILED"
          fi
          
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production deployment: SUCCESS"
          elif [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è  Production deployment: SKIPPED"
          else
            echo "‚ùå Production deployment: FAILED"
          fi
          
          echo ""
          echo "üéâ Deployment pipeline completed!"