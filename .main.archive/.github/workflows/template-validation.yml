name: Template Validation & Quality Assurance

on:
  push:
    branches: [ main, develop, framework-integration-updates ]
    paths:
      - 'claude_prompt_factory/**/*.md'
      - 'claude_prompt_factory/templates/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'claude_prompt_factory/**/*.md'
      - 'claude_prompt_factory/templates/**'

jobs:
  template-validation:
    runs-on: ubuntu-latest
    name: Template Validation & Framework Quality Check
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install lxml beautifulsoup4 pyyaml
        
    - name: Run Template Validator
      id: validation
      run: |
        cd claude_prompt_factory/templates
        python template-validator.py > ../../validation_results.txt 2>&1
        SCORE=$(grep "Overall score:" ../../validation_results.txt | grep -o '[0-9]*/[0-9]*')
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        cat ../../validation_results.txt
        
    - name: Extract Validation Metrics
      id: metrics
      run: |
        SCORE_NUM=$(echo "${{ steps.validation.outputs.score }}" | cut -d'/' -f1)
        SCORE_TOTAL=$(echo "${{ steps.validation.outputs.score }}" | cut -d'/' -f2)
        PERCENTAGE=$(( SCORE_NUM * 100 / SCORE_TOTAL ))
        echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
        echo "score_num=$SCORE_NUM" >> $GITHUB_OUTPUT
        echo "score_total=$SCORE_TOTAL" >> $GITHUB_OUTPUT
        
    - name: Component Integrity Check
      run: |
        echo "üîó Component Integrity Validation"
        cd claude_prompt_factory
        MISSING_COMPONENTS=0
        TOTAL_REFERENCES=0
        
        while IFS= read -r line; do
          file=$(echo "$line" | cut -d: -f1)
          component_path=$(echo "$line" | grep -o 'components/[^"]*')
          
          ((TOTAL_REFERENCES++))
          
          if [[ -f "$component_path" ]]; then
            echo "‚úÖ $component_path"
          else
            echo "‚ùå MISSING: $component_path (referenced in $file)"
            ((MISSING_COMPONENTS++))
          fi
        done < <(grep -r "include component=" commands/ | head -20)
        
        echo "Component References: $TOTAL_REFERENCES"
        echo "Missing Components: $MISSING_COMPONENTS"
        SUCCESS_RATE=$(( (TOTAL_REFERENCES - MISSING_COMPONENTS) * 100 / TOTAL_REFERENCES ))
        echo "Success Rate: $SUCCESS_RATE%"
        
        if [[ $MISSING_COMPONENTS -gt 0 ]]; then
          echo "::error::Found $MISSING_COMPONENTS missing component references"
          exit 1
        fi
        
    - name: Constitutional Compliance Check
      run: |
        echo "‚öñÔ∏è Constitutional AI Compliance Check"
        CONSTITUTIONAL_COMPONENTS=(
          "components/constitutional/constitutional-framework.md"
          "components/constitutional/safety-framework.md"  
          "components/constitutional/wisdom-alignment.md"
        )
        
        MISSING_CONSTITUTIONAL=0
        for component in "${CONSTITUTIONAL_COMPONENTS[@]}"; do
          if [[ -f "claude_prompt_factory/$component" ]]; then
            echo "‚úÖ $component"
          else
            echo "‚ùå MISSING: $component"
            ((MISSING_CONSTITUTIONAL++))
          fi
        done
        
        if [[ $MISSING_CONSTITUTIONAL -gt 0 ]]; then
          echo "::error::Missing $MISSING_CONSTITUTIONAL constitutional components"
          exit 1
        fi
        
    - name: Quality Gate Check
      run: |
        PERCENTAGE=${{ steps.metrics.outputs.percentage }}
        echo "Template validation score: $PERCENTAGE%"
        
        if [[ $PERCENTAGE -lt 35 ]]; then
          echo "::error::Template validation score ($PERCENTAGE%) below minimum threshold (35%)"
          exit 1
        elif [[ $PERCENTAGE -lt 50 ]]; then
          echo "::warning::Template validation score ($PERCENTAGE%) below recommended threshold (50%)"
        elif [[ $PERCENTAGE -ge 80 ]]; then
          echo "üü¢ EXCELLENT: Template validation score ($PERCENTAGE%) meets production threshold!"
        else
          echo "üü° GOOD: Template validation score ($PERCENTAGE%) progressing toward production readiness"
        fi
        
    - name: Generate Quality Report
      if: always()
      run: |
        cat << EOF > quality_report.md
        # Template Validation Report
        
        ## Validation Results
        - **Score**: ${{ steps.validation.outputs.score }}
        - **Percentage**: ${{ steps.metrics.outputs.percentage }}%
        - **Status**: $([ ${{ steps.metrics.outputs.percentage }} -ge 80 ] && echo "üü¢ Production Ready" || echo "üü° In Progress")
        
        ## Quality Metrics
        - **Component Integrity**: $(grep -c "‚úÖ" validation_results.txt || echo "0") components validated
        - **Constitutional Compliance**: 3/3 frameworks verified
        - **Template Compliance**: ${{ steps.metrics.outputs.percentage }}% of files compliant
        
        ## Recommendations
        $([ ${{ steps.metrics.outputs.percentage }} -lt 80 ] && echo "- Continue standardizing command files with YAML frontmatter" || echo "- Framework ready for production deployment")
        $([ ${{ steps.metrics.outputs.percentage }} -lt 60 ] && echo "- Focus on core command standardization first")
        - Maintain component reference integrity
        - Regular constitutional compliance reviews
        
        EOF
        
    - name: Upload Quality Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: template-validation-report
        path: |
          quality_report.md
          validation_results.txt
          
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality_report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          }); 