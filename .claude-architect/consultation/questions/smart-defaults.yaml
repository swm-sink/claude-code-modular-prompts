# Smart Defaults System - Intelligent Assumption Management
# Pre-fill obvious patterns, confirm important assumptions, skip redundant questions
# Version: 1.0 - Context-Driven Default Detection
# Purpose: Reduce unnecessary questions while maintaining accuracy

# =============================================================================
# SMART DEFAULTS ARCHITECTURE
# =============================================================================
smart_defaults:
  version: "1.0"
  philosophy: "Assume the obvious, confirm the important, explore the unique"
  confidence_threshold: 0.8  # 80% confidence required for assumptions
  validation_strategy: "Confirm assumptions rather than re-ask questions"
  
  benefits:
    time_savings: "15-25% reduction in question time"
    engagement: "Focus on interesting project-specific aspects"
    intelligence: "Demonstrate repository analysis understanding"
    efficiency: "Maximize value per minute spent"

# =============================================================================
# PROJECT TYPE DEFAULTS
# =============================================================================
project_type_defaults:
  
  # ---------------------------------------------------------------------------
  # Web Application Patterns
  # ---------------------------------------------------------------------------
  web_application:
    detection_patterns:
      package_json_indicators:
        - "react, vue, angular (frontend frameworks)"
        - "express, koa, fastify (backend frameworks)"
        - "webpack, vite, parcel (build tools)"
        - "jest, cypress, playwright (testing tools)"
      
      file_structure_indicators:
        - "src/components/, public/, build/"
        - "api/, routes/, controllers/"
        - "package.json + requirements.txt (fullstack)"
      
      git_history_indicators:
        - "Frontend/backend commit patterns"
        - "API endpoint development"
        - "UI/UX related commits"
    
    default_assumptions:
      architecture: "Client-server architecture with API"
      deployment: "Cloud hosting (AWS, Vercel, Netlify, Heroku)"
      testing: "Unit tests and some integration testing"
      performance_focus: "Page load times, API response times"
      user_interaction: "Browser-based user interface"
      scaling_pattern: "Horizontal scaling for web tier"
      
    questions_to_skip:
      - "AF001"  # Application structure (assume client-server)
      - "PE005"  # Project type confirmation (already detected)
      
    confirmation_questions:
      - "I can see this is a web application - client-server with an API, right?"
      - "Are you deploying to cloud services like AWS or Vercel?"
      - "Standard web performance expectations - page load times, API response times?"
    
    follow_up_priorities:
      high_priority:
        - "Frontend framework specifics (React/Vue/Angular patterns)"
        - "API design approach (REST/GraphQL/RPC)"
        - "Authentication and session management"
        - "Database and data modeling"
      
      medium_priority:
        - "State management approach"
        - "Build and deployment pipeline"
        - "Error handling and monitoring"
      
      skip_unless_time:
        - "Advanced performance optimization"
        - "Complex architectural patterns"

  # ---------------------------------------------------------------------------
  # Data Science/ML Project Patterns
  # ---------------------------------------------------------------------------
  data_science_ml:
    detection_patterns:
      file_indicators:
        - "*.ipynb (Jupyter notebooks)"
        - "requirements.txt with pandas, numpy, scikit-learn"
        - "data/, datasets/, models/ directories"
        - "*.py files with data processing patterns"
      
      package_indicators:
        - "pandas, numpy, matplotlib, seaborn"
        - "scikit-learn, tensorflow, pytorch"
        - "jupyter, jupyterlab"
        - "streamlit, dash, flask (for demos)"
      
      commit_patterns:
        - "Data analysis, model training commits"
        - "Notebook updates and experiments"
        - "Dataset processing and cleaning"
    
    default_assumptions:
      architecture: "Notebook-driven with supporting Python scripts"
      deployment: "Research/analysis focus, limited production deployment"
      testing: "Data validation and model evaluation"
      performance_focus: "Processing time and memory usage"
      user_interaction: "Analyst/researcher workflows"
      scaling_pattern: "Computational scaling (more CPU/memory)"
      
    questions_to_skip:
      - "AF001"  # Application structure (assume notebook-based)
      - "UW001"  # User workflows (assume analyst workflows)
      - "IP001"  # External integrations (unless production ML)
      
    confirmation_questions:
      - "This looks like data science/ML work - is that the main focus?"
      - "Are you primarily doing analysis and research, or building production models?"
      - "Jupyter notebook-driven development with supporting Python scripts?"
    
    follow_up_priorities:
      high_priority:
        - "Data sources and acquisition methods"
        - "Analysis goals and success metrics"
        - "Model types and ML approaches"
        - "Data processing and cleaning workflows"
      
      medium_priority:
        - "Collaboration and notebook sharing"
        - "Environment and dependency management"
        - "Results visualization and reporting"
      
      explore_if_applicable:
        - "Production model deployment"
        - "Real-time vs batch processing"
        - "MLOps and model monitoring"

  # ---------------------------------------------------------------------------
  # DevOps/Infrastructure Project Patterns
  # ---------------------------------------------------------------------------
  devops_infrastructure:
    detection_patterns:
      file_indicators:
        - "Dockerfile, docker-compose.yml"
        - "terraform/, ansible/, k8s/ directories"
        - "CI/CD pipeline files (.github/, .gitlab-ci.yml)"
        - "infrastructure as code files"
      
      technology_indicators:
        - "kubernetes, docker, terraform"
        - "aws, gcp, azure cloud services"
        - "jenkins, github actions, gitlab ci"
        - "prometheus, grafana, elk stack"
      
      commit_patterns:
        - "Infrastructure provisioning"
        - "CI/CD pipeline updates"
        - "Monitoring and alerting setup"
    
    default_assumptions:
      architecture: "Infrastructure as code with automation"
      deployment: "Automated pipeline-driven deployment"
      testing: "Infrastructure testing and validation"
      performance_focus: "System reliability and uptime"
      user_interaction: "Developer and operations team workflows"
      scaling_pattern: "Auto-scaling infrastructure"
      
    questions_to_skip:
      - "BC001"  # Business entities (infrastructure focus)
      - "UW001"  # User workflows (assume ops workflows)
      - "PE003"  # Human impact (assume operational efficiency)
      
    confirmation_questions:
      - "This is infrastructure and DevOps focused work?"
      - "Automation and system reliability are the primary concerns?"
      - "Infrastructure as code approach with automated deployments?"
    
    follow_up_priorities:
      high_priority:
        - "Cloud platform and service choices"
        - "Container orchestration approach"
        - "CI/CD pipeline structure"
        - "Monitoring and observability strategy"
      
      medium_priority:
        - "Security and compliance requirements"
        - "Disaster recovery and backup strategies"
        - "Team access and permission management"
      
      advanced_topics:
        - "Multi-region and high availability"
        - "Infrastructure cost optimization"
        - "Advanced security patterns"

  # ---------------------------------------------------------------------------
  # Mobile Application Patterns
  # ---------------------------------------------------------------------------
  mobile_application:
    detection_patterns:
      file_indicators:
        - "android/, ios/ directories"
        - "package.json with react-native"
        - "pubspec.yaml (Flutter)"
        - "*.swift, *.kotlin files"
      
      framework_indicators:
        - "react-native, flutter"
        - "xamarin, ionic"
        - "android studio, xcode projects"
      
      commit_patterns:
        - "iOS/Android specific commits"
        - "Mobile UI/UX development"
        - "App store deployment"
    
    default_assumptions:
      architecture: "Client-server with mobile app frontend"
      deployment: "App store distribution"
      testing: "Device testing and app store validation"
      performance_focus: "App responsiveness and battery usage"
      user_interaction: "Touch-based mobile interface"
      scaling_pattern: "Backend scaling for mobile clients"
      
    questions_to_skip:
      - "AF005"  # Frontend framework (already detected as mobile)
      - "PE005"  # Project type (mobile app detected)
      
    confirmation_questions:
      - "I can see this is mobile app development - native, React Native, or Flutter?"
      - "Are you targeting iOS, Android, or both platforms?"
      - "App store distribution or internal/enterprise deployment?"
    
    follow_up_priorities:
      high_priority:
        - "Platform choice and cross-platform strategy"
        - "Backend API design for mobile"
        - "User authentication and data sync"
        - "App store deployment process"
      
      mobile_specific:
        - "Offline functionality requirements"
        - "Push notifications and real-time features"
        - "Performance and battery optimization"
        - "Device-specific feature usage"

  # ---------------------------------------------------------------------------
  # Enterprise Software Patterns
  # ---------------------------------------------------------------------------
  enterprise_software:
    detection_patterns:
      framework_indicators:
        - "spring-boot, .NET Core, Jakarta EE"
        - "maven, gradle enterprise patterns"
        - "enterprise databases (Oracle, SQL Server)"
      
      structure_indicators:
        - "Multi-module/layered architecture"
        - "Enterprise integration patterns"
        - "Comprehensive logging and monitoring"
        - "Security and compliance focus"
      
      team_indicators:
        - "Large number of contributors (10+)"
        - "Formal commit message patterns"
        - "Extensive documentation"
        - "Code review and governance patterns"
    
    default_assumptions:
      architecture: "Layered enterprise architecture"
      deployment: "Enterprise data center or private cloud"
      testing: "Comprehensive testing with governance"
      performance_focus: "Scalability and reliability"
      user_interaction: "Business user workflows"
      scaling_pattern: "Vertical and horizontal scaling"
      
    questions_to_skip:
      - "SC005"  # Team size (assume large team)
      - "CS001"  # Coding standards (assume formal standards)
      
    confirmation_questions:
      - "This looks like enterprise software development - is that right?"
      - "Large team with formal processes and governance?"
      - "Enterprise-grade reliability and compliance requirements?"
    
    follow_up_priorities:
      high_priority:
        - "Enterprise architecture patterns"
        - "Compliance and regulatory requirements"
        - "Integration with enterprise systems"
        - "Security and audit requirements"
      
      governance_focus:
        - "Change management and approval processes"
        - "Documentation and knowledge management"
        - "Team coordination and standards"
        - "Performance and monitoring requirements"

# =============================================================================
# FRAMEWORK-SPECIFIC DEFAULTS
# =============================================================================
framework_defaults:
  
  # ---------------------------------------------------------------------------
  # React.js Defaults
  # ---------------------------------------------------------------------------
  react:
    detection_confidence: 0.95
    detection_patterns:
      - "package.json contains 'react'"
      - "src/components/ directory exists"
      - "JSX files (*.jsx, *.tsx)"
      - "React-specific imports in code"
    
    default_assumptions:
      architecture: "Component-based SPA"
      state_management: "useState/useContext (simple) or Redux/Zustand (complex)"
      styling: "CSS modules, styled-components, or Tailwind"
      testing: "Jest and React Testing Library"
      build_system: "Create React App, Vite, or custom Webpack"
      
    smart_questions:
      instead_of: "What frontend framework?"
      ask: "I see you're using React - Create React App, Next.js, or custom setup?"
      
      instead_of: "How do you handle styling?"
      ask: "For styling - CSS modules, styled-components, Tailwind, or something else?"
    
    skip_questions:
      - "AF005"  # Frontend framework (React detected)
      
    priority_questions:
      - "State management approach (Context, Redux, Zustand)?"
      - "Server-side rendering or client-side only?"
      - "TypeScript or JavaScript?"

  # ---------------------------------------------------------------------------
  # Node.js Backend Defaults
  # ---------------------------------------------------------------------------
  node_backend:
    detection_confidence: 0.9
    detection_patterns:
      - "package.json with express, koa, fastify"
      - "server.js, app.js, index.js entry points"
      - "routes/, controllers/, middleware/ directories"
    
    default_assumptions:
      architecture: "RESTful API server"
      database: "SQL (PostgreSQL/MySQL) or NoSQL (MongoDB)"
      authentication: "JWT tokens or sessions"
      testing: "Jest, Mocha, or Supertest"
      deployment: "Docker containers on cloud platforms"
      
    smart_questions:
      instead_of: "What backend framework?"
      ask: "I see Node.js - Express, Fastify, or another framework?"
      
      instead_of: "How do you handle databases?"
      ask: "Database approach - PostgreSQL with an ORM, MongoDB, or something else?"
    
    priority_questions:
      - "API design - REST, GraphQL, or mixed?"
      - "Database and ORM choices"
      - "Authentication and authorization strategy"

  # ---------------------------------------------------------------------------
  # Python Web Development Defaults
  # ---------------------------------------------------------------------------
  python_web:
    detection_confidence: 0.9
    detection_patterns:
      - "requirements.txt with django, flask, fastapi"
      - "manage.py (Django) or app.py (Flask)"
      - "Python project structure patterns"
    
    default_assumptions:
      architecture: "MVC or API-first architecture"
      database: "PostgreSQL with ORM (Django ORM, SQLAlchemy)"
      testing: "pytest or Django test framework"
      deployment: "Docker containers or WSGI servers"
      environment: "Virtual environments (venv, pipenv, poetry)"
      
    smart_questions:
      instead_of: "What Python framework?"
      ask: "Django, Flask, FastAPI, or another Python framework?"
      
      instead_of: "How do you handle data?"
      ask: "ORM approach - Django ORM, SQLAlchemy, or raw SQL?"
    
    priority_questions:
      - "API vs. full-stack web application?"
      - "Database modeling and migration strategy"
      - "Background task processing (Celery, etc.)?"

# =============================================================================
# TEAM SIZE DEFAULTS
# =============================================================================
team_size_defaults:
  
  # ---------------------------------------------------------------------------
  # Solo Developer (1 person)
  # ---------------------------------------------------------------------------
  solo_developer:
    detection_patterns:
      - "Single git contributor"
      - "Minimal branching strategy"
      - "Simple project structure"
      - "Personal naming conventions"
    
    default_assumptions:
      workflow: "Direct to main branch, minimal process"
      priorities: "Productivity and learning over standards"
      testing: "Basic testing, focus on working code"
      documentation: "Minimal, personal notes style"
      tools: "Simple, integrated toolchains"
      
    question_adjustments:
      skip_coordination: "How do you coordinate with team?"
      skip_standards: "Team coding standards?"
      focus_productivity: "What slows down your development most?"
      focus_learning: "What would help you learn and build faster?"
    
    priority_areas:
      - "Personal productivity optimization"
      - "Learning and skill development"
      - "Quick debugging and problem solving"
      - "Automation of repetitive tasks"

  # ---------------------------------------------------------------------------
  # Small Team (2-5 people)
  # ---------------------------------------------------------------------------
  small_team:
    detection_patterns:
      - "2-5 regular git contributors"
      - "Simple branching (feature branches)"
      - "Informal but consistent patterns"
      - "Some code review activity"
    
    default_assumptions:
      workflow: "Feature branches with informal review"
      priorities: "Consistency and knowledge sharing"
      testing: "Growing test coverage, shared standards"
      documentation: "Shared understanding, some docs"
      tools: "Shared tooling, lightweight processes"
      
    question_adjustments:
      focus_consistency: "How do you maintain consistency across the team?"
      focus_knowledge: "How do you share knowledge and decisions?"
      simple_coordination: "What coordination challenges do you face?"
    
    priority_areas:
      - "Code consistency and standards"
      - "Simple knowledge sharing"
      - "Lightweight coordination tools"
      - "Shared development environment"

  # ---------------------------------------------------------------------------
  # Medium Team (6-15 people)
  # ---------------------------------------------------------------------------
  medium_team:
    detection_patterns:
      - "6-15 regular contributors"
      - "Structured branching strategy"
      - "Code review processes"
      - "Some specialization/ownership"
    
    default_assumptions:
      workflow: "Pull request workflow with reviews"
      priorities: "Standards enforcement and coordination"
      testing: "Formal testing requirements"
      documentation: "Structured documentation practices"
      tools: "Integrated development and collaboration tools"
      
    question_adjustments:
      focus_standards: "How do you enforce coding standards?"
      focus_reviews: "What's your code review process?"
      focus_coordination: "How do different team members coordinate?"
    
    priority_areas:
      - "Standards enforcement automation"
      - "Efficient review processes"
      - "Knowledge management systems"
      - "Cross-team coordination"

  # ---------------------------------------------------------------------------
  # Large Team (15+ people)
  # ---------------------------------------------------------------------------
  large_team:
    detection_patterns:
      - "15+ contributors"
      - "Multiple repositories or modules"
      - "Formal processes and governance"
      - "Specialized roles and teams"
    
    default_assumptions:
      workflow: "Formal governance and approval processes"
      priorities: "Architecture governance and enterprise patterns"
      testing: "Comprehensive testing and quality gates"
      documentation: "Extensive documentation and knowledge management"
      tools: "Enterprise development and governance tools"
      
    question_adjustments:
      focus_governance: "How do you manage architectural decisions?"
      focus_enterprise: "What enterprise patterns and standards apply?"
      focus_coordination: "How do multiple teams coordinate?"
    
    priority_areas:
      - "Architecture governance and standards"
      - "Enterprise integration patterns"
      - "Cross-team communication and coordination"
      - "Knowledge preservation and sharing"

# =============================================================================
# DOMAIN-SPECIFIC DEFAULTS
# =============================================================================
domain_defaults:
  
  # ---------------------------------------------------------------------------
  # E-commerce Platform
  # ---------------------------------------------------------------------------
  ecommerce:
    detection_patterns:
      - "Models: Product, Order, Cart, Customer"
      - "Payment processing integrations"
      - "Inventory management code"
      - "Shopping cart functionality"
    
    default_assumptions:
      core_entities: "Products, Orders, Customers, Payments"
      critical_workflows: "Browse → Cart → Checkout → Fulfillment"
      integrations: "Payment processors, shipping providers"
      compliance: "PCI DSS for payment processing"
      performance_focus: "Catalog performance, checkout reliability"
      
    auto_fill_questions:
      business_entities: "Products, Orders, Customers, Payments, Inventory"
      critical_workflows: "Shopping and checkout process"
      key_integrations: "Payment processing and shipping"
    
    priority_explorations:
      - "Payment processing approach and PCI compliance"
      - "Inventory management and real-time updates"
      - "Order fulfillment and shipping integration"
      - "Customer data and personalization"

  # ---------------------------------------------------------------------------
  # Financial Services
  # ---------------------------------------------------------------------------
  fintech:
    detection_patterns:
      - "Models: Account, Transaction, Balance"
      - "Financial calculations and interest"
      - "Audit trails and compliance code"
      - "Regulatory reporting features"
    
    default_assumptions:
      core_entities: "Accounts, Transactions, Users, Balances"
      critical_workflows: "Account management, money movement"
      integrations: "Banking APIs, payment networks"
      compliance: "SOX, PCI, regional financial regulations"
      performance_focus: "Transaction reliability, data integrity"
      
    auto_fill_questions:
      business_entities: "Accounts, Transactions, Balances, Users"
      critical_workflows: "Money movement and account management"
      key_integrations: "Banking and payment systems"
    
    priority_explorations:
      - "Transaction processing and audit requirements"
      - "Regulatory compliance (SOX, PCI, regional)"
      - "Data security and encryption requirements"
      - "Real-time vs. batch processing needs"

  # ---------------------------------------------------------------------------
  # Healthcare Platform
  # ---------------------------------------------------------------------------
  healthcare:
    detection_patterns:
      - "Models: Patient, Provider, Appointment"
      - "HIPAA compliance code"
      - "Medical record management"
      - "Healthcare integration standards"
    
    default_assumptions:
      core_entities: "Patients, Providers, Appointments, Records"
      critical_workflows: "Patient management, care delivery"
      integrations: "EMR systems, HL7/FHIR standards"
      compliance: "HIPAA, healthcare data protection"
      performance_focus: "Data security, system reliability"
      
    auto_fill_questions:
      business_entities: "Patients, Providers, Appointments, Medical Records"
      critical_workflows: "Patient care and data management"
      key_integrations: "EMR systems and healthcare standards"
    
    priority_explorations:
      - "HIPAA compliance and data protection"
      - "Healthcare system integrations (HL7, FHIR)"
      - "Patient data workflows and access controls"
      - "Audit requirements and data retention"

# =============================================================================
# SMART DEFAULT APPLICATION LOGIC
# =============================================================================
application_logic:
  
  # ---------------------------------------------------------------------------
  # Detection Algorithm
  # ---------------------------------------------------------------------------
  detection_process:
    1_repository_analysis:
      - "Scan package.json, requirements.txt, build files"
      - "Analyze directory structure patterns"
      - "Check git history and contributor patterns"
      - "Identify framework and technology indicators"
    
    2_confidence_calculation:
      - "Weight multiple detection signals"
      - "Calculate confidence score (0-1)"
      - "Require minimum threshold for assumptions"
      - "Flag low-confidence areas for explicit questions"
    
    3_default_application:
      - "Apply appropriate default assumptions"
      - "Skip redundant questions"
      - "Prepare confirmation questions"
      - "Identify priority exploration areas"
  
  # ---------------------------------------------------------------------------
  # Assumption Validation Strategy
  # ---------------------------------------------------------------------------
  validation_approach:
    high_confidence_defaults:
      confidence_threshold: 0.85
      strategy: "State assumption and ask for confirmation"
      example: "I can see this is a React application - is that right?"
      
    medium_confidence_defaults:
      confidence_threshold: 0.65
      strategy: "Present most likely option with alternatives"
      example: "This looks like a web application - client-server with an API, or something different?"
      
    low_confidence_areas:
      confidence_threshold: 0.40
      strategy: "Ask standard open-ended questions"
      example: "What type of project are you building?"
  
  # ---------------------------------------------------------------------------
  # Time and Engagement Optimization
  # ---------------------------------------------------------------------------
  optimization_benefits:
    time_savings:
      typical_reduction: "15-25% of total consultation time"
      mechanism: "Skip obvious questions, focus on unique aspects"
      user_experience: "Feels intelligent and attentive"
    
    engagement_improvement:
      focus_shift: "From basic facts to interesting project specifics"
      user_perception: "System understands their project"
      conversation_quality: "Higher value questions and discussion"
    
    accuracy_maintenance:
      validation_required: "All assumptions must be confirmed"
      correction_mechanism: "Easy to correct wrong assumptions"
      fallback_strategy: "Revert to full questioning if assumptions fail"

# =============================================================================
# USAGE EXAMPLES
# =============================================================================
usage_examples:
  
  # ---------------------------------------------------------------------------
  # React Web App Example
  # ---------------------------------------------------------------------------
  react_web_app_flow:
    detected_pattern: "package.json with react, src/components/, express server"
    
    standard_flow_time: "7 minutes"
    questions_asked:
      - "What type of project are you building?"
      - "How is your application structured?"
      - "What's your frontend built with?"
      - "What's your backend framework?"
    
    smart_default_flow_time: "4 minutes"
    questions_asked:
      - "I can see this is a React web application with Express backend - is that right?"
      - "Create React App, Next.js, or custom setup?"
      - "Any specific React patterns - state management, routing?"
    
    time_saved: "3 minutes"
    engagement_improved: "Focus on React-specific patterns rather than basic project type"
  
  # ---------------------------------------------------------------------------
  # Data Science Project Example
  # ---------------------------------------------------------------------------
  data_science_flow:
    detected_pattern: "*.ipynb files, requirements.txt with pandas/scikit-learn"
    
    standard_flow_time: "8 minutes"
    questions_avoided:
      - "How is your application structured?" (notebook-based obvious)
      - "What are user workflows?" (analyst workflows assumed)
      - "External integrations?" (typically data sources, not APIs)
    
    smart_default_flow_time: "5 minutes"
    questions_focused:
      - "This looks like data science work - analysis or production models?"
      - "What are your main data sources?"
      - "Analysis goals and success metrics?"
    
    time_saved: "3 minutes"
    engagement_improved: "Skip irrelevant questions, focus on data science specifics"
  
  # ---------------------------------------------------------------------------
  # DevOps Infrastructure Example
  # ---------------------------------------------------------------------------
  devops_flow:
    detected_pattern: "Dockerfile, terraform/, kubernetes/ directories"
    
    assumptions_made:
      - "Infrastructure as code approach"
      - "Container-based deployment"
      - "Automation-focused workflow"
    
    questions_skipped:
      - "What are core business entities?" (infrastructure focus)
      - "User workflows?" (operations team workflows assumed)
    
    questions_prioritized:
      - "Cloud platform preferences - AWS, GCP, Azure?"
      - "Container orchestration - Kubernetes, managed services?"
      - "CI/CD pipeline structure and tools?"
    
    result: "Direct focus on DevOps-specific concerns, skip irrelevant business domain questions"

This smart defaults system reduces consultation time by 15-25% while improving engagement by focusing on project-specific and interesting aspects rather than obvious patterns that can be detected automatically.