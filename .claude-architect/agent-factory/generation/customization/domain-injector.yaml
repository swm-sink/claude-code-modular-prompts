# Domain Knowledge Injector
# Claude Context Architect - Agent Generation System
# Version: 1.0
# Purpose: Inject domain-specific knowledge and terminology into agent templates

metadata:
  component_type: "domain_customization"
  version: "1.0"
  created: "2025-08-07"
  purpose: "Inject project-specific domain knowledge into generated agents"

# =============================================================================
# DOMAIN KNOWLEDGE EXTRACTION
# =============================================================================

domain_extraction:
  # Business domain identification
  business_domain_detection:
    ecommerce:
      key_concepts: ["products", "orders", "customers", "inventory", "payments", "shipping"]
      business_rules: ["pricing strategies", "inventory management", "order fulfillment", "customer lifecycle"]
      terminology: ["SKU", "conversion rate", "cart abandonment", "customer lifetime value"]
      
    fintech:
      key_concepts: ["transactions", "accounts", "compliance", "risk", "regulatory", "audit"]
      business_rules: ["KYC requirements", "transaction limits", "regulatory reporting", "risk assessment"]
      terminology: ["AML", "PCI DSS", "GDPR", "settlement", "clearing", "liquidity"]
      
    healthcare:
      key_concepts: ["patients", "providers", "treatments", "records", "privacy", "compliance"]
      business_rules: ["HIPAA compliance", "patient consent", "treatment protocols", "data retention"]
      terminology: ["PHI", "EHR", "HL7", "FHIR", "clinical workflows", "patient safety"]
      
    education:
      key_concepts: ["students", "courses", "assessments", "learning", "progress", "outcomes"]
      business_rules: ["grading policies", "enrollment rules", "progress tracking", "outcome measurement"]
      terminology: ["LMS", "SCORM", "learning analytics", "competency mapping", "assessment rubrics"]
      
  # Technical domain patterns
  technical_domain_patterns:
    web_development:
      frameworks: ["React", "Vue", "Angular", "Django", "Flask", "Express"]
      patterns: ["MVC", "Component-based", "SPA", "SSR", "PWA", "JAMstack"]
      terminology: ["responsive design", "SEO optimization", "performance metrics", "accessibility"]
      
    mobile_development:
      frameworks: ["React Native", "Flutter", "Xamarin", "Ionic", "Swift", "Kotlin"]
      patterns: ["Native", "Hybrid", "Cross-platform", "Progressive Web Apps"]
      terminology: ["app store optimization", "mobile-first", "offline support", "push notifications"]
      
    data_science:
      frameworks: ["Pandas", "NumPy", "TensorFlow", "PyTorch", "Scikit-learn", "Spark"]
      patterns: ["ETL", "ML Pipeline", "Feature Engineering", "Model Training", "Deployment"]
      terminology: ["data preprocessing", "model validation", "feature selection", "hyperparameter tuning"]

# =============================================================================
# KNOWLEDGE INJECTION PATTERNS
# =============================================================================

injection_patterns:
  # Terminology injection
  terminology_injection:
    vocabulary_replacement:
      generic_terms: "Replace generic business terms with domain-specific vocabulary"
      technical_jargon: "Inject appropriate technical terminology for the domain"
      acronym_expansion: "Include domain-specific acronyms and their meanings"
      
    context_aware_usage:
      business_context: "Use business terminology in business logic discussions"
      technical_context: "Use technical terminology in implementation discussions"
      mixed_context: "Balance business and technical terminology appropriately"
      
  # Business rule integration
  business_rule_integration:
    rule_identification: "{{BUSINESS_RULE_IDENTIFICATION_METHODS}}"
    rule_validation: "{{BUSINESS_RULE_VALIDATION_PATTERNS}}"
    rule_enforcement: "{{BUSINESS_RULE_ENFORCEMENT_STRATEGIES}}"
    
  # Domain model injection
  domain_model_injection:
    entity_identification: "{{DOMAIN_ENTITY_IDENTIFICATION}}"
    relationship_mapping: "{{ENTITY_RELATIONSHIP_MAPPING}}"
    behavior_modeling: "{{DOMAIN_BEHAVIOR_MODELING}}"

# =============================================================================
# DOMAIN-SPECIFIC CAPABILITIES
# =============================================================================

domain_capabilities:
  # Business domain capabilities
  ecommerce_capabilities:
    product_management:
      - "Product catalog management and optimization"
      - "Inventory tracking and automated reordering"
      - "Pricing strategy implementation and validation"
    order_processing:
      - "Order workflow automation and validation"
      - "Payment processing integration and security"
      - "Shipping and fulfillment optimization"
    customer_experience:
      - "Customer journey mapping and optimization"
      - "Personalization engine development"
      - "Customer support automation"
      
  fintech_capabilities:
    compliance_management:
      - "Regulatory compliance validation and reporting"
      - "AML/KYC process automation"
      - "Audit trail generation and maintenance"
    transaction_processing:
      - "High-volume transaction processing optimization"
      - "Real-time fraud detection and prevention"
      - "Payment gateway integration and security"
    risk_management:
      - "Risk assessment algorithm development"
      - "Portfolio optimization and rebalancing"
      - "Stress testing and scenario analysis"
      
  healthcare_capabilities:
    patient_management:
      - "Patient record management with HIPAA compliance"
      - "Treatment protocol implementation and tracking"
      - "Patient outcome measurement and reporting"
    clinical_workflows:
      - "Clinical decision support system integration"
      - "Medical device data integration"
      - "Clinical trial data management"
    compliance_security:
      - "HIPAA compliance validation and maintenance"
      - "PHI data protection and encryption"
      - "Audit logging for clinical activities"

# =============================================================================
# DOMAIN KNOWLEDGE TEMPLATES
# =============================================================================

knowledge_templates:
  # Domain-specific agent enhancements
  domain_agent_enhancements:
    architecture_agent_domain_enhancement:
      ecommerce: "E-commerce platform architecture patterns, scalability for high-traffic events"
      fintech: "Financial system architecture, high-availability transaction processing"
      healthcare: "Healthcare system integration, FHIR compliance, clinical workflow design"
      
    data_agent_domain_enhancement:
      ecommerce: "Customer data analytics, inventory optimization, recommendation engine data"
      fintech: "Financial data modeling, regulatory reporting data structures"
      healthcare: "Clinical data modeling, patient analytics, research data management"
      
    security_agent_domain_enhancement:
      ecommerce: "PCI DSS compliance, customer data protection, fraud prevention"
      fintech: "Financial data security, regulatory compliance, transaction security"
      healthcare: "HIPAA compliance, PHI protection, clinical system security"
      
  # Domain-specific validation rules
  domain_validation_templates:
    business_rule_validation:
      ecommerce: "Inventory validation, pricing rule validation, order workflow validation"
      fintech: "Transaction limit validation, compliance rule validation, risk threshold validation"
      healthcare: "Clinical protocol validation, patient safety rule validation, privacy rule validation"
      
    data_integrity_validation:
      ecommerce: "Product data consistency, customer data integrity, order data validation"
      fintech: "Financial data accuracy, transaction consistency, regulatory data integrity"
      healthcare: "Patient data accuracy, clinical data consistency, research data integrity"

# =============================================================================
# INJECTION ALGORITHMS
# =============================================================================

injection_algorithms:
  # Knowledge mapping algorithm
  knowledge_mapping:
    domain_detection:
      confidence_scoring: "Calculate confidence score for domain classification"
      multi_domain_handling: "Handle projects that span multiple domains"
      domain_hierarchy: "Manage domain and subdomain relationships"
      
    knowledge_prioritization:
      relevance_scoring: "Score knowledge elements by relevance to project"
      impact_assessment: "Assess impact of injecting specific knowledge"
      resource_optimization: "Optimize knowledge injection for resource constraints"
      
  # Template enhancement algorithm
  template_enhancement:
    placeholder_identification: "Identify placeholders that need domain knowledge"
    knowledge_injection_points: "Find optimal points for knowledge injection"
    consistency_maintenance: "Maintain consistency across injected knowledge"
    
  # Validation and quality assurance
  injection_validation:
    accuracy_verification: "Verify accuracy of injected domain knowledge"
    consistency_checking: "Check consistency of domain terminology usage"
    completeness_assessment: "Assess completeness of domain knowledge injection"

# =============================================================================
# DOMAIN-SPECIFIC CUSTOMIZATIONS
# =============================================================================

domain_customizations:
  # Industry-specific adaptations
  industry_adaptations:
    startup_domain_focus:
      priorities: ["rapid iteration", "market validation", "scalability planning"]
      terminology: ["MVP", "product-market fit", "growth hacking", "burn rate"]
      business_rules: ["lean methodology", "agile development", "continuous deployment"]
      
    enterprise_domain_focus:
      priorities: ["compliance", "governance", "integration", "scalability"]
      terminology: ["enterprise architecture", "SOA", "governance frameworks", "compliance standards"]
      business_rules: ["approval workflows", "change management", "risk assessment", "audit requirements"]
      
    regulated_industry_focus:
      priorities: ["compliance", "audit trail", "data protection", "regulatory reporting"]
      terminology: ["regulatory framework", "compliance validation", "audit trail", "data governance"]
      business_rules: ["regulatory requirements", "compliance validation", "audit procedures", "data retention"]
      
  # Technology stack adaptations
  technology_adaptations:
    cloud_native_domain:
      concepts: ["microservices", "containers", "orchestration", "serverless", "cloud-native patterns"]
      terminology: ["Kubernetes", "Docker", "service mesh", "API gateway", "event-driven architecture"]
      patterns: ["12-factor app", "CQRS", "event sourcing", "circuit breaker", "bulkhead isolation"]
      
    data_intensive_domain:
      concepts: ["big data", "real-time processing", "data pipelines", "analytics", "machine learning"]
      terminology: ["ETL", "data lake", "data warehouse", "streaming analytics", "batch processing"]
      patterns: ["lambda architecture", "kappa architecture", "data mesh", "feature store", "model serving"]

# =============================================================================
# INTEGRATION WITH OTHER SYSTEMS
# =============================================================================

system_integration:
  # Context layer integration
  context_integration:
    layer_1_domain_injection: "Inject domain vision and strategic context"
    layer_2_technical_injection: "Inject domain-specific technical patterns"
    layer_3_domain_knowledge: "Primary domain knowledge and business rules injection"
    layer_4_workflow_injection: "Inject domain-specific workflow patterns"
    layer_5_navigation_injection: "Inject domain-specific cross-references"
    
  # Agent specialization integration
  agent_integration:
    capability_enhancement: "Enhance agent capabilities with domain knowledge"
    specialization_deepening: "Deepen agent specialization with domain expertise"
    collaboration_optimization: "Optimize agent collaboration for domain workflows"
    
  # Validation system integration
  validation_integration:
    domain_rule_validation: "Integrate domain-specific validation rules"
    terminology_consistency: "Validate consistency of domain terminology usage"
    business_logic_validation: "Validate business logic against domain rules"

# =============================================================================
# CONTINUOUS LEARNING AND IMPROVEMENT
# =============================================================================

continuous_improvement:
  # Knowledge base evolution
  knowledge_evolution:
    domain_knowledge_updates: "Regular updates to domain knowledge bases"
    terminology_evolution: "Track and integrate evolving domain terminology"
    best_practice_integration: "Integrate emerging domain best practices"
    
  # Injection effectiveness monitoring
  effectiveness_monitoring:
    injection_success_metrics: "Monitor success of domain knowledge injection"
    user_feedback_integration: "Integrate user feedback on domain accuracy"
    domain_expert_validation: "Validate injected knowledge with domain experts"
    
  # Adaptation and refinement
  adaptation_cycles:
    injection_pattern_refinement: "Refine injection patterns based on results"
    domain_model_evolution: "Evolve domain models based on project learnings"
    customization_optimization: "Optimize customization patterns for better results"

# =============================================================================
# END OF DOMAIN KNOWLEDGE INJECTOR
# =============================================================================