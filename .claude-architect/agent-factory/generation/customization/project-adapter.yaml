# Project Adapter
# Claude Context Architect - Agent Generation System
# Version: 1.0
# Purpose: Project-specific adaptation system for agent generation

metadata:
  component_type: "customization_engine"
  version: "1.0"
  created: "2025-08-07"
  purpose: "Adapt agent templates to specific project characteristics"

# =============================================================================
# PROJECT ANALYSIS FRAMEWORK
# =============================================================================

project_analysis:
  # Project characteristic detection
  detection_methods:
    framework_detection:
      web_frameworks: ["React", "Vue", "Angular", "Django", "Flask", "Express", "Next.js", "Nuxt.js"]
      mobile_frameworks: ["React Native", "Flutter", "Xamarin", "Ionic"]
      backend_frameworks: ["Spring", "Django", "Rails", "Express", "FastAPI", "ASP.NET"]
      data_frameworks: ["Pandas", "NumPy", "TensorFlow", "PyTorch", "Spark"]
      
    technology_stack_analysis:
      programming_languages: "{{PROGRAMMING_LANGUAGE_DETECTION}}"
      databases: "{{DATABASE_TECHNOLOGY_DETECTION}}"
      infrastructure: "{{INFRASTRUCTURE_PATTERN_DETECTION}}"
      deployment_platforms: "{{DEPLOYMENT_PLATFORM_DETECTION}}"
      
    project_scale_assessment:
      code_base_size: "{{CODEBASE_SIZE_METRICS}}"
      team_size_indicators: "{{TEAM_SIZE_INDICATORS}}"
      complexity_metrics: "{{COMPLEXITY_ASSESSMENT_METHODS}}"
      
  # Architecture pattern recognition
  architecture_patterns:
    monolithic: "{{MONOLITHIC_PATTERN_DETECTION}}"
    microservices: "{{MICROSERVICES_PATTERN_DETECTION}}"
    serverless: "{{SERVERLESS_PATTERN_DETECTION}}"
    event_driven: "{{EVENT_DRIVEN_PATTERN_DETECTION}}"
    layered: "{{LAYERED_ARCHITECTURE_DETECTION}}"
    
  # Domain identification
  domain_classification:
    business_domains: ["ecommerce", "fintech", "healthcare", "education", "media", "gaming"]
    technical_domains: ["web_development", "mobile_development", "data_science", "devops", "security"]
    industry_verticals: ["startup", "enterprise", "government", "non_profit", "open_source"]

# =============================================================================
# ADAPTATION RULES ENGINE
# =============================================================================

adaptation_rules:
  # Framework-specific adaptations
  framework_adaptations:
    react_adaptations:
      agent_priorities: ["Code Generation Agent", "Testing Agent", "Performance Agent"]
      tool_specializations:
        code_generation: "JSX component generation, React hooks patterns"
        testing: "Jest, React Testing Library integration"
        performance: "React profiling, bundle optimization"
      context_emphasis: ["Layer 2: Technical Architecture", "Layer 4: Team Workflows"]
      
    django_adaptations:
      agent_priorities: ["Architecture Agent", "Security Agent", "Data Agent"]
      tool_specializations:
        architecture: "Django app structure, MVT patterns"
        security: "Django security middleware, authentication"
        data: "Django ORM optimization, database migrations"
      context_emphasis: ["Layer 2: Technical Architecture", "Layer 3: Domain Knowledge"]
      
    microservices_adaptations:
      agent_priorities: ["DevOps Agent", "Integration Agent", "Performance Agent"]
      tool_specializations:
        devops: "Container orchestration, service discovery"
        integration: "API gateway, service mesh configuration"
        performance: "Service-to-service optimization, load balancing"
      context_emphasis: ["Layer 2: Technical Architecture", "Layer 4: Team Workflows"]
      
  # Scale-specific adaptations
  scale_adaptations:
    startup_focus:
      agent_selection_criteria: "Speed, flexibility, rapid iteration"
      priority_agents: ["Code Generation Agent", "Testing Agent", "Documentation Agent"]
      customization_focus: "Rapid prototyping, MVP development, technical debt management"
      
    enterprise_focus:
      agent_selection_criteria: "Scalability, compliance, standardization"
      priority_agents: ["Architecture Agent", "Security Agent", "Review Agent", "Integration Agent"]
      customization_focus: "Enterprise patterns, compliance validation, governance"
      
    open_source_focus:
      agent_selection_criteria: "Community standards, documentation quality, contribution workflows"
      priority_agents: ["Documentation Agent", "Review Agent", "Testing Agent"]
      customization_focus: "Contribution guidelines, community engagement, code quality"

# =============================================================================
# CUSTOMIZATION PATTERNS
# =============================================================================

customization_patterns:
  # Agent capability customization
  capability_customization:
    context_layer_weighting:
      technical_projects: "Layer 2 (40%), Layer 4 (30%), Layer 1 (20%), Layer 3 (10%)"
      business_applications: "Layer 3 (35%), Layer 1 (30%), Layer 2 (25%), Layer 4 (10%)"
      infrastructure_projects: "Layer 2 (45%), Layer 4 (35%), Layer 1 (20%)"
      
    tool_specialization_mapping:
      web_development: "Bash for build tools, Read for config files, Edit for component generation"
      data_science: "Bash for notebook execution, Read for data files, specialized analysis tools"
      devops: "Bash for infrastructure commands, Read for configuration validation"
      
  # Communication style adaptation
  communication_adaptation:
    technical_teams: "Detailed technical explanations, code-focused examples"
    mixed_teams: "Balanced technical and business language, visual representations"
    business_focused: "High-level summaries, business impact focus, minimal technical jargon"
    
  # Workflow integration patterns
  workflow_integration:
    agile_teams: "Sprint-aligned deliverables, iterative improvements, story-driven development"
    waterfall_teams: "Phase-aligned deliverables, comprehensive documentation, formal approval processes"
    devops_teams: "Continuous integration focus, automation-first approach, infrastructure as code"

# =============================================================================
# PROJECT-SPECIFIC CONFIGURATIONS
# =============================================================================

project_configurations:
  # Configuration templates by project type
  web_application_config:
    mandatory_agents: ["Architecture Agent", "Code Generation Agent", "Testing Agent", "Performance Agent"]
    optional_agents: ["Security Agent", "Documentation Agent", "Review Agent"]
    context_priorities: ["Layer 2", "Layer 4", "Layer 3", "Layer 1", "Layer 5"]
    tool_emphasis: ["Read", "Write", "Edit", "Bash", "Grep"]
    
  mobile_application_config:
    mandatory_agents: ["Code Generation Agent", "Testing Agent", "Performance Agent", "DevOps Agent"]
    optional_agents: ["Review Agent", "Security Agent", "Documentation Agent"]
    context_priorities: ["Layer 2", "Layer 4", "Layer 1", "Layer 3", "Layer 5"]
    tool_emphasis: ["Read", "Edit", "Bash", "Write", "Grep"]
    
  data_science_config:
    mandatory_agents: ["Data Agent", "Testing Agent", "Documentation Agent", "Performance Agent"]
    optional_agents: ["Code Generation Agent", "Review Agent", "Integration Agent"]
    context_priorities: ["Layer 3", "Layer 2", "Layer 1", "Layer 4", "Layer 5"]
    tool_emphasis: ["Bash", "Read", "Edit", "Write", "Grep"]
    
  enterprise_application_config:
    mandatory_agents: ["Architecture Agent", "Security Agent", "Integration Agent", "Review Agent", "Documentation Agent"]
    optional_agents: ["Testing Agent", "Performance Agent", "Migration Agent"]
    context_priorities: ["Layer 1", "Layer 2", "Layer 3", "Layer 4", "Layer 5"]
    tool_emphasis: ["Read", "Edit", "Bash", "Write", "Grep"]

# =============================================================================
# ADAPTATION ALGORITHMS
# =============================================================================

adaptation_algorithms:
  # Agent selection algorithm
  agent_selection:
    scoring_criteria:
      project_relevance: "Weight: 40% - How relevant is the agent to the project type"
      technology_alignment: "Weight: 30% - How well does the agent align with the tech stack"
      team_needs: "Weight: 20% - How well does the agent serve the team's specific needs"
      resource_availability: "Weight: 10% - Resource constraints and availability"
      
    selection_thresholds:
      mandatory_threshold: ">= 80% relevance score"
      recommended_threshold: ">= 60% relevance score"
      optional_threshold: ">= 40% relevance score"
      
  # Customization intensity algorithm
  customization_intensity:
    light_customization: "Basic placeholder replacement, standard configurations"
    medium_customization: "Framework-specific adaptations, workflow integration"
    heavy_customization: "Deep domain integration, custom capability development"
    
    intensity_factors:
      project_uniqueness: "How unique are the project requirements"
      technology_complexity: "How complex is the technology stack"
      team_maturity: "How experienced is the team with the technology"
      time_constraints: "How much time is available for customization"

# =============================================================================
# INTEGRATION POINTS
# =============================================================================

integration_points:
  # Phase 3 consultation integration
  consultation_integration:
    data_extraction: "Extract project characteristics from consultation responses"
    preference_mapping: "Map user preferences to adaptation patterns"
    constraint_identification: "Identify project constraints and limitations"
    
  # Phase 4 context integration
  context_integration:
    layer_customization: "Customize context layers based on project needs"
    reference_adaptation: "Adapt cross-references for project-specific patterns"
    navigation_optimization: "Optimize navigation patterns for project structure"
    
  # Agent factory integration
  factory_integration:
    template_selection: "Select appropriate templates based on project analysis"
    customization_application: "Apply customizations to selected templates"
    validation_configuration: "Configure validation rules for project context"

# =============================================================================
# QUALITY ASSURANCE
# =============================================================================

quality_assurance:
  # Adaptation validation
  adaptation_validation:
    consistency_checks: "Ensure adaptations are internally consistent"
    completeness_verification: "Verify all necessary adaptations are applied"
    compatibility_testing: "Test compatibility with existing project patterns"
    
  # Performance monitoring
  performance_monitoring:
    adaptation_success_rate: "Track success rate of adaptations"
    user_satisfaction: "Monitor user satisfaction with adapted agents"
    effectiveness_metrics: "Measure effectiveness of adapted agents"
    
  # Continuous improvement
  improvement_cycles:
    pattern_learning: "Learn new adaptation patterns from successful deployments"
    rule_refinement: "Refine adaptation rules based on feedback"
    algorithm_optimization: "Optimize adaptation algorithms for better results"

# =============================================================================
# END OF PROJECT ADAPTER
# =============================================================================