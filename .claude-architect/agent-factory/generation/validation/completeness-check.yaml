# Agent Completeness Check
# Claude Context Architect - Agent Generation System
# Version: 1.0
# Purpose: Validate completeness and integrity of generated agents

metadata:
  component_type: "validation_system"
  validation_category: "completeness_check"
  version: "1.0"
  created: "2025-08-07"
  purpose: "Ensure generated agents are complete and properly structured"

# =============================================================================
# COMPLETENESS VALIDATION FRAMEWORK
# =============================================================================

completeness_framework:
  # Core structure validation
  structure_validation:
    required_sections:
      - "agent_metadata: Agent identification and classification information"
      - "claude_code_integration: Claude Code compatibility and tool requirements"
      - "capability_framework: Core and specialized capabilities definition"
      - "context_integration: Context layer access and optimization patterns"
      - "communication_protocols: Inter-agent and user interaction patterns"
      - "error_handling: Error management and recovery strategies"
      - "performance_monitoring: Performance metrics and optimization"
      - "validation_requirements: Quality assurance and acceptance criteria"
      
    optional_sections:
      - "customization_hooks: Project-specific adaptation points"
      - "specialized_tools: Advanced tool requirements and integrations"
      - "domain_knowledge: Domain-specific knowledge and patterns"
      - "workflow_integration: Team workflow and process integration"
      
  # Metadata completeness
  metadata_completeness:
    mandatory_fields:
      name: "Agent name must be specified and unique"
      type: "Agent type classification (coordination, analysis, validation, specialized)"
      specialization: "Clear specialization description"
      version: "Version number for tracking and updates"
      
    performance_fields:
      success_benchmark: "Quantified success rate requirement (e.g., >80%)"
      expertise_domain: "Domain of expertise specification"
      performance_baseline: "Baseline performance metrics"
      
    integration_fields:
      context_dependencies: "Required context layers and access patterns"
      tool_requirements: "Claude Code tool permissions and usage"
      activation_criteria: "Conditions that trigger agent activation"

# =============================================================================
# CAPABILITY VALIDATION SYSTEM
# =============================================================================

capability_validation:
  # Core capability verification
  core_capability_check:
    base_capabilities:
      - "Project context awareness and navigation"
      - "Claude Code tool integration and usage"
      - "Error handling and graceful failure recovery"
      - "Progress tracking and status reporting"
      - "Integration with other specialized agents"
      
    validation_methods:
      presence_check: "Verify all base capabilities are defined"
      implementation_check: "Ensure capabilities have clear implementation guidelines"
      consistency_check: "Validate consistency with agent specialization"
      
  # Specialized capability validation
  specialized_capability_validation:
    capability_depth_assessment:
      surface_level: "Basic capability definitions without implementation details"
      operational_level: "Capabilities with clear implementation guidance"
      deep_level: "Capabilities with comprehensive implementation and validation"
      
    specialization_alignment:
      domain_relevance: "Capabilities must align with declared domain expertise"
      tool_compatibility: "Capabilities must be achievable with available tools"
      performance_feasibility: "Capabilities must be achievable within performance targets"
      
  # Capability boundary validation
  boundary_validation:
    scope_limitations:
      explicit_boundaries: "Clear definition of what the agent cannot or should not do"
      overlap_management: "Management of capability overlap with other agents"
      escalation_criteria: "Clear criteria for escalating beyond agent capabilities"
      
    constraint_validation:
      resource_constraints: "Validation of resource usage limitations"
      security_constraints: "Validation of security boundary adherence"
      performance_constraints: "Validation of performance limitation compliance"

# =============================================================================
# CONTEXT INTEGRATION COMPLETENESS
# =============================================================================

context_integration_validation:
  # Context layer access validation
  layer_access_validation:
    required_layers:
      layer_identification: "Clear identification of required context layers"
      access_patterns: "Defined patterns for accessing context information"
      optimization_strategies: "Strategies for efficient context usage"
      
    layer_consistency:
      dependency_validation: "Validate context layer dependencies are available"
      access_rights: "Ensure agent has appropriate access to required layers"
      performance_impact: "Assess performance impact of context access patterns"
      
  # Cross-reference validation
  cross_reference_validation:
    internal_references: "Validation of internal cross-references within agent"
    external_references: "Validation of references to other agents and systems"
    navigation_patterns: "Validation of navigation and linking patterns"
    
  # Context optimization validation
  optimization_validation:
    loading_efficiency: "Validate context loading strategies for efficiency"
    caching_strategies: "Validate context caching and reuse strategies"
    memory_management: "Validate context memory usage and cleanup"

# =============================================================================
# COMMUNICATION PROTOCOL COMPLETENESS
# =============================================================================

communication_validation:
  # Inter-agent communication validation
  inter_agent_validation:
    protocol_completeness:
      input_format: "Clear definition of expected input formats"
      output_format: "Clear definition of output formats"
      handoff_protocols: "Well-defined protocols for agent handoffs"
      
    coordination_patterns:
      collaboration_methods: "Clear methods for collaborating with other agents"
      conflict_resolution: "Defined approaches for resolving conflicts"
      status_sharing: "Protocols for sharing status and progress information"
      
  # User interaction validation
  user_interaction_validation:
    interaction_patterns:
      request_handling: "Clear patterns for handling user requests"
      response_formatting: "Consistent response formatting and structure"
      error_communication: "Clear error communication to users"
      
    feedback_integration:
      feedback_collection: "Methods for collecting user feedback"
      improvement_integration: "Integration of feedback into agent improvement"
      satisfaction_tracking: "Tracking of user satisfaction metrics"

# =============================================================================
# ERROR HANDLING COMPLETENESS
# =============================================================================

error_handling_validation:
  # Error coverage validation
  error_coverage:
    error_categories:
      input_validation_errors: "Handling of invalid or malformed inputs"
      context_access_errors: "Handling of context access failures"
      tool_execution_errors: "Handling of Claude Code tool execution failures"
      integration_errors: "Handling of integration and communication failures"
      
    recovery_strategies:
      graceful_degradation: "Strategies for graceful degradation of functionality"
      retry_mechanisms: "Appropriate retry strategies for transient failures"
      fallback_procedures: "Fallback procedures for critical failures"
      
  # Error reporting validation
  error_reporting_validation:
    user_communication:
      error_messages: "Clear and actionable error messages for users"
      recovery_instructions: "Clear instructions for error recovery"
      escalation_guidance: "Guidance on when and how to escalate errors"
      
    system_logging:
      error_logging: "Comprehensive error logging for debugging"
      diagnostic_information: "Sufficient diagnostic information for troubleshooting"
      monitoring_integration: "Integration with monitoring and alerting systems"

# =============================================================================
# PERFORMANCE MONITORING COMPLETENESS
# =============================================================================

performance_validation:
  # Metrics completeness validation
  metrics_validation:
    core_metrics:
      success_rate: "Clear definition and tracking of success rate metrics"
      execution_time: "Performance timing metrics and thresholds"
      resource_usage: "Resource utilization metrics and limits"
      
    specialized_metrics:
      domain_specific_metrics: "Metrics specific to agent's domain of expertise"
      quality_metrics: "Quality assessment metrics for agent outputs"
      user_satisfaction: "User satisfaction and feedback metrics"
      
  # Optimization strategy validation
  optimization_validation:
    performance_targets: "Clear performance targets and benchmarks"
    optimization_methods: "Defined methods for performance optimization"
    monitoring_procedures: "Procedures for continuous performance monitoring"
    
  # Improvement framework validation
  improvement_validation:
    learning_mechanisms: "Mechanisms for learning from performance data"
    adaptation_strategies: "Strategies for adapting to performance changes"
    evolution_planning: "Planning for agent capability evolution"

# =============================================================================
# VALIDATION EXECUTION FRAMEWORK
# =============================================================================

validation_execution:
  # Automated validation checks
  automated_checks:
    structure_validation: "Automated validation of agent structure completeness"
    metadata_validation: "Automated validation of metadata completeness and consistency"
    capability_validation: "Automated validation of capability definitions"
    
  # Manual validation procedures
  manual_validation:
    expert_review: "Expert review of agent completeness and quality"
    peer_validation: "Peer review of agent design and implementation"
    stakeholder_approval: "Stakeholder validation of agent requirements fulfillment"
    
  # Validation reporting
  reporting_framework:
    completeness_score: "Quantified completeness score based on validation criteria"
    gap_identification: "Clear identification of completeness gaps and missing elements"
    improvement_recommendations: "Specific recommendations for addressing gaps"

# =============================================================================
# COMPLETENESS SCORING SYSTEM
# =============================================================================

scoring_system:
  # Scoring criteria
  scoring_criteria:
    structure_completeness: "Weight: 25% - Completeness of agent structure and sections"
    capability_definition: "Weight: 30% - Quality and completeness of capability definitions"
    integration_readiness: "Weight: 20% - Readiness for context and system integration"
    error_handling_coverage: "Weight: 15% - Coverage and quality of error handling"
    performance_framework: "Weight: 10% - Completeness of performance monitoring"
    
  # Scoring thresholds
  thresholds:
    excellent: ">= 90% - Agent ready for production deployment"
    good: ">= 75% - Agent ready for testing and refinement"
    acceptable: ">= 60% - Agent requires improvement before deployment"
    incomplete: "< 60% - Agent requires significant development"
    
  # Quality gates
  quality_gates:
    mandatory_elements: "All mandatory elements must be present for any score > 0"
    minimum_viable: "Minimum 75% score required for agent deployment"
    production_ready: "Minimum 90% score required for production deployment"

# =============================================================================
# SUCCESS METRICS AND VALIDATION
# =============================================================================

success_metrics:
  # Validation effectiveness metrics
  validation_metrics:
    detection_accuracy: ">95% accuracy in detecting completeness gaps"
    false_positive_rate: "<5% false positive rate in gap detection"
    validation_coverage: ">90% coverage of critical agent elements"
    
  # Process efficiency metrics
  efficiency_metrics:
    validation_time: "<30 minutes average validation time per agent"
    automation_coverage: ">80% of validation checks automated"
    manual_review_efficiency: ">90% efficiency in manual validation processes"
    
  # Quality improvement metrics
  improvement_metrics:
    gap_resolution_rate: ">85% of identified gaps successfully resolved"
    agent_quality_improvement: ">40% improvement in agent quality scores"
    deployment_readiness: ">90% of validated agents successfully deployed"

# =============================================================================
# END OF AGENT COMPLETENESS CHECK
# =============================================================================