# Code Generation Agent Test Scenarios
# Agent: Code Generation Specialist
# Success Rate Requirement: >80% validation pass rate
# Focus: High-quality code generation with validation and best practices

test_scenarios:
  basic_functionality:
    scenario_1_simple_function_generation:
      description: "Generate basic utility functions with proper error handling"
      input:
        language: "python"
        function_specs:
          - name: "validate_email"
            parameters: ["email_string"]
            return_type: "boolean"
            requirements: ["RFC5322_compliance", "error_handling"]
          - name: "format_currency"
            parameters: ["amount", "currency_code"]
            return_type: "string"
            requirements: ["locale_support", "precision_handling"]
      
      expected_outputs:
        - "Syntactically correct Python code"
        - "Proper type hints and documentation"
        - "Comprehensive error handling"
        - "Unit tests included"
        - "Best practices followed"
      
      success_criteria:
        - "Code passes automated syntax validation"
        - "All specified requirements implemented"
        - "Error handling comprehensive"
        - "Code follows PEP 8 standards"
        - "Documentation clear and complete"
      
      time_limit: 30
      
    scenario_2_class_generation:
      description: "Generate complete class with methods, properties, and inheritance"
      input:
        language: "java"
        class_spec:
          name: "BankAccount"
          inheritance: "Account"
          properties: ["balance", "accountNumber", "owner"]
          methods: ["deposit", "withdraw", "getBalance", "transfer"]
          requirements: ["thread_safety", "validation", "logging"]
      
      expected_outputs:
        - "Complete Java class implementation"
        - "Proper inheritance structure"
        - "Thread-safe implementation"
        - "Input validation on all methods"
        - "Logging integration"
        - "JUnit tests included"
      
      success_criteria:
        - "Compiles without errors"
        - "Thread safety properly implemented"
        - "All business rules enforced"
        - "Exception handling appropriate"
        - "Tests cover all methods"
      
      time_limit: 35

  complex_code_generation:
    scenario_3_api_endpoint_generation:
      description: "Generate complete REST API endpoint with middleware"
      input:
        framework: "express_js"
        endpoint_spec:
          path: "/api/users/{id}/orders"
          method: "POST"
          authentication: "jwt_required"
          validation: "json_schema"
          database: "mongodb"
          requirements: ["rate_limiting", "logging", "error_handling"]
      
      expected_outputs:
        - "Complete Express.js route implementation"
        - "JWT authentication middleware"
        - "Request validation using JSON schema"
        - "MongoDB integration with error handling"
        - "Rate limiting implementation"
        - "Comprehensive logging"
        - "API tests included"
      
      success_criteria:
        - "Endpoint functionality complete"
        - "Security measures properly implemented"
        - "Database operations safe and efficient"
        - "Error responses well-structured"
        - "Performance considerations addressed"
      
      time_limit: 45
      
    scenario_4_microservice_skeleton:
      description: "Generate complete microservice with configuration and deployment"
      input:
        architecture: "microservice"
        language: "go"
        features: ["http_server", "database_connection", "messaging", "health_checks"]
        deployment: "kubernetes"
        observability: ["metrics", "logging", "tracing"]
      
      expected_outputs:
        - "Complete Go microservice implementation"
        - "Configuration management"
        - "Database connection pooling"
        - "Message queue integration"
        - "Health check endpoints"
        - "Kubernetes deployment manifests"
        - "Observability integration"
      
      success_criteria:
        - "Service runs and responds to requests"
        - "Configuration externalized properly"
        - "Database connections handled efficiently"
        - "Graceful shutdown implemented"
        - "Ready for production deployment"
      
      time_limit: 60

  edge_cases:
    scenario_5_legacy_integration:
      description: "Generate code to integrate with legacy system constraints"
      input:
        integration_type: "legacy_mainframe"
        protocol: "COBOL_copybook"
        constraints: ["fixed_width_records", "ebcdic_encoding", "batch_processing"]
        modern_language: "java"
        requirements: ["data_transformation", "error_recovery", "monitoring"]
      
      expected_approach:
        - "Appropriate legacy integration patterns"
        - "Data format conversion handling"
        - "Robust error recovery mechanisms"
        - "Batch processing optimization"
        - "Monitoring and alerting integration"
      
      success_criteria:
        - "Legacy system communication successful"
        - "Data integrity maintained"
        - "Performance requirements met"
        - "Error handling comprehensive"
        - "Monitoring provides visibility"
      
      time_limit: 50
      
    scenario_6_performance_critical:
      description: "Generate high-performance code with specific constraints"
      input:
        language: "rust"
        performance_requirements:
          latency: "< 1ms"
          throughput: "> 100k operations/sec"
          memory_usage: "< 50MB"
        use_case: "real_time_trading_engine"
        constraints: ["no_allocations", "lock_free", "numa_aware"]
      
      expected_outputs:
        - "Highly optimized Rust implementation"
        - "Lock-free data structures"
        - "Memory allocation minimization"
        - "NUMA topology awareness"
        - "Performance benchmarking code"
        - "Profiling instrumentation"
      
      success_criteria:
        - "Performance requirements achieved"
        - "Memory usage within limits"
        - "Thread safety without locks"
        - "Benchmarks validate performance"
        - "Code maintainability preserved"
      
      time_limit: 55

  error_handling_scenarios:
    scenario_7_invalid_specifications:
      description: "Handle incomplete or contradictory code generation requests"
      input:
        language: "python"
        contradictory_requirements:
          - "synchronous and asynchronous simultaneously"
          - "immutable object with setter methods"
          - "stateless service with persistent state"
        incomplete_specs:
          - "function without parameters defined"
          - "class without purpose specified"
      
      expected_behavior:
        - "Identify contradictions clearly"
        - "Request clarification appropriately"
        - "Suggest reasonable alternatives"
        - "Provide partial implementation with notes"
      
      success_criteria:
        - "All contradictions identified"
        - "Clarifying questions appropriate"
        - "Alternative solutions viable"
        - "Communication clear and helpful"
      
      time_limit: 25
      
    scenario_8_unsupported_features:
      description: "Handle requests for unsupported or deprecated language features"
      input:
        language: "python"
        requested_features:
          - "goto statements"
          - "deprecated_ssl_methods"
          - "python2_specific_syntax"
        requirements: "python3_modern_best_practices"
      
      expected_behavior:
        - "Identify unsupported features"
        - "Suggest modern alternatives"
        - "Explain rationale for alternatives"
        - "Provide migration guidance if applicable"
      
      success_criteria:
        - "Unsupported features identified"
        - "Modern alternatives suggested"
        - "Explanations clear and educational"
        - "Best practices promoted"
      
      time_limit: 20

  integration_coordination:
    scenario_9_multi_agent_collaboration:
      description: "Coordinate with other agents for complete solution"
      input:
        project: "e_commerce_checkout"
        collaboration_agents: ["security_agent", "testing_agent", "documentation_agent"]
        responsibilities:
          code_generation: "payment_processing_logic"
          security: "encryption_and_validation"
          testing: "comprehensive_test_suite"
          documentation: "api_documentation"
      
      expected_coordination:
        - "Clear responsibility boundaries"
        - "Consistent interfaces defined"
        - "Security requirements integrated"
        - "Testing hooks provided"
        - "Documentation-friendly structure"
      
      success_criteria:
        - "Agent coordination smooth"
        - "Interfaces compatible"
        - "Security requirements met"
        - "Testability built-in"
        - "Documentation generation ready"
      
      time_limit: 40

  code_quality_validation:
    scenario_10_quality_standards:
      description: "Generate code meeting strict quality standards"
      input:
        language: "typescript"
        quality_requirements:
          - "zero_eslint_errors"
          - "100%_type_coverage"
          - "cyclomatic_complexity < 10"
          - "test_coverage > 95%"
          - "documentation_coverage > 90%"
        code_type: "react_component_library"
      
      expected_outputs:
        - "TypeScript code with full type safety"
        - "ESLint configuration compliance"
        - "Comprehensive test coverage"
        - "Complete documentation"
        - "Performance optimization"
      
      success_criteria:
        - "All quality gates passed"
        - "Code maintainability high"
        - "Performance acceptable"
        - "Documentation comprehensive"
        - "Best practices demonstrated"
      
      time_limit: 35

performance_metrics:
  response_time_target: "< 35 seconds"
  validation_pass_rate_minimum: "80%"
  code_quality_score_minimum: "80%"
  
  detailed_metrics:
    syntax_correctness: "> 95%"
    best_practices_adherence: "> 85%"
    error_handling_completeness: "> 80%"
    documentation_quality: "> 85%"
    test_coverage_provision: "> 80%"
    security_consideration: "> 85%"

validation_criteria:
  functional_correctness:
    weight: 35
    measures:
      - "Code executes without errors"
      - "Requirements implemented correctly"
      - "Edge cases handled appropriately"
  
  code_quality:
    weight: 30
    measures:
      - "Follows language best practices"
      - "Maintainable and readable"
      - "Appropriate design patterns used"
  
  security_awareness:
    weight: 20
    measures:
      - "Security considerations addressed"
      - "Input validation implemented"
      - "Secure coding practices followed"
  
  documentation_completeness:
    weight: 15
    measures:
      - "Code is well-documented"
      - "API documentation provided"
      - "Usage examples included"

automated_validation:
  syntax_checking: "Language-specific syntax validation"
  code_analysis: "Static analysis for quality and security"
  test_execution: "Run generated tests to verify functionality"
  performance_profiling: "Basic performance characteristic analysis"
  documentation_validation: "Check documentation completeness and accuracy"

language_specific_standards:
  python:
    style_guide: "PEP 8"
    type_hints: "Required for public interfaces"
    docstrings: "Google or NumPy style"
    testing: "pytest framework"
    
  java:
    style_guide: "Google Java Style Guide"
    annotations: "Appropriate use of annotations"
    documentation: "Javadoc for public APIs"
    testing: "JUnit 5 framework"
    
  javascript_typescript:
    style_guide: "Airbnb or Standard"
    type_safety: "Full TypeScript coverage when applicable"
    documentation: "JSDoc for APIs"
    testing: "Jest or similar framework"
    
  go:
    style_guide: "Effective Go guidelines"
    error_handling: "Idiomatic Go error handling"
    documentation: "Package and function comments"
    testing: "Go testing package"