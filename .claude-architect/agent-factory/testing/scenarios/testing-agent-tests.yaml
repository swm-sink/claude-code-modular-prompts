# Testing Agent Test Scenarios
# Agent: Testing Specialist with TDD Enforcement
# Success Rate Requirement: >85% coverage improvement, TDD enforcement
# Focus: Test coverage improvement and strict TDD enforcement with code deletion penalty

test_scenarios:
  basic_functionality:
    scenario_1_unit_test_generation:
      description: "Generate comprehensive unit tests for existing codebase"
      input:
        code_type: "javascript_functions"
        functions: ["calculatePrice", "validateUser", "formatDate"]
        existing_tests: "none"
        coverage_target: "90%"
      
      expected_outputs:
        - "Complete test suite for all functions"
        - "Edge cases and boundary conditions covered"
        - "Mocking strategies for dependencies"
        - "Test organization and structure recommendations"
      
      success_criteria:
        - "Coverage target achieved"
        - "All critical paths tested"
        - "Test quality score >85%"
        - "Proper test structure"
      
      time_limit: 25
      
    scenario_2_tdd_workflow_setup:
      description: "Establish TDD workflow for new feature development"
      input:
        project_type: "web_api"
        feature: "user_authentication"
        language: "python"
        framework: "flask"
      
      expected_outputs:
        - "TDD cycle implementation guide"
        - "Test framework recommendations"
        - "CI/CD integration for TDD"
        - "Code deletion penalty configuration"
      
      success_criteria:
        - "Clear RED-GREEN-REFACTOR process"
        - "Automated penalty enforcement"
        - "CI integration working"
        - "Team training materials provided"
      
      time_limit: 30

  tdd_enforcement_scenarios:
    scenario_3_red_phase_validation:
      description: "Enforce writing failing tests before implementation"
      input:
        task: "implement_user_registration"
        developer_action: "started_coding_without_tests"
        enforcement_level: "zero_tolerance"
      
      expected_behavior:
        - "Immediately detect non-TDD approach"
        - "Trigger code deletion penalty"
        - "Force restart with proper TDD"
        - "Document violation for tracking"
      
      validation_points:
        - "Detection speed < 5 seconds"
        - "Complete code removal executed"
        - "Restart requirement enforced"
        - "Educational feedback provided"
      
      time_limit: 10
      
    scenario_4_green_phase_enforcement:
      description: "Ensure minimal implementation to pass tests"
      input:
        failing_tests: ["test_user_creation", "test_email_validation"]
        implementation_approach: "over_engineered_solution"
        tdd_phase: "green"
      
      expected_behavior:
        - "Identify over-engineering"
        - "Recommend minimal implementation"
        - "Verify tests pass with minimal code"
        - "Prepare for refactor phase"
      
      validation_points:
        - "Over-engineering detected"
        - "Minimal solution suggested"
        - "All tests pass"
        - "Code complexity appropriate"
      
      time_limit: 15
      
    scenario_5_refactor_phase_monitoring:
      description: "Monitor refactoring while maintaining test suite"
      input:
        passing_tests: "complete_suite"
        refactor_goals: ["improve_performance", "reduce_duplication"]
        current_code_quality: "basic"
      
      expected_behavior:
        - "Monitor test suite continuously"
        - "Alert on test failures during refactor"
        - "Suggest quality improvements"
        - "Validate performance gains"
      
      validation_points:
        - "Tests remain passing throughout"
        - "Code quality improvements measured"
        - "Performance gains validated"
        - "Refactoring guidance appropriate"
      
      time_limit: 20

  code_deletion_penalty_tests:
    scenario_6_implementation_without_tests:
      description: "Trigger penalty for implementation-first approach"
      input:
        violation_type: "implementation_without_tests"
        code_written: "500 lines of production code"
        tests_written: "none"
      
      expected_enforcement:
        - "Immediate detection of violation"
        - "Complete code deletion (500 lines removed)"
        - "Restart requirement with TDD"
        - "Zero tolerance message displayed"
      
      validation_criteria:
        - "All code completely deleted"
        - "No partial recovery allowed"
        - "Clear violation explanation"
        - "Restart process enforced"
      
      time_limit: 5
      
    scenario_7_tests_after_implementation:
      description: "Enforce penalty for writing tests after code"
      input:
        violation_type: "tests_after_implementation"
        sequence: ["write_code", "write_tests"]
        detection_method: "git_commit_analysis"
      
      expected_enforcement:
        - "Git history analysis reveals sequence"
        - "Both code and tests deleted"
        - "Educational material about TDD benefits"
        - "Mandatory TDD training recommended"
      
      validation_criteria:
        - "Sequence violation detected"
        - "Complete work removal"
        - "Training materials provided"
        - "Prevention strategies suggested"
      
      time_limit: 8

  complex_testing_scenarios:
    scenario_8_integration_test_strategy:
      description: "Develop comprehensive integration testing approach"
      input:
        system_type: "microservices"
        services: ["user_service", "payment_service", "notification_service"]
        integration_points: ["database", "message_queue", "external_apis"]
      
      expected_outputs:
        - "Integration test matrix"
        - "Test environment setup"
        - "Data management strategy"
        - "Failure scenario testing"
      
      success_criteria:
        - "All integration points covered"
        - "Test environment automated"
        - "Data consistency validated"
        - "Failure scenarios tested"
      
      time_limit: 35
      
    scenario_9_performance_testing:
      description: "Design performance testing suite for high-load application"
      input:
        application_type: "e_commerce"
        expected_load: "100k_concurrent_users"
        critical_paths: ["checkout", "search", "payment"]
        performance_targets: {"response_time": "< 200ms", "throughput": "> 10k_rps"}
      
      expected_outputs:
        - "Load testing strategy"
        - "Performance benchmark suite"
        - "Monitoring and alerting setup"
        - "Capacity planning recommendations"
      
      success_criteria:
        - "Realistic load scenarios created"
        - "Performance targets validated"
        - "Bottlenecks identified"
        - "Scaling recommendations provided"
      
      time_limit: 40

  edge_cases:
    scenario_10_legacy_code_testing:
      description: "Create test strategy for untestable legacy code"
      input:
        code_characteristics: ["tightly_coupled", "no_interfaces", "global_state"]
        business_criticality: "high"
        refactoring_constraints: "minimal_changes_allowed"
      
      expected_approach:
        - "Characterization testing strategy"
        - "Seam identification for testing"
        - "Gradual refactoring plan"
        - "Risk assessment and mitigation"
      
      success_criteria:
        - "Testing approach feasible"
        - "Critical behavior covered"
        - "Refactoring plan realistic"
        - "Risk mitigation comprehensive"
      
      time_limit: 30
      
    scenario_11_flaky_test_resolution:
      description: "Diagnose and fix intermittently failing tests"
      input:
        test_characteristics: ["timing_dependent", "order_dependent", "environment_sensitive"]
        failure_rate: "15%"
        impact: "blocking_deployment"
      
      expected_analysis:
        - "Root cause identification"
        - "Stabilization strategies"
        - "Test isolation improvements"
        - "Monitoring and detection"
      
      success_criteria:
        - "Root causes identified correctly"
        - "Failure rate reduced to <1%"
        - "Test stability improved"
        - "Prevention measures implemented"
      
      time_limit: 25

  integration_with_other_agents:
    scenario_12_code_quality_coordination:
      description: "Coordinate with review agent for comprehensive quality assurance"
      input:
        collaboration_type: "code_review_integration"
        review_focus: ["security", "performance", "maintainability"]
        testing_focus: ["coverage", "quality", "tdd_compliance"]
      
      expected_coordination:
        - "Clear responsibility boundaries"
        - "Quality metrics alignment"
        - "Feedback integration process"
        - "Conflict resolution protocol"
      
      success_criteria:
        - "No overlapping responsibilities"
        - "Comprehensive quality coverage"
        - "Smooth information flow"
        - "Consistent quality standards"
      
      time_limit: 20

performance_metrics:
  response_time_target: "< 25 seconds"
  success_rate_minimum: "85%"
  tdd_enforcement_accuracy: "100%"
  
  detailed_metrics:
    test_coverage_improvement: "> 85%"
    test_quality_score: "> 90%"
    tdd_compliance_rate: "100%"
    penalty_enforcement_accuracy: "100%"
    educational_effectiveness: "> 80%"

tdd_enforcement_metrics:
  detection_speed:
    target: "< 5 seconds for violations"
    measurement: "Time from violation to detection"
  
  penalty_effectiveness:
    target: "100% code removal success"
    measurement: "Complete deletion verification"
  
  restart_compliance:
    target: "100% TDD restart rate"
    measurement: "Proper TDD cycle adoption"
  
  educational_impact:
    target: "> 90% understanding improvement"
    measurement: "Post-violation TDD compliance"

validation_criteria:
  test_quality:
    weight: 30
    measures:
      - "Comprehensive coverage achieved"
      - "Edge cases properly tested"
      - "Test maintainability high"
  
  tdd_enforcement:
    weight: 40
    measures:
      - "Violations detected immediately"
      - "Penalties applied consistently"
      - "Educational value provided"
  
  integration_effectiveness:
    weight: 20
    measures:
      - "CI/CD integration seamless"
      - "Team workflow improved"
      - "Quality gates effective"
  
  communication:
    weight: 10
    measures:
      - "Clear guidance provided"
      - "Violation explanations helpful"
      - "Improvement suggestions actionable"

automated_validation:
  coverage_analysis: "Automated test coverage measurement"
  tdd_sequence_detection: "Git commit analysis for TDD compliance"
  code_deletion_verification: "Confirm complete code removal"
  test_quality_scoring: "Automated test quality assessment"
  
zero_tolerance_verification:
  violation_detection: "100% accuracy required"
  penalty_application: "Complete and immediate"
  restart_enforcement: "No exceptions allowed"
  compliance_tracking: "Comprehensive monitoring"