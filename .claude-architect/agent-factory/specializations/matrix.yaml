# Agent Specialization Matrix
# Claude Context Architect - Deep Discovery Generation Engine
# Version: 1.0
# Purpose: Define real specialized agents with measurable expertise for 30-60 minute consultation

metadata:
  version: "1.0"
  created: "2025-08-07"
  system: "Claude Context Architect Deep Discovery Generation Engine"
  purpose: "Define specialized agents with real expertise and measurable performance"
  performance_requirement: ">80% task success rate"
  integration: "5-layer hierarchical context system from Phase 4"

# =============================================================================
# AGENT SPECIALIZATION OVERVIEW
# =============================================================================

specialization_framework:
  total_agents: 14
  specialization_depth: "deep_domain_expertise"
  overlap_tolerance: "<20%"
  performance_baseline: "80%"
  expertise_validation: "context_layer_integration"
  
  categories:
    core_coordination: 4
    specialized_analysis: 4 
    validation_maintenance: 2
    domain_specific: 4

# =============================================================================
# CORE COORDINATION AGENTS (4)
# =============================================================================

core_coordination_agents:
  
  architecture_agent:
    name: "Architecture Agent"
    specialization: "System design patterns and architectural decisions"
    expertise_domain: "technical_architecture"
    performance_benchmark: ">85% accurate architectural recommendations"
    context_layer_dependencies:
      - "Layer 1: Project Overview & Vision"
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 5: Cross-References & Navigation"
    
    core_capabilities:
      - "Analyze system architecture and design patterns"
      - "Identify architectural anti-patterns and violations"
      - "Recommend architectural improvements and refactoring"
      - "Design scalable system structures"
      - "Evaluate technology stack compatibility"
    
    activation_criteria:
      - "Project contains multiple modules/services"
      - "Architecture documentation exists or needed"
      - "System scalability concerns identified"
      - "Technology stack evaluation required"
    
    tool_requirements:
      - "Read: Analyze architectural documents and code"
      - "Grep: Search for architectural patterns across codebase"
      - "Edit: Create architectural documentation"
      - "Bash: Run architecture analysis tools"
    
    success_metrics:
      - "Architectural recommendations acceptance rate >80%"
      - "Correctly identifies architectural patterns >90%"
      - "Scalability improvements measurable >70%"
      - "Anti-pattern prevention effectiveness >85%"
  
  code_generation_agent:
    name: "Code Generation Agent"
    specialization: "Project-specific code creation with learned conventions"
    expertise_domain: "code_patterns_conventions"
    performance_benchmark: ">80% generated code passes validation"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 3: Domain Knowledge & Business Rules"
      - "Layer 4: Team Workflows & Development Patterns"
    
    core_capabilities:
      - "Generate code following project-specific conventions"
      - "Learn and apply team coding standards automatically"
      - "Create boilerplate code for common patterns"
      - "Adapt code generation to project architecture"
      - "Integrate with existing codebase patterns"
    
    activation_criteria:
      - "Repetitive code patterns detected"
      - "Boilerplate generation needed"
      - "New feature development requires scaffolding"
      - "Code consistency issues identified"
    
    tool_requirements:
      - "Read: Analyze existing code patterns"
      - "Write: Generate new code files"
      - "Edit: Modify existing code structures"
      - "Grep: Find pattern examples across project"
    
    success_metrics:
      - "Generated code compilation rate >95%"
      - "Code review approval rate >80%"
      - "Convention adherence score >90%"
      - "Integration success rate >85%"
  
  testing_agent:
    name: "Testing Agent"
    specialization: "Test creation, TDD enforcement, and quality assurance"
    expertise_domain: "testing_quality_assurance"
    performance_benchmark: ">85% test coverage improvement"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 3: Domain Knowledge & Business Rules"
      - "Layer 4: Team Workflows & Development Patterns"
    
    core_capabilities:
      - "Create comprehensive test suites"
      - "Enforce test-driven development practices"
      - "Analyze test coverage and identify gaps"
      - "Generate edge case and error condition tests"
      - "Validate quality assurance processes"
    
    activation_criteria:
      - "Low test coverage detected (<70%)"
      - "TDD practices need enforcement"
      - "Quality gates need establishment"
      - "Testing framework setup required"
    
    tool_requirements:
      - "Read: Analyze existing tests and code"
      - "Write: Create new test files"
      - "Bash: Run test suites and coverage tools"
      - "Grep: Find testable code patterns"
    
    success_metrics:
      - "Test coverage increase >20% over baseline"
      - "Test failure detection rate >90%"
      - "TDD compliance improvement >60%"
      - "Quality gate effectiveness >85%"
  
  debugging_agent:
    name: "Debugging Agent"  
    specialization: "Problem diagnosis and root cause analysis"
    expertise_domain: "debugging_troubleshooting"
    performance_benchmark: ">80% successful issue resolution"
    context_layer_dependencies:
      - "Layer 1: Project Overview & Vision"
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 4: Team Workflows & Development Patterns"
    
    core_capabilities:
      - "Systematically diagnose code issues"
      - "Perform root cause analysis"
      - "Trace execution flows and identify bottlenecks"
      - "Analyze error logs and stack traces"
      - "Recommend debugging strategies and tools"
    
    activation_criteria:
      - "Bugs or errors reported"
      - "Performance issues identified"
      - "System behavior anomalies detected"
      - "Debugging process needs optimization"
    
    tool_requirements:
      - "Read: Analyze logs, code, and error reports"
      - "Grep: Search for error patterns and symptoms"
      - "Bash: Run debugging and profiling tools"
      - "Edit: Implement fixes and debugging aids"
    
    success_metrics:
      - "Issue resolution rate >80%"
      - "Root cause identification accuracy >85%"
      - "Debug time reduction >40%"
      - "Preventive measure effectiveness >70%"

# =============================================================================
# SPECIALIZED ANALYSIS AGENTS (4)
# =============================================================================

specialized_analysis_agents:

  documentation_agent:
    name: "Documentation Agent"
    specialization: "Technical writing, API docs, and README maintenance"
    expertise_domain: "documentation_knowledge_management"
    performance_benchmark: ">85% documentation completeness score"
    context_layer_dependencies:
      - "Layer 1: Project Overview & Vision"
      - "Layer 3: Domain Knowledge & Business Rules"
      - "Layer 5: Cross-References & Navigation"
    
    core_capabilities:
      - "Generate comprehensive technical documentation"
      - "Create and maintain API documentation"
      - "Write user-friendly README files"
      - "Establish documentation standards and templates"
      - "Ensure documentation accuracy and completeness"
    
    activation_criteria:
      - "Documentation gaps identified"
      - "API documentation needs creation/updates"
      - "User guide missing or outdated"
      - "Documentation standards need establishment"
    
    tool_requirements:
      - "Read: Analyze existing documentation and code"
      - "Write: Create new documentation files"
      - "Edit: Update existing documentation"
      - "Grep: Find undocumented features and functions"
    
    success_metrics:
      - "Documentation completeness score >85%"
      - "User comprehension rate >80%"
      - "Documentation maintenance efficiency >70%"
      - "Accuracy validation success >90%"
  
  review_agent:
    name: "Review Agent"
    specialization: "Code review, standards enforcement, and best practices"
    expertise_domain: "code_quality_standards"
    performance_benchmark: ">85% improvement in code quality metrics"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 4: Team Workflows & Development Patterns"
      - "Layer 5: Cross-References & Navigation"
    
    core_capabilities:
      - "Conduct thorough code reviews"
      - "Enforce coding standards and conventions"
      - "Identify code quality issues and anti-patterns"
      - "Recommend best practices and improvements"
      - "Maintain code review checklists and processes"
    
    activation_criteria:
      - "Code review process needs improvement"
      - "Quality standards need enforcement"
      - "Best practices documentation missing"
      - "Team consistency issues identified"
    
    tool_requirements:
      - "Read: Analyze code for review"
      - "Grep: Search for pattern violations"
      - "Edit: Provide review feedback and corrections"
      - "Bash: Run code quality analysis tools"
    
    success_metrics:
      - "Code quality improvement >20%"
      - "Standards compliance increase >85%"
      - "Review efficiency improvement >40%"
      - "Team adoption rate >80%"
  
  performance_agent:
    name: "Performance Agent"
    specialization: "Optimization, profiling, and efficiency improvements"
    expertise_domain: "performance_optimization"
    performance_benchmark: ">70% measurable performance improvements"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 4: Team Workflows & Development Patterns"
    
    core_capabilities:
      - "Profile application performance and identify bottlenecks"
      - "Recommend optimization strategies"
      - "Analyze resource usage and efficiency"
      - "Implement performance monitoring"
      - "Conduct load testing and capacity planning"
    
    activation_criteria:
      - "Performance issues reported"
      - "Optimization opportunities identified"
      - "Resource usage concerns detected"
      - "Scalability planning required"
    
    tool_requirements:
      - "Bash: Run profiling and monitoring tools"
      - "Read: Analyze performance metrics and logs"
      - "Edit: Implement performance improvements"
      - "Grep: Find performance-critical code sections"
    
    success_metrics:
      - "Response time improvement >30%"
      - "Resource usage reduction >25%"
      - "Throughput increase >40%"
      - "Performance monitoring coverage >90%"
  
  security_agent:
    name: "Security Agent"
    specialization: "Vulnerability detection and security best practices"
    expertise_domain: "security_compliance"
    performance_benchmark: ">90% vulnerability detection accuracy"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 3: Domain Knowledge & Business Rules"
      - "Layer 4: Team Workflows & Development Patterns"
    
    core_capabilities:
      - "Identify security vulnerabilities and risks"
      - "Enforce security best practices and standards"
      - "Conduct security audits and assessments"
      - "Implement security controls and measures"
      - "Maintain security documentation and compliance"
    
    activation_criteria:
      - "Security assessment needed"
      - "Vulnerabilities detected or suspected"
      - "Security standards need implementation"
      - "Compliance requirements identified"
    
    tool_requirements:
      - "Bash: Run security scanning tools"
      - "Read: Analyze security configurations and code"
      - "Grep: Search for security anti-patterns"
      - "Edit: Implement security improvements"
    
    success_metrics:
      - "Vulnerability detection rate >90%"
      - "Security compliance score >85%"
      - "Risk reduction effectiveness >80%"
      - "Security awareness improvement >70%"

# =============================================================================
# VALIDATION & MAINTENANCE AGENTS (2)
# =============================================================================

validation_maintenance_agents:

  integration_agent:
    name: "Integration Agent"
    specialization: "External systems, API connections, and data flow"
    expertise_domain: "system_integration"
    performance_benchmark: ">85% successful integration implementations"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 3: Domain Knowledge & Business Rules"
      - "Layer 5: Cross-References & Navigation"
    
    core_capabilities:
      - "Design and implement API integrations"
      - "Manage data flow between systems"
      - "Handle authentication and authorization"
      - "Monitor integration health and performance"
      - "Troubleshoot integration issues"
    
    activation_criteria:
      - "External API integration required"
      - "Data synchronization needs identified"
      - "Integration monitoring required"
      - "Authentication systems need implementation"
    
    tool_requirements:
      - "Read: Analyze integration specifications"
      - "Write: Create integration code and configs"
      - "Bash: Test integration endpoints"
      - "Edit: Update integration implementations"
    
    success_metrics:
      - "Integration success rate >85%"
      - "API response reliability >95%"
      - "Data consistency maintenance >90%"
      - "Integration monitoring coverage >80%"
  
  domain_expert_agent:
    name: "Domain Expert Agent"
    specialization: "Business logic, domain terminology, and rules"
    expertise_domain: "business_domain_knowledge"
    performance_benchmark: ">90% domain accuracy in recommendations"
    context_layer_dependencies:
      - "Layer 1: Project Overview & Vision"
      - "Layer 3: Domain Knowledge & Business Rules"
      - "Layer 5: Cross-References & Navigation"
    
    core_capabilities:
      - "Understand and apply business rules"
      - "Maintain domain terminology and glossaries"
      - "Validate business logic implementations"
      - "Bridge technical and business requirements"
      - "Ensure domain model accuracy"
    
    activation_criteria:
      - "Business rules need clarification"
      - "Domain model requires validation"
      - "Business logic complexity identified"
      - "Terminology standardization needed"
    
    tool_requirements:
      - "Read: Analyze business requirements and domain docs"
      - "Write: Create domain documentation"
      - "Grep: Find domain-specific patterns"
      - "Edit: Update business logic implementations"
    
    success_metrics:
      - "Business rule accuracy >90%"
      - "Domain terminology consistency >85%"
      - "Requirements alignment >80%"
      - "Business logic validation >85%"

# =============================================================================
# DOMAIN-SPECIFIC AGENTS (4)
# =============================================================================

domain_specific_agents:

  refactoring_agent:
    name: "Refactoring Agent"
    specialization: "Code improvement and technical debt reduction"
    expertise_domain: "code_refactoring"
    performance_benchmark: ">75% technical debt reduction"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 4: Team Workflows & Development Patterns"
    
    core_capabilities:
      - "Identify refactoring opportunities"
      - "Plan and execute safe refactoring strategies"
      - "Reduce technical debt systematically"
      - "Improve code maintainability and readability"
      - "Ensure refactoring doesn't break functionality"
    
    activation_criteria:
      - "High technical debt detected"
      - "Code complexity metrics exceed thresholds"
      - "Maintainability issues identified"
      - "Refactoring opportunities found"
    
    tool_requirements:
      - "Read: Analyze code structure and complexity"
      - "Edit: Implement refactoring changes"
      - "Bash: Run tests to validate refactoring"
      - "Grep: Find code patterns for refactoring"
    
    success_metrics:
      - "Technical debt reduction >75%"
      - "Code complexity improvement >50%"
      - "Maintainability index increase >40%"
      - "Refactoring safety rate >95%"
  
  migration_agent:
    name: "Migration Agent"
    specialization: "Version upgrades and framework transitions"
    expertise_domain: "system_migration"
    performance_benchmark: ">90% successful migration completion"
    context_layer_dependencies:
      - "Layer 1: Project Overview & Vision"
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 4: Team Workflows & Development Patterns"
    
    core_capabilities:
      - "Plan and execute version upgrades"
      - "Migrate between frameworks and technologies"
      - "Assess migration risks and dependencies"
      - "Create migration scripts and automation"
      - "Validate post-migration functionality"
    
    activation_criteria:
      - "Framework/library updates needed"
      - "Technology stack migration required"
      - "Legacy system modernization planned"
      - "Compatibility issues identified"
    
    tool_requirements:
      - "Read: Analyze current and target systems"
      - "Bash: Run migration scripts and tools"
      - "Edit: Update code for new versions"
      - "Write: Create migration documentation"
    
    success_metrics:
      - "Migration success rate >90%"
      - "Functionality preservation >95%"
      - "Migration time accuracy >80%"
      - "Post-migration stability >85%"
  
  devops_agent:
    name: "DevOps Agent"
    specialization: "CI/CD, deployment, and infrastructure"
    expertise_domain: "devops_infrastructure"
    performance_benchmark: ">85% deployment success rate"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 4: Team Workflows & Development Patterns"
    
    core_capabilities:
      - "Design and implement CI/CD pipelines"
      - "Manage deployment strategies and automation"
      - "Configure infrastructure as code"
      - "Monitor system health and performance"
      - "Implement disaster recovery procedures"
    
    activation_criteria:
      - "CI/CD pipeline needed or broken"
      - "Deployment automation required"
      - "Infrastructure management needed"
      - "Monitoring gaps identified"
    
    tool_requirements:
      - "Bash: Execute deployment and infrastructure commands"
      - "Read: Analyze configuration files and logs"
      - "Write: Create CI/CD and infrastructure configs"
      - "Edit: Update deployment scripts"
    
    success_metrics:
      - "Deployment success rate >85%"
      - "Pipeline reliability >90%"
      - "Infrastructure uptime >99%"
      - "Recovery time improvement >60%"
  
  data_agent:
    name: "Data Agent"
    specialization: "Database design, query optimization, and data modeling"
    expertise_domain: "data_management"
    performance_benchmark: ">80% query performance improvement"
    context_layer_dependencies:
      - "Layer 2: Technical Architecture & Patterns"
      - "Layer 3: Domain Knowledge & Business Rules"
    
    core_capabilities:
      - "Design optimal database schemas"
      - "Optimize database queries and performance"
      - "Model data relationships and structures"
      - "Implement data migration and backup strategies"
      - "Ensure data integrity and consistency"
    
    activation_criteria:
      - "Database performance issues detected"
      - "Data modeling required for new features"
      - "Query optimization opportunities identified"
      - "Data migration or backup needed"
    
    tool_requirements:
      - "Read: Analyze database schemas and queries"
      - "Bash: Run database tools and scripts"
      - "Edit: Modify database configurations"
      - "Grep: Search for data-related patterns"
    
    success_metrics:
      - "Query performance improvement >80%"
      - "Data integrity maintenance >95%"
      - "Schema optimization effectiveness >70%"
      - "Migration success rate >90%"

# =============================================================================
# AGENT COORDINATION FRAMEWORK
# =============================================================================

coordination_framework:
  
  activation_system:
    trigger_mechanisms:
      - "Project characteristic detection"
      - "Context layer analysis"
      - "Performance threshold monitoring"
      - "User request routing"
    
    decision_matrix:
      - "Agent specialization match >80%"
      - "Context dependency satisfaction"
      - "Tool requirement availability"
      - "Performance benchmark capability"
  
  collaboration_patterns:
    sequential_workflow:
      - "Architecture Agent → Code Generation Agent"
      - "Testing Agent → Review Agent"
      - "Security Agent → Integration Agent"
    
    parallel_processing:
      - "Documentation Agent + Domain Expert Agent"
      - "Performance Agent + Security Agent"
      - "Migration Agent + DevOps Agent"
    
    validation_chains:
      - "All agents → Review Agent validation"
      - "Code changes → Testing Agent verification"
      - "Integrations → Security Agent approval"
  
  quality_assurance:
    performance_monitoring:
      - "Continuous success rate tracking"
      - "Benchmark performance measurement"
      - "User satisfaction scoring"
    
    improvement_feedback:
      - "Agent capability enhancement"
      - "Specialization boundary refinement"
      - "Context layer optimization"

# =============================================================================
# INTEGRATION WITH 5-LAYER CONTEXT SYSTEM
# =============================================================================

context_integration:
  
  layer_dependencies:
    layer_1_project_overview:
      primary_agents: ["domain_expert_agent", "architecture_agent", "documentation_agent"]
      access_pattern: "foundational_understanding"
    
    layer_2_technical_architecture:
      primary_agents: ["architecture_agent", "performance_agent", "security_agent", "devops_agent"]
      access_pattern: "technical_deep_dive"
    
    layer_3_domain_knowledge:
      primary_agents: ["domain_expert_agent", "integration_agent", "data_agent"]
      access_pattern: "business_logic_access"
    
    layer_4_team_workflows:
      primary_agents: ["testing_agent", "review_agent", "refactoring_agent", "migration_agent"]
      access_pattern: "process_optimization"
    
    layer_5_cross_references:
      primary_agents: ["documentation_agent", "integration_agent", "domain_expert_agent"]
      access_pattern: "navigation_and_linking"
  
  context_loading_optimization:
    - "Agent-specific context filtering"
    - "Hierarchical context inheritance" 
    - "Dynamic context loading based on task"
    - "Context cache management for performance"

# =============================================================================
# SUCCESS METRICS & VALIDATION
# =============================================================================

success_metrics:
  
  individual_agent_performance:
    - "Task completion success rate >80%"
    - "Recommendation accuracy >85%"
    - "Context integration effectiveness >90%"
    - "User satisfaction score >4.0/5.0"
  
  system_wide_performance:
    - "Agent coordination efficiency >75%"
    - "Context layer utilization >80%"
    - "Overall consultation effectiveness >85%"
    - "30-60 minute consultation completion rate >95%"
  
  measurable_improvements:
    - "Code quality metrics improvement >30%"
    - "Development velocity increase >25%"
    - "Bug reduction rate >40%"
    - "Documentation completeness >80%"
    - "Security posture improvement >50%"

# =============================================================================
# IMPLEMENTATION ROADMAP
# =============================================================================

implementation_phases:
  
  phase_1_core_agents:
    duration: "Days 1-2"
    agents: ["architecture_agent", "code_generation_agent", "testing_agent", "debugging_agent"]
    validation: "Basic agent functionality and context integration"
  
  phase_2_specialized_agents:
    duration: "Days 3-4"
    agents: ["documentation_agent", "review_agent", "performance_agent", "security_agent"]
    validation: "Advanced capabilities and coordination patterns"
  
  phase_3_domain_agents:
    duration: "Day 5"
    agents: ["integration_agent", "domain_expert_agent", "refactoring_agent", "migration_agent", "devops_agent", "data_agent"]
    validation: "Complete agent ecosystem and optimization"
  
  validation_requirements:
    - "All agents pass >80% task success benchmark"
    - "Context layer integration functional"
    - "Agent coordination patterns operational"
    - "Performance metrics within acceptable ranges"

# =============================================================================
# END OF AGENT SPECIALIZATION MATRIX
# =============================================================================