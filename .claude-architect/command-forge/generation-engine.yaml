# Command Generation Engine
# Pattern-based command creation system
# Version: 1.0

# =============================================================================
# GENERATION ENGINE ARCHITECTURE
# =============================================================================

engine:
  name: "Pattern-Based Command Generation Engine"
  version: "1.0.0"
  
  components:
    discovery_analyzer:
      purpose: "Analyze discovery results from consultation phases"
      inputs:
        - "technical_architecture.yaml"
        - "domain_patterns.yaml"
        - "workflow_analysis.yaml"
        - "framework_detection.yaml"
      outputs:
        - "pattern_mappings"
        - "variable_bindings"
        - "confidence_scores"
    
    pattern_matcher:
      purpose: "Match discovered patterns to command templates"
      algorithm: "similarity_scoring"
      features:
        - "Fuzzy pattern matching"
        - "Confidence thresholds"
        - "Multiple pattern support"
        - "Fallback strategies"
    
    template_processor:
      purpose: "Process templates with variable substitution"
      capabilities:
        - "Variable resolution"
        - "Conditional sections"
        - "Loop expansion"
        - "Template inheritance"
    
    validator:
      purpose: "Validate generated commands"
      checks:
        - "Syntax validation"
        - "Convention adherence"
        - "Dependency verification"
        - "Conflict detection"
    
    optimizer:
      purpose: "Optimize command performance"
      strategies:
        - "Cache frequently used patterns"
        - "Precompile templates"
        - "Lazy loading"
        - "Incremental generation"

# =============================================================================
# GENERATION PIPELINE
# =============================================================================

pipeline:
  stages:
    # Stage 1: Discovery Analysis
    discovery_analysis:
      order: 1
      duration: "2-3 minutes"
      
      steps:
        - name: "Load discovery results"
          action: "read_consultation_outputs"
          sources:
            - ".claude-architect/consultation/results/"
            - ".claude-architect/research/patterns/"
            - ".claude-architect/context-engine/analysis/"
        
        - name: "Extract patterns"
          action: "pattern_extraction"
          targets:
            - "framework_patterns"
            - "naming_conventions"
            - "directory_structures"
            - "testing_patterns"
            - "workflow_patterns"
        
        - name: "Calculate confidence"
          action: "confidence_scoring"
          factors:
            - "pattern_frequency"
            - "consistency_score"
            - "explicit_configuration"
    
    # Stage 2: Template Selection
    template_selection:
      order: 2
      duration: "1-2 minutes"
      
      steps:
        - name: "Identify needed commands"
          action: "requirement_analysis"
          based_on:
            - "project_type"
            - "team_size"
            - "workflow_complexity"
            - "domain_requirements"
        
        - name: "Select templates"
          action: "template_matching"
          criteria:
            - "pattern_compatibility"
            - "framework_support"
            - "customization_level"
        
        - name: "Prioritize generation"
          action: "priority_scoring"
          factors:
            - "usage_frequency"
            - "productivity_impact"
            - "team_needs"
    
    # Stage 3: Variable Resolution
    variable_resolution:
      order: 3
      duration: "2-3 minutes"
      
      steps:
        - name: "Map discovery to variables"
          action: "variable_mapping"
          mappings:
            - "FRAMEWORK -> framework_detection.primary"
            - "TEST_RUNNER -> testing_patterns.runner"
            - "NAMING_CONVENTION -> naming_patterns.components"
            - "DIRECTORY_STRUCTURE -> project_structure.pattern"
        
        - name: "Resolve placeholders"
          action: "placeholder_substitution"
          strategy:
            - "Direct mapping"
            - "Computed values"
            - "User overrides"
            - "Smart defaults"
        
        - name: "Validate bindings"
          action: "binding_validation"
          checks:
            - "Required variables present"
            - "Type compatibility"
            - "Value constraints"
    
    # Stage 4: Command Generation
    command_generation:
      order: 4
      duration: "3-5 minutes"
      
      steps:
        - name: "Process templates"
          action: "template_processing"
          operations:
            - "Variable substitution"
            - "Conditional evaluation"
            - "Section inclusion/exclusion"
            - "Format preservation"
        
        - name: "Generate command files"
          action: "file_generation"
          outputs:
            - "Command markdown files"
            - "YAML frontmatter"
            - "Documentation sections"
            - "Example usage"
        
        - name: "Create supporting files"
          action: "support_generation"
          includes:
            - "Helper scripts"
            - "Configuration files"
            - "Test fixtures"
            - "Documentation"
    
    # Stage 5: Validation & Optimization
    validation_optimization:
      order: 5
      duration: "1-2 minutes"
      
      steps:
        - name: "Validate syntax"
          action: "syntax_checking"
          validators:
            - "YAML frontmatter"
            - "Markdown structure"
            - "Code blocks"
            - "Tool permissions"
        
        - name: "Check conventions"
          action: "convention_validation"
          rules:
            - "Naming standards"
            - "File placement"
            - "Documentation requirements"
        
        - name: "Optimize performance"
          action: "performance_tuning"
          optimizations:
            - "Command caching"
            - "Lazy loading"
            - "Dependency bundling"

# =============================================================================
# PATTERN-BASED GENERATION RULES
# =============================================================================

generation_rules:
  component_generators:
    trigger_patterns:
      - "React/Vue/Angular detected"
      - "Component-based architecture"
      - "UI framework present"
    
    generation_logic:
      if: "framework == 'react'"
      then:
        - "Use functional component template"
        - "Include hooks patterns"
        - "Add PropTypes or TypeScript"
      
      elif: "framework == 'vue'"
      then:
        - "Use SFC template"
        - "Include Composition API"
        - "Add props validation"
  
  test_creators:
    trigger_patterns:
      - "Test framework detected"
      - "Existing test files found"
      - "CI/CD pipeline present"
    
    generation_logic:
      analyze: "existing_test_patterns"
      generate:
        - "Matching test structure"
        - "Similar assertion style"
        - "Consistent naming"
  
  api_builders:
    trigger_patterns:
      - "API framework detected"
      - "REST/GraphQL patterns"
      - "Database present"
    
    generation_logic:
      detect: "api_style"
      create:
        - "Endpoint generators"
        - "Schema builders"
        - "Client generators"
  
  workflow_automation:
    trigger_patterns:
      - "Complex workflows detected"
      - "Repetitive tasks identified"
      - "Team size > 3"
    
    generation_logic:
      identify: "pain_points"
      automate:
        - "Common workflows"
        - "Deployment processes"
        - "Testing pipelines"

# =============================================================================
# CONVENTION ADHERENCE
# =============================================================================

convention_enforcement:
  naming:
    enforce:
      - "Discovered naming patterns"
      - "Linting rules"
      - "Team standards"
    
    validation:
      - "Pattern matching"
      - "Case consistency"
      - "Prefix/suffix rules"
  
  structure:
    enforce:
      - "Directory patterns"
      - "File organization"
      - "Module boundaries"
    
    validation:
      - "Path verification"
      - "Structure compliance"
      - "Dependency rules"
  
  documentation:
    enforce:
      - "Comment styles"
      - "Doc generation"
      - "README patterns"
    
    validation:
      - "Required sections"
      - "Format compliance"
      - "Example presence"

# =============================================================================
# QUALITY GATES
# =============================================================================

quality_gates:
  pre_generation:
    - "Discovery data completeness"
    - "Pattern confidence threshold"
    - "Template availability"
  
  during_generation:
    - "Variable resolution success"
    - "Template processing errors"
    - "Syntax validation"
  
  post_generation:
    - "Command executability"
    - "Documentation completeness"
    - "Integration compatibility"
  
  acceptance_criteria:
    - "90% variable resolution"
    - "100% syntax validity"
    - "85% convention compliance"
    - "No critical errors"

# =============================================================================
# SUCCESS METRICS
# =============================================================================

metrics:
  generation_metrics:
    - "Commands generated: [TARGET: 10+]"
    - "Generation time: [TARGET: <10 min]"
    - "Success rate: [TARGET: >85%]"
    - "User modifications needed: [TARGET: <20%]"
  
  quality_metrics:
    - "Convention adherence: [TARGET: >90%]"
    - "Documentation coverage: [TARGET: 100%]"
    - "Test generation: [TARGET: 100%]"
    - "Error rate: [TARGET: <5%]"
  
  impact_metrics:
    - "Developer productivity increase"
    - "Code consistency improvement"
    - "Onboarding time reduction"
    - "Error reduction in generated code"

# End of Generation Engine Configuration