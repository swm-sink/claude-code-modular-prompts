# Claude Context Architect - Variable Mapping Configuration
# Version: 1.0
# Created: 2025-08-07
# Purpose: Map consultation stage outputs to template variables

# =============================================================================
# VARIABLE MAPPING OVERVIEW
# =============================================================================
variable_mapping:
  version: "1.0"
  mapping_strategy: "stage_to_template"
  inheritance_support: true
  cross_stage_synthesis: true
  
  # Consultation Stage Sources
  source_stages:
    - stage_1_project_discovery
    - stage_2_technical_deep_dive
    - stage_3_domain_extraction
    - stage_4_preference_learning
    - cross_stage_synthesis
  
  # Template Layer Targets
  target_layers:
    - foundation
    - domain
    - technical
    - workflow
    - integration

# =============================================================================
# STAGE 1: PROJECT DISCOVERY → FOUNDATION CONTEXT
# =============================================================================
stage_1_mappings:
  
  # Direct Variable Mappings
  direct_mappings:
    # Project Identity
    PROJECT_NAME:
      source: "project_discovery.project_essence.project_name"
      required: true
      validation: "non_empty_string"
      fallback: "Unnamed Project"
    
    PROJECT_DOMAIN:
      source: "project_discovery.project_essence.domain"
      required: true
      validation: "domain_keyword"
      fallback: "general"
    
    PROJECT_TYPE:
      source: "project_discovery.project_essence.type"
      required: true
      validation: "project_type_enum"
      fallback: "application"
    
    PROJECT_STAGE:
      source: "project_discovery.scale_and_context.development_stage"
      required: true
      validation: "stage_enum"
      fallback: "established"
    
    TEAM_SIZE:
      source: "project_discovery.scale_and_context.team_size"
      required: true
      validation: "positive_integer"
      transformation: "extract_number_from_range"
    
    TARGET_USERS:
      source: "project_discovery.project_essence.users"
      required: true
      validation: "non_empty_string"
      fallback: "End users"
    
    # Goals and Aspirations
    PRIMARY_GOALS:
      source: "project_discovery.pain_points_and_goals.primary_goals"
      required: false
      validation: "string_array"
      transformation: "split_and_clean"
    
    CURRENT_PAIN_POINTS:
      source: "project_discovery.pain_points_and_goals.pain_points"
      required: false
      validation: "object_array"
      transformation: "categorize_pain_points"
    
    SUCCESS_CRITERIA:
      source: "project_discovery.pain_points_and_goals.success_criteria"
      required: false
      validation: "string_array"
      transformation: "extract_success_metrics"
  
  # Computed Variables
  computed_variables:
    TEAM_COMPOSITION:
      computation: "derive_team_composition"
      inputs: ["team_size", "project_type", "domain"]
      description: "Infer team composition from size and project characteristics"
    
    PROJECT_MISSION:
      computation: "generate_mission_statement"
      inputs: ["project_essence", "target_users", "primary_goals"]
      description: "Generate mission statement from project essence"
    
    CULTURAL_PATTERNS:
      computation: "infer_cultural_patterns"
      inputs: ["team_size", "development_stage", "communication_style"]
      description: "Infer team cultural patterns"
  
  # Conditional Variables
  conditional_variables:
    PROJECT_VISION:
      condition: "confidence_score > 7 AND aspirational_goals.exists"
      source: "project_discovery.pain_points_and_goals.aspirational_goals"
      transformation: "format_as_vision_statement"
    
    VALUE_PROPOSITIONS:
      condition: "project_essence.value_props.exists OR primary_goals.length > 2"
      computation: "derive_value_propositions"
      inputs: ["project_essence", "primary_goals", "target_users"]

# =============================================================================
# STAGE 2: TECHNICAL DEEP DIVE → TECHNICAL CONTEXT
# =============================================================================
stage_2_mappings:
  
  # Direct Mappings
  direct_mappings:
    # Core Technology Stack
    PRIMARY_FRAMEWORK:
      source: "technical_deep_dive.architecture_patterns.primary_framework"
      required: true
      validation: "framework_name"
      fallback: "Unknown Framework"
    
    PROGRAMMING_LANGUAGE:
      source: "technical_deep_dive.architecture_patterns.language"
      required: true
      validation: "language_name"
      transformation: "normalize_language_name"
    
    LANGUAGE_VERSION:
      source: "technical_deep_dive.architecture_patterns.language_version"
      required: false
      validation: "version_string"
      transformation: "normalize_version"
    
    ARCHITECTURE_STYLE:
      source: "technical_deep_dive.architecture_patterns.architecture_style"
      required: true
      validation: "architecture_pattern"
      fallback: "Monolithic"
    
    KEY_LIBRARIES:
      source: "technical_deep_dive.architecture_patterns.key_libraries"
      required: false
      validation: "object_array"
      transformation: "format_library_list"
    
    # Development Tools
    PACKAGE_MANAGER:
      source: "technical_deep_dive.development_workflow.package_manager"
      required: false
      validation: "tool_name"
      transformation: "normalize_tool_name"
    
    BUILD_TOOL:
      source: "technical_deep_dive.development_workflow.build_tool"
      required: false
      validation: "tool_name"
      transformation: "normalize_tool_name"
    
    # Testing Strategy
    PRIMARY_TEST_FRAMEWORK:
      source: "technical_deep_dive.development_workflow.testing_framework"
      required: false
      validation: "framework_name"
      transformation: "normalize_framework_name"
    
    TESTING_PYRAMID:
      source: "technical_deep_dive.development_workflow.testing_strategy"
      required: false
      validation: "object"
      transformation: "parse_testing_pyramid"
  
  # Framework-Specific Mappings
  framework_specific_mappings:
    react:
      STATE_MANAGEMENT_APPROACH:
        source: "technical_deep_dive.architecture_patterns.state_management"
        fallback: "React State + Context"
      
      COMPONENT_ORGANIZATION:
        source: "technical_deep_dive.architecture_patterns.component_structure"
        fallback: "Feature-based"
    
    node:
      API_ARCHITECTURE_STYLE:
        source: "technical_deep_dive.architecture_patterns.api_style"
        fallback: "RESTful"
      
      DATABASE_TYPE:
        source: "technical_deep_dive.performance_and_constraints.database"
        fallback: "Document Database"
    
    python:
      FRAMEWORK_CONVENTIONS:
        source: "technical_deep_dive.architecture_patterns.framework_patterns"
        transformation: "extract_python_conventions"
      
      DEPLOYMENT_STRATEGY:
        source: "technical_deep_dive.development_workflow.deployment"
        transformation: "extract_python_deployment"
  
  # Performance Mappings
  performance_mappings:
    PERFORMANCE_REQUIREMENTS:
      source: "technical_deep_dive.performance_and_constraints.requirements"
      required: false
      validation: "object_array"
      transformation: "parse_performance_metrics"
    
    TECHNICAL_CONSTRAINTS:
      source: "technical_deep_dive.performance_and_constraints.constraints"
      required: false
      validation: "object_array"
      transformation: "categorize_constraints"

# =============================================================================
# STAGE 3: DOMAIN EXTRACTION → DOMAIN CONTEXT
# =============================================================================
stage_3_mappings:
  
  # Business Context
  direct_mappings:
    BUSINESS_DOMAIN:
      source: "domain_extraction.business_concepts.domain"
      required: true
      validation: "domain_name"
      fallback: "General Business"
    
    MARKET_SEGMENT:
      source: "domain_extraction.business_concepts.market_segment"
      required: false
      validation: "market_category"
      transformation: "normalize_market_segment"
    
    CORE_DOMAIN_CONCEPTS:
      source: "domain_extraction.business_concepts.core_entities"
      required: true
      validation: "object_array"
      transformation: "format_domain_concepts"
    
    DOMAIN_TERMINOLOGY:
      source: "domain_extraction.business_concepts.terminology"
      required: true
      validation: "object_array"
      transformation: "format_glossary_terms"
    
    KEY_STAKEHOLDERS:
      source: "domain_extraction.business_concepts.stakeholders"
      required: false
      validation: "object_array"
      transformation: "format_stakeholder_profiles"
  
  # Business Logic Mappings
  business_logic_mappings:
    BUSINESS_RULES:
      source: "domain_extraction.business_concepts.business_rules"
      required: false
      validation: "object_array"
      transformation: "categorize_business_rules"
    
    BUSINESS_WORKFLOWS:
      source: "domain_extraction.user_workflows.workflows"
      required: false
      validation: "object_array"
      transformation: "format_workflow_definitions"
  
  # User Understanding Mappings
  user_mappings:
    USER_PERSONAS:
      source: "domain_extraction.user_workflows.user_types"
      required: false
      validation: "object_array"
      transformation: "format_user_personas"
    
    USER_JOURNEYS:
      source: "domain_extraction.user_workflows.journeys"
      required: false
      validation: "object_array"
      transformation: "format_user_journeys"
    
    COMMON_OPERATIONS:
      source: "domain_extraction.user_workflows.common_tasks"
      required: false
      validation: "object_array"
      transformation: "format_operation_profiles"
  
  # Data Architecture Mappings  
  data_mappings:
    DATA_ENTITIES:
      source: "domain_extraction.integrations_and_data.data_entities"
      required: false
      validation: "object_array"
      transformation: "format_data_entities"
    
    DATA_FLOWS:
      source: "domain_extraction.integrations_and_data.data_flows"
      required: false
      validation: "object_array"
      transformation: "format_data_flows"
    
    EXTERNAL_INTEGRATIONS:
      source: "domain_extraction.integrations_and_data.external_systems"
      required: false
      validation: "object_array"
      transformation: "format_integration_profiles"

# =============================================================================
# STAGE 4: PREFERENCE LEARNING → WORKFLOW CONTEXT
# =============================================================================
stage_4_mappings:
  
  # Development Process Mappings
  direct_mappings:
    DEVELOPMENT_METHODOLOGY:
      source: "preference_learning.coding_standards.methodology"
      required: false
      validation: "methodology_name"
      fallback: "Agile"
    
    GIT_WORKFLOW:
      source: "preference_learning.tool_and_workflow.git_workflow"
      required: false
      validation: "workflow_name"
      fallback: "Feature Branch"
    
    CODE_REVIEW_REQUIREMENTS:
      source: "preference_learning.coding_standards.review_requirements"
      required: false
      validation: "review_policy"
      fallback: "Peer Review Required"
  
  # Coding Standards Mappings
  standards_mappings:
    NAMING_CONVENTIONS:
      source: "preference_learning.coding_standards.naming_conventions"
      required: false
      validation: "object_array"
      transformation: "format_naming_rules"
    
    CODE_STYLE_RULES:
      source: "preference_learning.coding_standards.style_guidelines"
      required: false
      validation: "object_array"
      transformation: "format_style_rules"
    
    FILE_NAMING_STANDARD:
      source: "preference_learning.coding_standards.file_naming"
      required: false
      validation: "naming_pattern"
      transformation: "normalize_file_naming"
  
  # Documentation Mappings
  documentation_mappings:
    DOCUMENTATION_STANDARDS:
      source: "preference_learning.documentation_style.standards"
      required: false
      validation: "object_array"
      transformation: "format_doc_standards"
    
    DOCUMENTATION_STRATEGY:
      source: "preference_learning.documentation_style.strategy"
      required: false
      validation: "doc_strategy_enum"
      fallback: "Code-Adjacent"
    
    COMMUNICATION_STYLE:
      source: "preference_learning.documentation_style.communication_preference"
      required: false
      validation: "communication_enum"
      fallback: "Professional"
  
  # Tool Preferences
  tool_mappings:
    DEV_TOOLS:
      source: "preference_learning.tool_and_workflow.development_tools"
      required: false
      validation: "object_array"
      transformation: "format_tool_list"
    
    PROJECT_MANAGEMENT_TOOL:
      source: "preference_learning.tool_and_workflow.project_management"
      required: false
      validation: "tool_name"
      transformation: "normalize_tool_name"

# =============================================================================
# CROSS-STAGE SYNTHESIS → INTEGRATION CONTEXT
# =============================================================================
cross_stage_mappings:
  
  # Security Synthesis
  security_synthesis:
    SECURITY_PATTERNS:
      computation: "synthesize_security_patterns"
      inputs: 
        - "technical_deep_dive.performance_and_constraints.security_requirements"
        - "domain_extraction.integrations_and_data.external_systems"
        - "preference_learning.coding_standards.security_preferences"
      description: "Synthesize security patterns from technical, domain, and preference data"
    
    SECURITY_REQUIREMENTS:
      computation: "derive_security_requirements"
      inputs:
        - "domain_extraction.business_concepts.compliance_needs"
        - "technical_deep_dive.performance_and_constraints.constraints"
      description: "Derive security requirements from business and technical constraints"
  
  # Monitoring & Observability Synthesis
  observability_synthesis:
    LOGGING_ARCHITECTURE:
      computation: "design_logging_architecture"
      inputs:
        - "technical_deep_dive.architecture_patterns.architecture_style"
        - "technical_deep_dive.development_workflow.deployment"
        - "preference_learning.tool_and_workflow.monitoring_preferences"
      description: "Design logging architecture based on technical and preference inputs"
    
    MONITORING_STRATEGY:
      computation: "design_monitoring_strategy"
      inputs:
        - "technical_deep_dive.performance_and_constraints.requirements"
        - "domain_extraction.integrations_and_data.external_systems"
        - "project_discovery.scale_and_context.complexity"
      description: "Design monitoring strategy based on performance needs and complexity"
    
    METRICS_CATEGORIES:
      computation: "identify_key_metrics"
      inputs:
        - "domain_extraction.business_concepts.core_entities"
        - "technical_deep_dive.performance_and_constraints.requirements"
        - "project_discovery.pain_points_and_goals.success_criteria"
      description: "Identify key metrics from business, technical, and success criteria"
  
  # Error Handling Synthesis
  error_handling_synthesis:
    ERROR_HANDLING_STRATEGIES:
      computation: "design_error_handling"
      inputs:
        - "technical_deep_dive.architecture_patterns.architecture_style"
        - "domain_extraction.integrations_and_data.external_systems"
        - "preference_learning.coding_standards.error_preferences"
      description: "Design error handling strategies"
    
    DISASTER_RECOVERY_STRATEGY:
      computation: "design_disaster_recovery"
      inputs:
        - "technical_deep_dive.development_workflow.deployment"
        - "domain_extraction.business_concepts.criticality"
        - "project_discovery.scale_and_context.complexity"
      description: "Design disaster recovery based on deployment and business criticality"

# =============================================================================
# TRANSFORMATION FUNCTIONS
# =============================================================================
transformation_functions:
  
  # String Transformations
  string_transformations:
    extract_number_from_range:
      description: "Extract midpoint from range like '5-10 people'"
      pattern: "\\d+(?:-\\d+)?\\s*(?:people|developers|members)?"
      logic: "take midpoint of range or single number"
    
    normalize_framework_name:
      description: "Normalize framework names to standard format"
      mappings:
        "react.js": "React"
        "reactjs": "React"
        "vue.js": "Vue.js"
        "vuejs": "Vue.js"
        "node.js": "Node.js"
        "nodejs": "Node.js"
    
    split_and_clean:
      description: "Split comma/semicolon separated text and clean"
      pattern: "[,;]\\s*"
      post_process: "trim_whitespace"
  
  # Object Transformations
  object_transformations:
    categorize_pain_points:
      description: "Categorize pain points into technical, process, business"
      categories:
        - "technical"
        - "process" 
        - "business"
        - "team"
        - "infrastructure"
      classification_rules: "keyword_based_classification"
    
    format_domain_concepts:
      description: "Format domain concepts with relationships"
      output_format:
        - concept_name: "string"
        - concept_description: "string"
        - concept_relationships: "string_array"
        - concept_importance: "enum[high,medium,low]"
    
    parse_testing_pyramid:
      description: "Parse testing strategy into pyramid structure"
      output_format:
        approach: "string"
        levels:
          - level_name: "string"
            percentage: "number"
            tools: "string"
            coverage_target: "string"
  
  # Computation Functions  
  computation_functions:
    derive_team_composition:
      description: "Infer team composition from size and project type"
      logic: |
        if team_size <= 3: "Small team (developers + designer/PM)"
        elif team_size <= 8: "Medium team (frontend, backend, QA, PM)"
        else: "Large team (multiple squads with specialists)"
    
    generate_mission_statement:
      description: "Generate mission statement from project essence"
      template: "{{project_name}} {{action_verb}} {{target_users}} by {{primary_value}}"
      variable_extraction: "nlp_based"
    
    synthesize_security_patterns:
      description: "Synthesize security patterns from multiple sources"
      logic: |
        patterns = []
        if external_integrations: patterns.append("API Security")
        if user_data_handling: patterns.append("Data Protection") 
        if compliance_requirements: patterns.append("Compliance Controls")
        return patterns

# =============================================================================
# VALIDATION RULES
# =============================================================================
validation_rules:
  
  # Data Type Validations
  data_types:
    non_empty_string:
      check: "value && value.length > 0"
      error: "Value must be a non-empty string"
    
    positive_integer:
      check: "Number.isInteger(value) && value > 0"
      error: "Value must be a positive integer"
    
    string_array:
      check: "Array.isArray(value) && value.every(item => typeof item === 'string')"
      error: "Value must be an array of strings"
    
    object_array:
      check: "Array.isArray(value) && value.every(item => typeof item === 'object')"
      error: "Value must be an array of objects"
  
  # Domain-Specific Validations
  domain_validations:
    project_type_enum:
      valid_values: ["web_application", "mobile_app", "api_service", "desktop_app", "library", "framework", "tool", "system"]
      error: "Invalid project type"
    
    stage_enum:
      valid_values: ["concept", "prototype", "development", "established", "mature", "legacy"]
      error: "Invalid development stage"
    
    framework_name:
      pattern: "^[A-Za-z][A-Za-z0-9.\\-_]*$"
      error: "Invalid framework name format"
    
    version_string:
      pattern: "^\\d+(?:\\.\\d+)*(?:-[a-zA-Z0-9]+)*$"
      error: "Invalid version string format"

# =============================================================================
# CONFIDENCE SCORING
# =============================================================================
confidence_scoring:
  
  # Scoring Strategy
  strategy: "weighted_factor_sum"
  max_score: 10
  min_score: 1
  
  # Base Confidence Factors
  base_factors:
    required_variables_present:
      weight: 0.4
      description: "All required variables have values"
    
    optional_variables_coverage:
      weight: 0.2
      description: "Percentage of optional variables present"
    
    data_quality_score:
      weight: 0.2
      description: "Quality of provided data (length, specificity)"
    
    cross_stage_consistency:
      weight: 0.1
      description: "Consistency across consultation stages"
    
    validation_passes:
      weight: 0.1
      description: "Percentage of validations that pass"
  
  # Layer-Specific Confidence Adjustments
  layer_adjustments:
    foundation:
      historical_context_bonus: 0.5
      team_culture_bonus: 0.3
    
    domain:
      business_rules_bonus: 0.4
      user_personas_bonus: 0.3
      data_model_bonus: 0.2
    
    technical:
      architecture_decisions_bonus: 0.5
      testing_strategy_bonus: 0.3
      performance_requirements_bonus: 0.2
    
    workflow:
      process_documentation_bonus: 0.4
      quality_gates_bonus: 0.3
      collaboration_patterns_bonus: 0.2
    
    integration:
      security_patterns_bonus: 0.4
      error_handling_bonus: 0.3
      monitoring_strategy_bonus: 0.2