# Claude Context Architect - Context Dependencies Management
# Dependency Graph and Resolution Rules for Hierarchical Context System
# Version: 1.0
# Created: 2025-08-07

# =============================================================================
# DEPENDENCY GRAPH DEFINITION
# =============================================================================
# This file defines the complete dependency relationships between context
# layers, files, and content elements, ensuring proper loading order and
# conflict resolution throughout the hierarchical context system.

dependency_graph:
  version: "1.0"
  format: "directed_acyclic_graph"
  validation: "topological_sort_required"

  # ---------------------------------------------------------------------------
  # LAYER-LEVEL DEPENDENCIES
  # ---------------------------------------------------------------------------
  layer_dependencies:
    
    project_level:
      depends_on: []
      required_by: 
        - "domain_level"
        - "technical_level" 
        - "workflow_level"
        - "integration_level"
      loading_priority: 1
      initialization_order: 1
      
    domain_level:
      depends_on: ["project_level"]
      required_by:
        - "technical_level"
        - "workflow_level" 
        - "integration_level"
      loading_priority: 2
      initialization_order: 2
      
    technical_level:
      depends_on: ["project_level", "domain_level"]
      required_by:
        - "workflow_level"
        - "integration_level"
      loading_priority: 3
      initialization_order: 3
      
    workflow_level:
      depends_on: ["project_level", "domain_level", "technical_level"]
      required_by:
        - "integration_level"
      loading_priority: 4
      initialization_order: 4
      
    integration_level:
      depends_on: ["project_level", "domain_level", "technical_level", "workflow_level"]
      required_by: []
      loading_priority: 5
      initialization_order: 5

  # ---------------------------------------------------------------------------
  # FILE-LEVEL DEPENDENCIES
  # ---------------------------------------------------------------------------
  file_dependencies:
    
    # Project Level Files
    "CLAUDE.md":
      depends_on: []
      required_by: ["all_context_files"]
      content_type: "master_context"
      loading_strategy: "eager"
      
    ".claude/project-dna.md":
      depends_on: ["CLAUDE.md"]
      required_by: ["domain_files", "technical_files"]
      content_type: "project_foundation"
      loading_strategy: "on_demand"
      
    ".claude/project-evolution.md":
      depends_on: ["CLAUDE.md", ".claude/project-dna.md"]
      required_by: []
      content_type: "historical_context"
      loading_strategy: "lazy"
      
    ".claude/decision-log.md":
      depends_on: ["CLAUDE.md"]
      required_by: ["technical_files", "workflow_files"]
      content_type: "decision_context"
      loading_strategy: "on_demand"
    
    # Domain Level Files
    ".claude/domain-context.md":
      depends_on: ["CLAUDE.md", ".claude/project-dna.md"]
      required_by: ["technical_files", "workflow_files"]
      content_type: "domain_foundation"
      loading_strategy: "eager"
      
    ".claude/domain-glossary.md":
      depends_on: [".claude/domain-context.md"]
      required_by: ["all_domain_files", "technical_files"]
      content_type: "terminology"
      loading_strategy: "on_demand"
      
    ".claude/business-rules.md":
      depends_on: [".claude/domain-context.md", ".claude/domain-glossary.md"]
      required_by: ["workflow_files"]
      content_type: "business_logic"
      loading_strategy: "on_demand"
      
    ".claude/user-journeys.md":
      depends_on: [".claude/domain-context.md", ".claude/business-rules.md"]
      required_by: ["workflow_files", "integration_files"]
      content_type: "user_context"
      loading_strategy: "lazy"
      
    ".claude/data-models.md":
      depends_on: [".claude/domain-context.md", ".claude/business-rules.md"]
      required_by: ["technical_files", "integration_files"]
      content_type: "data_architecture"
      loading_strategy: "on_demand"
    
    # Technical Level Files  
    ".claude/technical-context.md":
      depends_on: ["CLAUDE.md", ".claude/domain-context.md", ".claude/project-dna.md"]
      required_by: ["workflow_files", "integration_files"]
      content_type: "technical_foundation"
      loading_strategy: "eager"
      
    ".claude/architecture-patterns.md":
      depends_on: [".claude/technical-context.md", ".claude/decision-log.md"]
      required_by: ["workflow_files", "integration_files"]
      content_type: "architectural_knowledge"
      loading_strategy: "on_demand"
      
    ".claude/framework-conventions.md":
      depends_on: [".claude/technical-context.md", ".claude/architecture-patterns.md"]
      required_by: ["workflow_files"]
      content_type: "coding_standards"
      loading_strategy: "on_demand"
      
    ".claude/testing-strategy.md":
      depends_on: [".claude/technical-context.md", ".claude/framework-conventions.md"]
      required_by: ["workflow_files"]
      content_type: "quality_assurance"
      loading_strategy: "on_demand"
      
    ".claude/deployment-patterns.md":
      depends_on: [".claude/technical-context.md", ".claude/architecture-patterns.md"]
      required_by: ["workflow_files", "integration_files"]
      content_type: "deployment_knowledge"
      loading_strategy: "lazy"
    
    # Workflow Level Files
    ".claude/workflow-context.md":
      depends_on: ["CLAUDE.md", ".claude/technical-context.md", ".claude/domain-context.md"]
      required_by: ["integration_files"]
      content_type: "workflow_foundation"
      loading_strategy: "eager"
      
    ".claude/development-process.md":
      depends_on: [".claude/workflow-context.md", ".claude/framework-conventions.md"]
      required_by: []
      content_type: "development_procedures"
      loading_strategy: "on_demand"
      
    ".claude/code-review-standards.md":
      depends_on: [".claude/workflow-context.md", ".claude/testing-strategy.md"]
      required_by: []
      content_type: "quality_procedures"
      loading_strategy: "on_demand"
      
    ".claude/deployment-workflow.md":
      depends_on: [".claude/workflow-context.md", ".claude/deployment-patterns.md"]
      required_by: ["integration_files"]
      content_type: "operational_procedures"
      loading_strategy: "lazy"
      
    ".claude/troubleshooting-guides.md":
      depends_on: [".claude/workflow-context.md", ".claude/technical-context.md"]
      required_by: []
      content_type: "operational_knowledge"
      loading_strategy: "lazy"
    
    # Integration Level Files
    ".claude/integration-context.md":
      depends_on: ["all_foundation_files"]
      required_by: []
      content_type: "integration_foundation"
      loading_strategy: "on_demand"
      
    ".claude/cross-cutting-concerns.md":
      depends_on: [".claude/integration-context.md", ".claude/architecture-patterns.md"]
      required_by: []
      content_type: "system_wide_concerns"
      loading_strategy: "lazy"
      
    ".claude/system-boundaries.md":
      depends_on: [".claude/integration-context.md", ".claude/data-models.md"]
      required_by: []
      content_type: "interface_definitions"
      loading_strategy: "lazy"
      
    ".claude/external-dependencies.md":
      depends_on: [".claude/integration-context.md", ".claude/deployment-patterns.md"]
      required_by: []
      content_type: "external_integrations"
      loading_strategy: "lazy"

  # ---------------------------------------------------------------------------
  # CONTENT ELEMENT DEPENDENCIES
  # ---------------------------------------------------------------------------
  content_dependencies:
    
    # Core Project Elements
    project_identity:
      depends_on: []
      required_by: ["domain_vocabulary", "technical_patterns", "workflow_procedures"]
      
    core_principles:
      depends_on: ["project_identity"]
      required_by: ["architectural_decisions", "quality_standards"]
      
    team_culture:
      depends_on: ["project_identity"]
      required_by: ["workflow_procedures", "collaboration_patterns"]
    
    # Domain Elements
    domain_vocabulary:
      depends_on: ["project_identity"]
      required_by: ["business_logic", "user_interaction_models", "technical_patterns"]
      
    business_logic:
      depends_on: ["domain_vocabulary", "core_principles"]
      required_by: ["workflow_procedures", "technical_patterns"]
      
    user_interaction_models:
      depends_on: ["domain_vocabulary", "business_logic"]
      required_by: ["workflow_procedures", "integration_patterns"]
    
    # Technical Elements
    technical_patterns:
      depends_on: ["project_identity", "domain_vocabulary", "core_principles"]
      required_by: ["workflow_procedures", "integration_patterns"]
      
    coding_conventions:
      depends_on: ["technical_patterns", "team_culture"]
      required_by: ["workflow_procedures", "quality_standards"]
      
    testing_requirements:
      depends_on: ["technical_patterns", "business_logic"]
      required_by: ["quality_standards", "workflow_procedures"]
    
    # Workflow Elements
    workflow_procedures:
      depends_on: ["team_culture", "technical_patterns", "business_logic"]
      required_by: ["integration_patterns", "operational_knowledge"]
      
    quality_standards:
      depends_on: ["core_principles", "testing_requirements", "coding_conventions"]
      required_by: ["operational_knowledge"]
      
    collaboration_patterns:
      depends_on: ["team_culture", "workflow_procedures"]
      required_by: ["operational_knowledge"]
    
    # Integration Elements
    integration_patterns:
      depends_on: ["technical_patterns", "user_interaction_models", "workflow_procedures"]
      required_by: []
      
    operational_knowledge:
      depends_on: ["workflow_procedures", "quality_standards", "collaboration_patterns"]
      required_by: []

# =============================================================================
# DEPENDENCY RESOLUTION RULES
# =============================================================================
resolution_rules:
  
  # Loading Order Strategy
  loading_strategy:
    algorithm: "topological_sort"
    parallel_loading: true
    batch_size: 3
    timeout_per_batch: 30  # seconds
    
  # Circular Dependency Handling
  circular_dependency_detection:
    enabled: true
    detection_algorithm: "depth_first_search"
    action_on_detection: "error_and_halt"
    reporting: "detailed_cycle_path"
    
  # Missing Dependency Handling  
  missing_dependency_handling:
    strategy: "graceful_degradation"
    actions:
      log_warning: true
      continue_loading: true
      mark_incomplete: true
      provide_fallback: true
      
  # Conflict Resolution
  dependency_conflicts:
    resolution_strategy: "dependency_order_priority"
    tie_breaking: "most_recent_modification"
    override_mechanism: "explicit_dependency_declaration"

# =============================================================================
# LOADING OPTIMIZATION
# =============================================================================
optimization:
  
  # Caching Strategy
  dependency_caching:
    cache_resolution_results: true
    cache_file_metadata: true
    cache_content_checksums: true
    invalidation_triggers: ["file_modification", "dependency_change"]
    
  # Lazy Loading Rules
  lazy_loading:
    enabled: true
    triggers:
      - "explicit_context_request"
      - "inheritance_chain_demand" 
      - "cross_reference_resolution"
    preload_critical_path: true
    preload_high_frequency: true
    
  # Performance Monitoring
  performance_tracking:
    measure_loading_times: true
    track_cache_hit_rates: true
    monitor_memory_usage: true
    log_performance_metrics: true

# =============================================================================
# VALIDATION FRAMEWORK
# =============================================================================
validation:
  
  # Structural Validation
  structure_checks:
    - "no_circular_dependencies"
    - "all_required_dependencies_exist"
    - "dependency_depth_within_limits"
    - "loading_order_deterministic"
    
  # Content Validation
  content_checks:
    - "referenced_content_exists"
    - "cross_references_valid"
    - "inheritance_chains_complete"
    - "content_freshness_acceptable"
    
  # Performance Validation
  performance_checks:
    - "loading_time_within_threshold"
    - "memory_usage_acceptable"
    - "cache_efficiency_adequate"
    - "parallel_loading_effective"

# =============================================================================
# ERROR RECOVERY PROCEDURES  
# =============================================================================
error_recovery:
  
  # Failure Scenarios
  failure_handling:
    file_not_found:
      action: "use_fallback_content"
      fallback_source: "template_defaults"
      log_level: "warning"
      
    circular_dependency:
      action: "break_cycle_at_lowest_priority"
      resolution_strategy: "remove_problematic_edge"
      log_level: "error"
      
    timeout_exceeded:
      action: "continue_with_partial_context"
      partial_strategy: "highest_priority_first"
      log_level: "warning"
      
    memory_exceeded:
      action: "reduce_context_depth"
      reduction_strategy: "trim_lowest_priority_layers"
      log_level: "error"
      
  # Recovery Procedures
  recovery_mechanisms:
    auto_retry: true
    retry_count: 3
    retry_backoff: "exponential"
    fallback_to_minimal_context: true
    emergency_context_available: true

# =============================================================================
# MONITORING AND ANALYTICS
# =============================================================================
monitoring:
  
  # Dependency Health Metrics
  health_metrics:
    dependency_resolution_success_rate: "percentage"
    average_loading_time: "milliseconds"
    cache_hit_rate: "percentage"
    circular_dependency_incidents: "count"
    
  # Usage Analytics
  usage_tracking:
    most_frequently_loaded_contexts: "ranking"
    dependency_chain_lengths: "distribution"
    loading_pattern_analysis: "behavioral"
    performance_bottleneck_identification: "automated"
    
  # Alerting Rules
  alerting:
    circular_dependency_detected: "immediate"
    loading_time_threshold_exceeded: "5_minutes"
    cache_miss_rate_high: "hourly"
    dependency_resolution_failure_rate_high: "immediate"

# =============================================================================
# END OF DEPENDENCY CONFIGURATION
# =============================================================================
# This dependency management system ensures reliable, performant, and
# maintainable context loading while supporting the complex hierarchical
# relationships required for deep project understanding.