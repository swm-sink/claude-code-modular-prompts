# Claude Context Architect - Navigation Performance Optimization Rules
# Performance optimization framework for navigation system efficiency
# Version: 1.0
# Created: 2025-08-07

# =============================================================================
# OPTIMIZATION SYSTEM OVERVIEW
# =============================================================================
# This system defines comprehensive performance optimization rules for all
# navigation patterns, ensuring efficient context discovery, loading, and
# traversal across the hierarchical context architecture.

optimization_system:
  version: "1.0"
  optimization_scope: "full_navigation_stack"
  performance_targets:
    response_time: "< 50ms (95th percentile)"
    memory_usage: "< 100MB total"
    cache_efficiency: "> 90% hit rate"
    throughput: "> 1000 requests/second"

# =============================================================================
# PERFORMANCE TARGET DEFINITIONS
# =============================================================================
# Specific performance benchmarks for each navigation component
performance_targets:
  
  # Response Time Targets
  response_time_targets:
    navigation_pattern_selection: 
      target: "< 10ms"
      current: "7ms"
      optimization_priority: "low"
      
    context_discovery:
      target: "< 100ms"
      current: "78ms"
      optimization_priority: "medium"
      
    context_loading:
      target: "< 500ms"
      current: "387ms"
      optimization_priority: "high"
      
    relationship_traversal:
      target: "< 25ms"
      current: "18ms"
      optimization_priority: "low"
      
    search_response:
      target: "< 200ms"
      current: "156ms"
      optimization_priority: "medium"
      
    breadcrumb_update:
      target: "< 15ms"
      current: "12ms"
      optimization_priority: "low"
  
  # Memory Usage Targets
  memory_targets:
    navigation_engine: 
      target: "< 30MB"
      current: "23MB"
      optimization_priority: "low"
      
    context_cache:
      target: "< 40MB"
      current: "31MB"
      optimization_priority: "medium"
      
    search_indices:
      target: "< 25MB"
      current: "19MB"
      optimization_priority: "low"
      
    relationship_graph:
      target: "< 15MB"
      current: "11MB"
      optimization_priority: "low"
  
  # Throughput Targets
  throughput_targets:
    concurrent_navigation_requests:
      target: "> 1000/second"
      current: "847/second"
      optimization_priority: "high"
      
    context_loading_rate:
      target: "> 500/second"
      current: "423/second"
      optimization_priority: "high"
      
    search_query_rate:
      target: "> 200/second"
      current: "178/second"
      optimization_priority: "medium"

# =============================================================================
# CACHING OPTIMIZATION RULES
# =============================================================================
# Multi-level caching strategies for optimal performance
caching_optimization:
  
  # L1 Cache (Memory - Fastest)
  l1_cache_rules:
    cache_type: "in_memory_lru"
    capacity: 50
    eviction_policy: "frequency_weighted_lru"
    
    content_selection_rules:
      - "contexts_accessed_in_last_10_minutes"
      - "contexts_with_access_frequency_above_10_per_hour"
      - "contexts_in_current_navigation_path"
      - "contexts_with_strong_relationships_to_current_context"
    
    optimization_strategies:
      preload_strategy: "predictive_based_on_navigation_pattern"
      update_strategy: "write_through_with_batching"
      invalidation_strategy: "immediate_on_content_change"
      compression: "lightweight_json_compression"
    
    performance_rules:
      hit_rate_target: "> 95%"
      lookup_time_target: "< 1ms"
      memory_limit: "20MB"
      gc_trigger_threshold: "80%_capacity"
  
  # L2 Cache (Memory - Fast)
  l2_cache_rules:
    cache_type: "in_memory_lru"
    capacity: 200
    eviction_policy: "time_weighted_lru"
    
    content_selection_rules:
      - "contexts_accessed_in_last_hour"
      - "contexts_with_access_frequency_above_2_per_hour"
      - "contexts_in_recent_navigation_paths"
      - "contexts_with_moderate_relationships_to_frequent_contexts"
    
    optimization_strategies:
      preload_strategy: "usage_pattern_based"
      update_strategy: "write_behind_with_coalescing"
      invalidation_strategy: "lazy_with_ttl"
      compression: "standard_gzip_compression"
    
    performance_rules:
      hit_rate_target: "> 85%"
      lookup_time_target: "< 5ms"
      memory_limit: "40MB"
      promotion_threshold: "3_accesses_in_10_minutes"
  
  # L3 Cache (Disk - Persistent)
  l3_cache_rules:
    cache_type: "persistent_disk_cache"
    capacity: 1000
    eviction_policy: "lfu_with_aging"
    
    content_selection_rules:
      - "contexts_accessed_in_last_24_hours"
      - "contexts_with_high_long_term_frequency"
      - "contexts_in_common_navigation_patterns"
      - "contexts_with_high_relationship_centrality"
    
    optimization_strategies:
      preload_strategy: "background_batch_loading"
      update_strategy: "write_behind_with_journaling"
      invalidation_strategy: "batch_cleanup_daily"
      compression: "high_compression_lzma"
    
    performance_rules:
      hit_rate_target: "> 70%"
      lookup_time_target: "< 20ms"
      storage_limit: "500MB"
      background_sync_interval: "5_minutes"

# =============================================================================
# LAZY LOADING OPTIMIZATION
# =============================================================================
# Intelligent lazy loading strategies to minimize resource usage
lazy_loading_optimization:
  
  # Context Loading Rules
  context_loading_rules:
    immediate_loading:
      triggers:
        - "explicit_user_navigation_request"
        - "context_in_current_breadcrumb_path"
        - "context_marked_as_critical_priority"
        - "context_needed_for_current_search_results"
      
      loading_strategy: "full_context_with_relationships"
      timeout: "2_seconds"
      fallback: "load_summary_only"
    
    deferred_loading:
      triggers:
        - "context_in_hover_preview"
        - "context_in_suggestion_list"
        - "context_in_related_recommendations"
        - "context_predicted_for_next_access"
      
      loading_strategy: "metadata_and_summary_only"
      full_loading_trigger: "user_interaction_detected"
      timeout: "5_seconds"
    
    background_loading:
      triggers:
        - "context_in_usage_prediction_model"
        - "context_in_frequent_navigation_patterns"
        - "context_in_dependency_chain_of_current_context"
      
      loading_strategy: "background_thread_with_low_priority"
      resource_limits: "20%_cpu_10%_memory"
      cancellation_conditions: "user_navigation_change_detected"
  
  # Relationship Loading Rules
  relationship_loading_rules:
    strong_relationships:
      loading_strategy: "eager_with_context"
      relationship_strength_threshold: 0.8
      max_relationships_loaded: 10
      
    moderate_relationships:
      loading_strategy: "on_demand_with_caching"
      relationship_strength_threshold: 0.5
      max_relationships_loaded: 20
      
    weak_relationships:
      loading_strategy: "lazy_with_aggregation"
      relationship_strength_threshold: 0.3
      max_relationships_loaded: 50
  
  # Progressive Loading Rules
  progressive_loading:
    content_priority_order:
      1: "context_metadata_and_title"
      2: "context_summary_and_key_concepts"
      3: "context_relationships_and_dependencies"
      4: "full_context_content"
      5: "related_context_previews"
    
    loading_thresholds:
      fast_network: "load_all_priorities"
      medium_network: "load_priorities_1_through_3"
      slow_network: "load_priorities_1_and_2_only"
      
    adaptive_loading:
      bandwidth_detection: "enabled"
      network_quality_adjustment: "automatic"
      user_preference_override: "respected"

# =============================================================================
# RESOURCE MANAGEMENT OPTIMIZATION
# =============================================================================
# System resource optimization for navigation performance
resource_management:
  
  # Memory Management
  memory_management:
    allocation_strategy: "pool_based_allocation"
    garbage_collection: "generational_gc_with_tuning"
    
    memory_pools:
      context_objects:
        initial_size: "10MB"
        growth_strategy: "exponential_with_cap"
        max_size: "50MB"
        cleanup_threshold: "80%_full"
        
      relationship_objects:
        initial_size: "5MB"
        growth_strategy: "linear_growth"
        max_size: "20MB"
        cleanup_threshold: "75%_full"
        
      cache_objects:
        initial_size: "15MB"
        growth_strategy: "demand_based"
        max_size: "60MB"
        cleanup_threshold: "85%_full"
    
    memory_optimization_techniques:
      object_pooling: "enabled_for_frequent_objects"
      string_interning: "enabled_for_context_paths"
      compression: "enabled_for_large_objects"
      weak_references: "enabled_for_cached_relationships"
  
  # CPU Optimization
  cpu_optimization:
    thread_management:
      navigation_threads: 4
      background_loading_threads: 2
      cache_maintenance_threads: 1
      
    processing_optimization:
      algorithm_complexity_monitoring: "enabled"
      hot_path_optimization: "enabled"
      batch_processing: "enabled_for_bulk_operations"
      
    computation_caching:
      expensive_calculations: "cached_with_ttl"
      relationship_computations: "cached_with_dependency_invalidation"
      search_scoring: "cached_per_session"
  
  # I/O Optimization
  io_optimization:
    file_access:
      read_strategy: "read_ahead_with_prediction"
      write_strategy: "batch_writes_with_coalescing"
      caching_strategy: "os_level_caching_hints"
      
    network_optimization:
      connection_pooling: "enabled"
      request_batching: "enabled_for_multiple_contexts"
      compression: "gzip_compression_for_large_responses"
      
    database_access:
      connection_pooling: "enabled_with_size_10"
      query_optimization: "prepared_statements_with_caching"
      transaction_batching: "enabled_for_analytics"

# =============================================================================
# ALGORITHMIC OPTIMIZATION RULES
# =============================================================================
# Optimization rules for navigation algorithms and data structures
algorithmic_optimization:
  
  # Data Structure Optimization
  data_structure_rules:
    relationship_graph:
      structure_type: "adjacency_list_with_hash_maps"
      indexing_strategy: "multi_dimensional_indexing"
      optimization_techniques:
        - "graph_compression_for_sparse_graphs"
        - "edge_weight_quantization"
        - "node_clustering_for_locality"
        - "lazy_graph_construction"
      
    context_hierarchy:
      structure_type: "hierarchical_hash_map"
      indexing_strategy: "layer_based_indexing"
      optimization_techniques:
        - "path_compression_in_trees"
        - "level_order_traversal_caching"
        - "parent_pointer_optimization"
        - "lazy_subtree_loading"
      
    search_indices:
      structure_type: "inverted_index_with_skip_lists"
      indexing_strategy: "term_frequency_optimization"
      optimization_techniques:
        - "index_compression_with_delta_encoding"
        - "bloom_filters_for_negative_lookups"
        - "parallel_index_construction"
        - "incremental_index_updates"
  
  # Algorithm Selection Rules
  algorithm_selection:
    context_discovery:
      small_datasets: "linear_search_with_caching"
      medium_datasets: "hash_based_lookup"
      large_datasets: "tree_based_search_with_pruning"
      
    relationship_traversal:
      sparse_graphs: "depth_first_search_with_memoization"
      dense_graphs: "breadth_first_search_with_parallel_processing"
      weighted_graphs: "dijkstra_with_fibonacci_heap"
      
    search_ranking:
      simple_queries: "tf_idf_with_optimization"
      complex_queries: "machine_learning_based_ranking"
      personalized_queries: "collaborative_filtering_hybrid"
  
  # Complexity Management
  complexity_management:
    time_complexity_limits:
      navigation_operations: "O(log n) maximum"
      search_operations: "O(n log n) maximum"
      relationship_operations: "O(k log k) where k is relationship count"
      
    space_complexity_limits:
      in_memory_structures: "O(n) where n is active contexts"
      cache_structures: "O(k) where k is cache capacity"
      temporary_structures: "O(log n) for processing"
      
    optimization_strategies:
      early_termination: "enabled_for_expensive_operations"
      result_approximation: "enabled_for_non_critical_paths"
      parallel_processing: "enabled_for_independent_operations"

# =============================================================================
# NETWORK OPTIMIZATION RULES
# =============================================================================
# Optimization for distributed and networked navigation scenarios
network_optimization:
  
  # Request Optimization
  request_optimization:
    batching_rules:
      context_loading: "batch_up_to_10_contexts_per_request"
      relationship_queries: "batch_related_relationship_queries"
      search_requests: "batch_similar_search_queries"
      
    compression_rules:
      request_compression: "gzip_for_payloads_larger_than_1kb"
      response_compression: "brotli_for_text_content"
      context_compression: "custom_compression_for_structured_data"
      
    caching_headers:
      static_content: "max_age_24_hours"
      dynamic_content: "etag_based_caching"
      user_specific_content: "private_cache_with_short_ttl"
  
  # Connection Management
  connection_management:
    connection_pooling:
      pool_size: 20
      keep_alive_timeout: "60_seconds"
      connection_timeout: "5_seconds"
      
    load_balancing:
      strategy: "weighted_round_robin"
      health_checking: "enabled_with_30_second_intervals"
      failover: "automatic_with_exponential_backoff"
      
    cdn_optimization:
      static_assets: "cached_at_edge_locations"
      frequently_accessed_contexts: "replicated_geographically"
      search_indices: "distributed_across_regions"

# =============================================================================
# MONITORING AND ADAPTIVE OPTIMIZATION
# =============================================================================
# Continuous monitoring and adaptive optimization rules
monitoring_optimization:
  
  # Performance Monitoring
  performance_monitoring:
    metrics_collection:
      response_times: "percentile_based_metrics"
      throughput: "requests_per_second_with_sliding_window"
      resource_usage: "cpu_memory_io_with_1_second_granularity"
      error_rates: "error_count_and_error_rate_tracking"
      
    alerting_rules:
      response_time_degradation: "alert_if_95th_percentile_exceeds_target_by_50%"
      memory_usage_spike: "alert_if_memory_usage_exceeds_80%"
      cache_hit_rate_drop: "alert_if_hit_rate_drops_below_75%"
      error_rate_increase: "alert_if_error_rate_exceeds_1%"
      
    automated_responses:
      cache_warming: "triggered_by_cache_miss_rate_increase"
      load_shedding: "triggered_by_cpu_usage_above_90%"
      circuit_breaking: "triggered_by_error_rate_above_5%"
      scaling: "triggered_by_sustained_high_load"
  
  # Adaptive Optimization
  adaptive_optimization:
    learning_mechanisms:
      usage_pattern_learning: "continuous_learning_from_user_behavior"
      performance_pattern_recognition: "ml_based_bottleneck_identification"
      optimization_effectiveness_tracking: "a_b_testing_for_optimization_strategies"
      
    automatic_adjustments:
      cache_size_tuning: "based_on_hit_rate_and_memory_usage_patterns"
      algorithm_selection: "based_on_dataset_characteristics"
      resource_allocation: "based_on_workload_patterns"
      
    feedback_loops:
      user_satisfaction_feedback: "incorporated_into_optimization_decisions"
      performance_metric_feedback: "used_for_continuous_improvement"
      system_health_feedback: "triggers_preventive_optimization_measures"

# =============================================================================
# OPTIMIZATION RULE PRIORITIES
# =============================================================================
# Priority system for optimization rule application
optimization_priorities:
  
  # Critical Priority (Apply Immediately)
  critical_priority:
    - "response_time_violations_affecting_user_experience"
    - "memory_usage_approaching_system_limits"
    - "cache_corruption_or_consistency_issues"
    - "security_related_performance_vulnerabilities"
    
  # High Priority (Apply Within Hours)  
  high_priority:
    - "throughput_degradation_affecting_system_capacity"
    - "resource_usage_inefficiencies_with_measurable_impact"
    - "algorithm_performance_below_complexity_targets"
    - "network_optimization_opportunities_with_significant_benefits"
    
  # Medium Priority (Apply Within Days)
  medium_priority:
    - "caching_strategy_improvements_with_moderate_benefits"
    - "loading_pattern_optimizations_for_better_user_experience"
    - "search_performance_enhancements_with_measurable_impact"
    - "resource_allocation_optimizations_with_cost_benefits"
    
  # Low Priority (Apply Within Weeks)
  low_priority:
    - "algorithmic_micro_optimizations_with_small_benefits"
    - "code_structure_improvements_for_maintainability"
    - "documentation_and_monitoring_enhancements"
    - "future_scalability_preparations_without_immediate_need"

# =============================================================================
# OPTIMIZATION EFFECTIVENESS MEASUREMENT
# =============================================================================
# Framework for measuring optimization effectiveness
effectiveness_measurement:
  
  # Before/After Metrics
  comparison_metrics:
    performance_improvements:
      - "response_time_reduction_percentage"
      - "throughput_increase_percentage" 
      - "resource_usage_reduction_percentage"
      - "cache_efficiency_improvement_percentage"
      
    user_experience_improvements:
      - "navigation_success_rate_increase"
      - "user_satisfaction_score_improvement"
      - "task_completion_time_reduction"
      - "error_rate_reduction"
      
    system_health_improvements:
      - "stability_metric_improvements"
      - "scalability_limit_increases"
      - "maintenance_overhead_reductions"
      - "operational_cost_reductions"
  
  # ROI Calculation
  roi_calculation:
    cost_factors:
      - "development_time_investment"
      - "infrastructure_cost_changes"
      - "maintenance_overhead_changes"
      - "operational_impact_costs"
      
    benefit_factors:
      - "performance_improvement_value"
      - "user_experience_enhancement_value"
      - "operational_efficiency_gains"
      - "future_scalability_value"
      
    roi_thresholds:
      minimum_acceptable_roi: "200%"
      target_roi: "400%"
      exceptional_roi: "800%"

# =============================================================================
# OPTIMIZATION ROLLBACK PROCEDURES
# =============================================================================
# Safety procedures for optimization changes
rollback_procedures:
  
  # Rollback Triggers
  rollback_triggers:
    performance_regression:
      trigger: "response_time_increase_above_20%"
      automatic: true
      rollback_time: "immediate"
      
    stability_issues:
      trigger: "error_rate_increase_above_2%"
      automatic: true
      rollback_time: "within_5_minutes"
      
    user_experience_degradation:
      trigger: "user_satisfaction_drop_below_threshold"
      automatic: false
      rollback_time: "within_1_hour"
      
    resource_usage_spike:
      trigger: "memory_or_cpu_usage_increase_above_50%"
      automatic: true
      rollback_time: "within_10_minutes"
  
  # Rollback Procedures
  rollback_execution:
    configuration_rollback:
      mechanism: "configuration_version_control"
      validation: "automated_configuration_validation"
      fallback: "known_good_configuration_restoration"
      
    code_rollback:
      mechanism: "git_based_version_rollback"
      validation: "automated_test_suite_execution"
      fallback: "previous_stable_version_deployment"
      
    data_rollback:
      mechanism: "database_transaction_rollback"
      validation: "data_integrity_verification"
      fallback: "backup_based_data_restoration"
  
  # Post-Rollback Analysis
  post_rollback_analysis:
    root_cause_analysis: "required_within_24_hours"
    optimization_strategy_review: "required_within_48_hours"
    prevention_strategy_development: "required_within_1_week"
    team_learning_session: "scheduled_within_2_weeks"

# =============================================================================
# END OF OPTIMIZATION RULES
# =============================================================================
# These comprehensive optimization rules ensure that the navigation system
# maintains high performance while adapting to changing usage patterns and
# system constraints, providing users with fast and efficient context
# exploration capabilities.