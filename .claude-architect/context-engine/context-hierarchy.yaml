# Claude Context Architect - Hierarchical Context System
# Core Architecture for Multi-File Context Generation
# Version: 1.0
# Created: 2025-08-07

# =============================================================================
# CONTEXT HIERARCHY DEFINITION
# =============================================================================
# This defines the complete structure and relationships of the hierarchical
# context system that transforms consultation insights into Claude's deep
# project understanding.

hierarchy:
  version: "1.0"
  format: "multi_file_hierarchical"
  
  # ---------------------------------------------------------------------------
  # LAYER 1: PROJECT FOUNDATION (Root Context)
  # ---------------------------------------------------------------------------
  project_level:
    name: "Project Foundation Context"
    purpose: "Establishes fundamental project identity and overarching patterns"
    priority: 10  # Highest priority - always loaded
    token_budget: 2000
    
    files:
      primary: "CLAUDE.md"
      supplementary:
        - ".claude/project-dna.md"
        - ".claude/project-evolution.md"
        - ".claude/decision-log.md"
    
    content_types:
      - project_identity
      - core_principles 
      - architectural_philosophy
      - team_culture
      - historical_context
      - decision_rationale
    
    inheritance:
      provides_to_children:
        - project_name
        - domain_context
        - technology_stack
        - team_size
        - cultural_patterns
        - core_constraints
      
    dependencies: []  # No dependencies - this is the root
    
    scope_boundaries:
      includes:
        - "Project mission and vision"
        - "Fundamental architectural decisions"
        - "Team working agreements"
        - "Historical evolution patterns"
      excludes:
        - "Implementation details"
        - "Specific component architecture"
        - "Day-to-day workflow steps"

  # ---------------------------------------------------------------------------
  # LAYER 2: DOMAIN INTELLIGENCE (Business Context)
  # ---------------------------------------------------------------------------
  domain_level:
    name: "Domain Intelligence Context"
    purpose: "Captures business domain expertise and terminology"
    priority: 9
    token_budget: 1500
    
    files:
      primary: ".claude/domain-context.md"
      supplementary:
        - ".claude/domain-glossary.md"
        - ".claude/business-rules.md"
        - ".claude/user-journeys.md"
        - ".claude/data-models.md"
    
    content_types:
      - domain_terminology
      - business_rules
      - user_personas
      - data_relationships
      - workflow_patterns
      - integration_points
    
    inheritance:
      inherits_from_parent:
        - project_name
        - domain_context
        - core_constraints
      provides_to_children:
        - domain_vocabulary
        - business_logic_patterns
        - user_interaction_models
        - data_flow_patterns
      
    dependencies: ["project_level"]
    
    scope_boundaries:
      includes:
        - "Business domain expertise"
        - "User workflow understanding"
        - "Data model relationships"
        - "Integration requirements"
      excludes:
        - "Technical implementation details"
        - "Code-level patterns"
        - "Infrastructure concerns"

  # ---------------------------------------------------------------------------
  # LAYER 3: TECHNICAL ARCHITECTURE (Implementation Context)
  # ---------------------------------------------------------------------------
  technical_level:
    name: "Technical Architecture Context"
    purpose: "Defines technical patterns, frameworks, and implementation standards"
    priority: 8
    token_budget: 2000
    
    files:
      primary: ".claude/technical-context.md"
      supplementary:
        - ".claude/architecture-patterns.md"
        - ".claude/framework-conventions.md"
        - ".claude/testing-strategy.md"
        - ".claude/deployment-patterns.md"
    
    content_types:
      - framework_patterns
      - architectural_decisions
      - coding_conventions
      - testing_approaches
      - deployment_strategies
      - performance_patterns
    
    inheritance:
      inherits_from_parent:
        - project_name
        - technology_stack
        - core_constraints
        - domain_vocabulary
      provides_to_children:
        - coding_patterns
        - framework_conventions
        - testing_requirements
        - deployment_procedures
      
    dependencies: ["project_level", "domain_level"]
    
    scope_boundaries:
      includes:
        - "Framework usage patterns"
        - "Architectural decisions"
        - "Code organization principles"
        - "Technical standards"
      excludes:
        - "Business logic details"
        - "User experience specifics"
        - "Team process details"

  # ---------------------------------------------------------------------------
  # LAYER 4: WORKFLOW ORCHESTRATION (Process Context)
  # ---------------------------------------------------------------------------
  workflow_level:
    name: "Workflow Orchestration Context"
    purpose: "Captures team processes, development workflows, and operational procedures"
    priority: 7
    token_budget: 1200
    
    files:
      primary: ".claude/workflow-context.md"
      supplementary:
        - ".claude/development-process.md"
        - ".claude/code-review-standards.md"
        - ".claude/deployment-workflow.md"
        - ".claude/troubleshooting-guides.md"
    
    content_types:
      - development_workflows
      - code_review_process
      - deployment_procedures
      - troubleshooting_patterns
      - team_collaboration
      - quality_gates
    
    inheritance:
      inherits_from_parent:
        - project_name
        - team_size
        - cultural_patterns
        - coding_patterns
        - testing_requirements
      provides_to_children:
        - workflow_procedures
        - quality_standards
        - collaboration_patterns
        - operational_knowledge
      
    dependencies: ["project_level", "domain_level", "technical_level"]
    
    scope_boundaries:
      includes:
        - "Development processes"
        - "Quality assurance workflows"
        - "Team collaboration patterns"
        - "Operational procedures"
      excludes:
        - "Individual preferences"
        - "Ad-hoc decisions"
        - "Experimental approaches"

  # ---------------------------------------------------------------------------
  # LAYER 5: INTEGRATION MESH (Cross-Cutting Context)
  # ---------------------------------------------------------------------------
  integration_level:
    name: "Integration Mesh Context"
    purpose: "Manages cross-cutting concerns and system interconnections"
    priority: 6
    token_budget: 800
    
    files:
      primary: ".claude/integration-context.md"
      supplementary:
        - ".claude/cross-cutting-concerns.md"
        - ".claude/system-boundaries.md"
        - ".claude/external-dependencies.md"
    
    content_types:
      - cross_cutting_concerns
      - system_integrations
      - external_dependencies
      - security_patterns
      - monitoring_approaches
      - error_handling_strategies
    
    inheritance:
      inherits_from_parent:
        - project_name
        - domain_vocabulary
        - coding_patterns
        - workflow_procedures
      provides_to_children:
        - integration_patterns
        - security_requirements
        - monitoring_standards
        - error_handling_approaches
      
    dependencies: ["project_level", "domain_level", "technical_level", "workflow_level"]
    
    scope_boundaries:
      includes:
        - "Cross-system interactions"
        - "Security considerations"
        - "Monitoring and observability"
        - "Error handling strategies"
      excludes:
        - "Layer-specific implementation"
        - "Internal component details"
        - "Temporary workarounds"

# =============================================================================
# CONTEXT RESOLUTION RULES
# =============================================================================
resolution_rules:
  
  # Context Loading Strategy
  loading_strategy:
    default: "lazy_hierarchical"  # Load parent contexts first, children on demand
    modes:
      minimal: ["project_level"]
      standard: ["project_level", "domain_level", "technical_level"]
      comprehensive: ["project_level", "domain_level", "technical_level", "workflow_level"]
      full: ["project_level", "domain_level", "technical_level", "workflow_level", "integration_level"]
  
  # Priority-Based Resolution
  priority_resolution:
    conflict_strategy: "higher_priority_wins"
    tie_breaker: "most_recent_modification"
    override_mechanism: "explicit_context_directives"
  
  # Token Budget Management
  token_management:
    total_budget: 8000  # Target total context tokens
    allocation_strategy: "priority_weighted"
    overflow_handling: "trim_lowest_priority"
    minimum_guaranteed: 500  # Per layer minimum
  
  # Dynamic Inheritance
  inheritance_resolution:
    strategy: "cascading_merge"
    conflict_resolution: "child_overrides_parent"
    circular_dependency_handling: "error_and_halt"

# =============================================================================
# CONTEXT QUALITY GATES
# =============================================================================
quality_gates:
  
  # Structural Validation
  structure_validation:
    required_files_exist: true
    yaml_syntax_valid: true
    markdown_structure_valid: true
    cross_reference_integrity: true
  
  # Content Quality
  content_quality:
    minimum_content_length: 100  # characters per section
    cross_references_resolved: true
    no_placeholder_content: true
    consistent_terminology: true
  
  # Integration Validation
  integration_validation:
    no_circular_dependencies: true
    inheritance_chain_valid: true
    token_budgets_respected: true
    priority_assignments_valid: true

# =============================================================================
# EVOLUTION AND MAINTENANCE
# =============================================================================
evolution_strategy:
  
  # Version Management
  versioning:
    scheme: "semantic"
    compatibility: "backward_compatible_minor"
    migration_support: true
  
  # Adaptation Triggers
  adaptation_triggers:
    project_evolution: "automatic_suggestion"
    framework_changes: "validation_required"
    team_growth: "manual_review_required"
    domain_expansion: "guided_restructure"
  
  # Maintenance Procedures
  maintenance:
    review_frequency: "monthly"
    optimization_cycle: "quarterly" 
    major_revision_cycle: "yearly"
    deprecated_content_cleanup: "automatic"

# =============================================================================
# PERFORMANCE OPTIMIZATION
# =============================================================================
performance:
  
  # Caching Strategy
  caching:
    inheritance_cache: true
    resolved_context_cache: true
    token_calculation_cache: true
    validation_result_cache: true
  
  # Lazy Loading
  lazy_loading:
    enabled: true
    load_triggers: ["explicit_reference", "inheritance_demand"]
    preload_strategy: "parent_contexts_only"
  
  # Optimization Techniques
  optimization:
    context_compression: true
    redundancy_elimination: true
    cross_reference_optimization: true
    token_usage_analytics: true

# =============================================================================
# END OF HIERARCHY DEFINITION
# =============================================================================
# This hierarchy provides the foundation for transforming consultation
# insights into a comprehensive, multi-file context system that gives
# Claude deep understanding of specific projects.