# Pattern Extraction Examples
# Purpose: Demonstrate high-quality pattern extraction with concrete examples
# Version: 1.0

extraction_examples:
  
  # Example 1: High-Quality Command Pattern
  example_1:
    pattern_type: "command"
    quality_level: "excellent"
    confidence_score: 0.87
    
    pattern_record:
      pattern_id: "pattern-commands-component-generator-20250807"
      category: "commands"
      subcategory: "generation_commands"
      name: "component-generator"
      description: "React component generation with TypeScript, tests, and storybook integration"
      
      evidence:
        sources:
          - repository: "claude-code-react-patterns"
            url: "https://github.com/example/claude-code-react-patterns"
            file_path: ".claude/commands/component.md"
            line_numbers: [1, 89]
            extracted_date: "2025-08-07T10:30:00Z"
            
          - repository: "nextjs-claude-automation"
            url: "https://github.com/example/nextjs-claude-automation" 
            file_path: ".claude/commands/generate-component.md"
            line_numbers: [1, 156]
            extracted_date: "2025-08-07T10:45:00Z"
            
          - repository: "react-testing-toolkit"
            url: "https://github.com/example/react-testing-toolkit"
            file_path: ".claude/commands/scaffold-component.md"
            line_numbers: [1, 203]
            extracted_date: "2025-08-07T11:00:00Z"
            
        validation:
          craap_scores:
            currency: 0.9      # Updated within 3 months
            relevance: 0.95    # Highly relevant to web development consultation
            authority: 0.8     # High-star repositories with active maintainers
            accuracy: 0.85     # Working examples with comprehensive tests
            purpose: 0.9       # Created for production use
          total_score: 0.88
          
        cross_references:
          - pattern_id: "pattern-commands-test-generator-20250807"
            relationship: "complements"
            description: "Component generator creates tests using test generator patterns"
            strength: 0.85
            
          - pattern_id: "pattern-workflows-tdd-development-20250807"
            relationship: "extends"
            description: "Implements TDD workflow for component creation"
            strength: 0.75
            
      implementation:
        code_snippet: |
          ---
          name: generate-component
          description: Generate React component with TypeScript, tests, and Storybook
          usage: "/generate-component [component-name] [component-type]"
          allowed-tools: [Read, Write, Edit, Bash, Glob]
          category: generation
          ---
          
          ## Overview
          Creates a complete React component with:
          - TypeScript interface
          - Jest/RTL test file  
          - Storybook stories
          - CSS modules
          - Export from index
          
          ## Implementation
          ```typescript
          // Generate component structure
          const componentTemplate = `
          import React from 'react';
          import styles from './${componentName}.module.css';
          
          interface ${componentName}Props {
            // Define props here
          }
          
          export const ${componentName}: React.FC<${componentName}Props> = (props) => {
            return (
              <div className={styles.container}>
                {/* Component content */}
              </div>
            );
          };
          ```
          
        language: "typescript"
        dependencies: ["React", "TypeScript", "Jest", "Storybook"]
        complexity: "moderate"
        
      effectiveness:
        metrics:
          adoption_rate: 0.78    # 78% of repositories use similar pattern
          success_rate: 0.92     # 92% report positive outcomes
          time_savings: "15-30 minutes per component"
          quality_improvement: "Consistent structure, better test coverage"
          
        user_feedback:
          positive_mentions: 45
          negative_mentions: 3
          neutral_mentions: 12
          sentiment_score: 0.75
          
      confidence:
        evidence_strength: 0.85      # 3 high-quality sources
        validation_confidence: 0.88  # Strong CRAAP scores
        implementation_confidence: 0.89 # Working examples, good docs
        overall_confidence: 0.87
        
    why_high_quality:
      - "Multiple evidence sources from different repositories"
      - "Working implementation examples with comprehensive documentation"
      - "Strong CRAAP validation scores across all criteria"
      - "Clear cross-references showing pattern relationships"
      - "Measurable effectiveness metrics with user validation"
      - "Addresses core consultation need: rapid quality code generation"
      
  # Example 2: Medium-Quality Agent Pattern  
  example_2:
    pattern_type: "agent"
    quality_level: "acceptable"
    confidence_score: 0.72
    
    pattern_record:
      pattern_id: "pattern-agents-code-reviewer-20250807"
      category: "agents"
      subcategory: "validation_agents"
      name: "code-review-agent"
      description: "Specialized agent for automated code quality review and feedback"
      
      evidence:
        sources:
          - repository: "claude-enterprise-setup"
            url: "https://github.com/example/claude-enterprise-setup"
            file_path: ".claude/agents/reviewer.md"
            line_numbers: [1, 124]
            extracted_date: "2025-08-07T14:20:00Z"
            
          - repository: "quality-assurance-claude"
            url: "https://github.com/example/quality-assurance-claude"
            file_path: ".claude/agents/code-quality.md"  
            line_numbers: [1, 89]
            extracted_date: "2025-08-07T14:35:00Z"
            
        validation:
          craap_scores:
            currency: 0.7     # Updated within 6 months
            relevance: 0.85   # Relevant to team workflow consultation
            authority: 0.65   # Medium-authority sources  
            accuracy: 0.8     # Good working examples
            purpose: 0.75     # Created for team productivity
          total_score: 0.75
          
        cross_references:
          - pattern_id: "pattern-workflows-pr-review-20250807"
            relationship: "requires"
            description: "Agent operates within PR review workflow"
            strength: 0.9
            
      implementation:
        code_snippet: |
          # Code Review Agent
          
          ## Role Definition
          Specialized agent for automated code quality review with focus on:
          - Code style consistency
          - Security vulnerability detection
          - Performance optimization suggestions
          - Documentation completeness
          
          ## Capabilities
          - Static code analysis
          - Security scanning
          - Performance profiling
          - Documentation validation
          
        language: "markdown"
        dependencies: ["ESLint", "SonarQube", "CodeClimate"]
        complexity: "moderate"
        
      effectiveness:
        metrics:
          adoption_rate: 0.45    # 45% adoption in enterprise contexts
          success_rate: 0.8      # 80% report improved code quality
          time_savings: "2-4 hours per week per developer"
          quality_improvement: "Consistent style, fewer bugs"
          
      confidence:
        evidence_strength: 0.6       # Only 2 sources but good quality
        validation_confidence: 0.75  # Good CRAAP scores  
        implementation_confidence: 0.8 # Clear examples and documentation
        overall_confidence: 0.72
        
    why_acceptable_quality:
      - "Meets minimum evidence requirements (2 sources for agents)"
      - "Good CRAAP validation with reasonable authority scores"
      - "Clear implementation examples and capability definitions"
      - "Addresses real consultation need: team workflow automation"
      - "Room for improvement: could use additional evidence sources"
      
  # Example 3: Low-Quality Pattern (Below Threshold)
  example_3:
    pattern_type: "context"
    quality_level: "below_threshold"
    confidence_score: 0.45
    rejection_reason: "insufficient_evidence"
    
    pattern_record:
      pattern_id: "pattern-context-token-optimizer-20250807"
      category: "context"
      subcategory: "token_optimization"
      name: "dynamic-context-loader"
      description: "System for dynamically loading context based on query relevance"
      
      evidence:
        sources:
          - repository: "experimental-claude-tools"
            url: "https://github.com/example/experimental-claude-tools"
            file_path: "docs/context-optimization.md"
            line_numbers: [45, 78]
            extracted_date: "2025-08-07T16:15:00Z"
            
        validation:
          craap_scores:
            currency: 0.3     # No updates in 18 months
            relevance: 0.8    # Highly relevant concept
            authority: 0.2    # Low-authority source (12 stars)
            accuracy: 0.6     # Theoretical examples, not tested
            purpose: 0.4      # Experimental/proof-of-concept
          total_score: 0.46
          
      implementation:
        code_snippet: |
          # Dynamic Context Loader (Concept)
          
          ## Theory
          Load only relevant context sections based on:
          - Query similarity matching
          - Historical usage patterns
          - Token budget optimization
          
          ## Status
          Experimental - not fully implemented
          
        language: "theoretical"
        dependencies: ["Similarity matching", "Usage analytics"]
        complexity: "complex"
        
      effectiveness:
        metrics:
          adoption_rate: 0.05    # Very limited adoption
          success_rate: 0.3      # Mixed results  
          time_savings: "Unknown - theoretical"
          quality_improvement: "Theoretical benefits only"
          
      confidence:
        evidence_strength: 0.2       # Single low-authority source
        validation_confidence: 0.46  # Poor CRAAP scores
        implementation_confidence: 0.3 # No working examples
        overall_confidence: 0.45
        
    why_rejected:
      - "Below minimum evidence requirements (only 1 source)"
      - "Source lacks authority (low stars, inactive maintenance)"
      - "No working implementation examples"
      - "Theoretical benefits not validated"
      - "Currency issues - outdated information"
      - "Overall confidence below 0.6 threshold"
      
  # Example 4: Excellent Workflow Pattern
  example_4:
    pattern_type: "workflow"  
    quality_level: "excellent"
    confidence_score: 0.91
    
    pattern_record:
      pattern_id: "pattern-workflows-tdd-consultation-20250807"
      category: "workflows"
      subcategory: "development_workflows"
      name: "test-driven-consultation-setup"
      description: "TDD workflow for setting up new projects with Claude Code"
      
      evidence:
        sources:
          - repository: "claude-testing-framework"
            url: "https://github.com/example/claude-testing-framework"
            file_path: "workflows/tdd-setup.md"
            line_numbers: [1, 234]
            extracted_date: "2025-08-07T12:00:00Z"
            
          - repository: "claude-enterprise-setup"
            url: "https://github.com/example/claude-enterprise-setup"
            file_path: "processes/project-initialization.md"
            line_numbers: [89, 156]
            extracted_date: "2025-08-07T12:15:00Z"
            
          - repository: "quality-assurance-claude"
            url: "https://github.com/example/quality-assurance-claude"  
            file_path: "workflows/quality-first-setup.md"
            line_numbers: [1, 178]
            extracted_date: "2025-08-07T12:30:00Z"
            
        validation:
          craap_scores:
            currency: 0.95    # Updated within last month
            relevance: 0.9     # Directly supports consultation goal
            authority: 0.85    # High-authority sources
            accuracy: 0.9      # Proven working examples
            purpose: 0.95      # Created specifically for production use
          total_score: 0.91
          
        cross_references:
          - pattern_id: "pattern-commands-test-generator-20250807"
            relationship: "requires"
            description: "Workflow uses test generation commands"
            strength: 0.9
            
          - pattern_id: "pattern-agents-quality-guardian-20250807"
            relationship: "complements"
            description: "Quality agent enforces TDD workflow"
            strength: 0.8
            
      implementation:
        code_snippet: |
          # TDD Consultation Setup Workflow
          
          ## Phase 1: Test-First Planning (5-8 minutes)
          1. Define success criteria as tests
          2. Create validation framework
          3. Establish quality gates
          
          ## Phase 2: Iterative Implementation (15-20 minutes)
          1. Write failing tests for next feature
          2. Implement minimal working solution
          3. Refactor for quality
          4. Validate against criteria
          
          ## Phase 3: Integration & Validation (5-7 minutes)
          1. Run comprehensive test suite
          2. Verify quality gates
          3. Document learnings
          
          ## Success Metrics
          - All tests pass: 100%
          - Code coverage: >90%
          - Quality gates: All green
          - Time to value: <5 minutes post-setup
          
        language: "process"
        dependencies: ["Testing framework", "Quality gates", "CI/CD"]
        complexity: "moderate"
        
      effectiveness:
        metrics:
          adoption_rate: 0.85    # 85% of teams use TDD-based setup
          success_rate: 0.95     # 95% report improved quality
          time_savings: "50-80% reduction in debugging time"
          quality_improvement: "90%+ test coverage, fewer production issues"
          
        user_feedback:
          positive_mentions: 127
          negative_mentions: 8
          neutral_mentions: 15
          sentiment_score: 0.85
          
      confidence:
        evidence_strength: 0.9       # 3 high-authority sources
        validation_confidence: 0.91  # Excellent CRAAP scores
        implementation_confidence: 0.92 # Proven working examples
        overall_confidence: 0.91
        
    why_excellent_quality:
      - "Multiple high-authority evidence sources with recent updates"
      - "Comprehensive working examples with measurable outcomes"
      - "Exceptional CRAAP validation scores (>0.9 overall)"
      - "Strong cross-references showing integration with other patterns"
      - "Proven effectiveness with quantified success metrics"
      - "Directly supports 30-60 minute consultation goal"
      - "High user satisfaction and adoption rates"
      
  # Example 5: Cross-Reference Pattern Demonstration
  example_5:
    pattern_type: "cross_reference_network"
    description: "Example of how high-quality patterns create reference networks"
    
    network_example:
      central_pattern: "pattern-workflows-tdd-consultation-20250807"
      
      connected_patterns:
        - pattern_id: "pattern-commands-test-generator-20250807"
          relationship: "requires"
          strength: 0.9
          description: "TDD workflow requires test generation capabilities"
          
        - pattern_id: "pattern-agents-quality-guardian-20250807"  
          relationship: "complements"
          strength: 0.8
          description: "Quality agent enforces TDD principles"
          
        - pattern_id: "pattern-context-project-memory-20250807"
          relationship: "extends"
          strength: 0.7
          description: "TDD decisions stored in project memory"
          
        - pattern_id: "pattern-commands-component-generator-20250807"
          relationship: "complements"
          strength: 0.85
          description: "Component generation follows TDD principles"
          
      network_strength: 0.8125  # Average of all relationship strengths
      
      why_strong_network:
        - "Multiple complementary relationships"
        - "Clear dependency chains"
        - "Mutual reinforcement of patterns"
        - "Comprehensive workflow coverage"

# Quality Guidelines Summary
quality_guidelines:
  minimum_requirements:
    evidence_sources: 3         # Commands/Context/Workflows need 3+
    evidence_sources_agents: 2  # Agents can have 2+ (they're rarer)
    confidence_score: 0.6
    craap_validation: "complete"
    cross_references: 2
    
  excellence_indicators:
    evidence_sources: 5
    confidence_score: 0.8
    working_examples: "required"
    community_validation: "positive"
    measurable_outcomes: "documented"
    
  rejection_criteria:
    confidence_below: 0.6
    evidence_insufficient: "below minimums"
    craap_poor: "accuracy < 0.6"
    no_working_examples: "theoretical only"
    
# Usage in Consultation System
consultation_integration:
  pattern_selection:
    - "High-confidence patterns (>0.8) get priority recommendation"
    - "Medium-confidence patterns (0.6-0.8) offered as options"
    - "Low-confidence patterns (<0.6) excluded from recommendations"
    
  evidence_presentation:
    - "Show evidence sources for transparency"
    - "Display confidence scores for user judgment"
    - "Provide working examples when available"
    - "Link to cross-referenced patterns for context"