# Claude Context Architect - Agent Specifications
# Specialized Agent Development Configuration

# =============================================================================
# AGENT ARCHITECTURE OVERVIEW
# =============================================================================
architecture:
  approach: "specialized_agents_over_generic_templates"
  development_philosophy: "project_specific_intelligence"
  coordination_model: "distributed_specialization_with_orchestration"
  
  core_principles:
    - "Each agent specializes in specific domain knowledge"
    - "Agent behavior adapts to discovered project patterns"
    - "Multi-agent coordination for complex task resolution"
    - "Continuous learning through project interaction"
    - "Performance monitoring and optimization"

# =============================================================================
# CORE AGENT SPECIFICATIONS
# =============================================================================
agents:
  # ---------------------------------------------------------------------------
  # ARCHITECTURE ANALYZER AGENT
  # ---------------------------------------------------------------------------
  architecture_analyzer:
    id: "arch_analyzer_001"
    name: "Architecture Analyzer"
    specialization: "Technical architecture patterns and conventions"
    
    core_capabilities:
      - "Framework-specific pattern recognition and recommendation"
      - "Architecture pattern validation for discovered tech stack"
      - "Performance optimization suggestions based on project scale"
      - "Integration guidance for detected ecosystem components"
      
    specialization_inputs:
      - "Detected framework usage patterns from research"
      - "Architecture complexity assessment from consultation"
      - "Integration patterns from repository analysis"
      - "Performance requirements from project discovery"
      
    knowledge_domains:
      - "Framework conventions and best practices"
      - "Architecture patterns and design principles"
      - "Performance optimization strategies"
      - "Integration and deployment patterns"
      
    output_capabilities:
      - "Framework-specific architectural recommendations"
      - "Code organization and structure guidance"
      - "Performance optimization suggestions"
      - "Integration pattern recommendations"
      
    development_priority: "high"
    dependencies: ["research_complete", "consultation_technical_complete"]

  # ---------------------------------------------------------------------------
  # DOMAIN EXPERT AGENT
  # ---------------------------------------------------------------------------
  domain_expert:
    id: "domain_expert_001"
    name: "Domain Expert"
    specialization: "Business domain knowledge and terminology"
    
    core_capabilities:
      - "Domain-specific terminology and concept assistance"
      - "Business rule validation and implementation guidance"
      - "User journey optimization for discovered domain"
      - "Domain pattern recognition and recommendation"
      
    specialization_inputs:
      - "Business domain identification from consultation"
      - "Domain terminology extraction from project analysis"
      - "Business rule patterns from code analysis"
      - "User workflow patterns from discovery"
      
    knowledge_domains:
      - "Industry-specific business rules and patterns"
      - "Domain terminology and concept relationships"
      - "User journey and workflow optimization"
      - "Business logic implementation patterns"
      
    output_capabilities:
      - "Domain-specific implementation guidance"
      - "Business rule validation and optimization"
      - "User experience improvement suggestions"
      - "Domain pattern application recommendations"
      
    development_priority: "high"
    dependencies: ["consultation_domain_complete", "research_domain_patterns"]

  # ---------------------------------------------------------------------------
  # PATTERN DETECTIVE AGENT
  # ---------------------------------------------------------------------------
  pattern_detective:
    id: "pattern_detective_001"
    name: "Pattern Detective"
    specialization: "Code patterns, conventions, and anti-patterns"
    
    core_capabilities:
      - "Code pattern recognition specific to project conventions"
      - "Refactoring suggestions based on established patterns"
      - "Anti-pattern detection tuned to common project pitfalls"
      - "Style guide enforcement aligned with team preferences"
      
    specialization_inputs:
      - "Existing code patterns from project analysis"
      - "Team coding style preferences from consultation"
      - "Historical refactoring patterns from git analysis"
      - "Anti-patterns specific to domain/framework from research"
      
    knowledge_domains:
      - "Code pattern recognition and analysis"
      - "Refactoring strategies and techniques"
      - "Anti-pattern identification and remediation"
      - "Code style and convention enforcement"
      
    output_capabilities:
      - "Pattern-based code suggestions"
      - "Refactoring recommendations"
      - "Anti-pattern warnings and alternatives"
      - "Style consistency enforcement"
      
    development_priority: "high"
    dependencies: ["research_patterns_complete", "consultation_preferences_complete"]

  # ---------------------------------------------------------------------------
  # WORKFLOW OPTIMIZER AGENT
  # ---------------------------------------------------------------------------
  workflow_optimizer:
    id: "workflow_optimizer_001"
    name: "Workflow Optimizer"
    specialization: "Development workflows and process automation"
    
    core_capabilities:
      - "Workflow automation suggestions for specific development process"
      - "Tool integration recommendations based on discovered tech stack"
      - "Process optimization tuned to team size and structure"
      - "Deployment guidance aligned with infrastructure patterns"
      
    specialization_inputs:
      - "Current development workflow from consultation"
      - "Team collaboration preferences from discovery"
      - "Automation opportunities from toolchain analysis"
      - "Deployment process characteristics from research"
      
    knowledge_domains:
      - "Development workflow optimization strategies"
      - "Tool integration and automation patterns"
      - "Team collaboration and communication optimization"
      - "Deployment and CI/CD process improvement"
      
    output_capabilities:
      - "Workflow automation recommendations"
      - "Tool integration guidance"
      - "Process efficiency improvements"
      - "Deployment optimization suggestions"
      
    development_priority: "medium"
    dependencies: ["consultation_workflow_complete", "research_tooling_complete"]

  # ---------------------------------------------------------------------------
  # QUALITY GUARDIAN AGENT
  # ---------------------------------------------------------------------------
  quality_guardian:
    id: "quality_guardian_001"
    name: "Quality Guardian"
    specialization: "Code quality, testing, and reliability standards"
    
    core_capabilities:
      - "Testing strategy optimization for discovered architecture"
      - "Quality metric recommendations aligned with project goals"
      - "Code review automation tuned to team standards"
      - "Performance monitoring suggestions for project scale"
      
    specialization_inputs:
      - "Current testing strategy from project analysis"
      - "Quality metrics and standards from consultation"
      - "Code review processes from workflow discovery"
      - "Performance and reliability requirements from research"
      
    knowledge_domains:
      - "Testing strategy design and optimization"
      - "Quality metrics and measurement techniques"
      - "Code review process automation"
      - "Performance monitoring and reliability patterns"
      
    output_capabilities:
      - "Testing strategy recommendations"
      - "Quality assurance process improvements"
      - "Code review automation suggestions"
      - "Performance monitoring guidance"
      
    development_priority: "medium"
    dependencies: ["consultation_quality_complete", "research_testing_patterns"]

  # ---------------------------------------------------------------------------
  # RESEARCH VALIDATOR AGENT
  # ---------------------------------------------------------------------------
  research_validator:
    id: "research_validator_001"
    name: "Research Validator"
    specialization: "Evidence validation and research quality assurance"
    
    core_capabilities:
      - "Research validation tuned to domain authority standards"
      - "Source credibility assessment for industry context"
      - "Evidence cross-referencing aligned with project requirements"
      - "Confidence scoring calibrated to project risk tolerance"
      
    specialization_inputs:
      - "Research patterns from domain analysis"
      - "Evidence standards for project industry"
      - "Source authority requirements from consultation"
      - "Risk tolerance and decision-making patterns"
      
    knowledge_domains:
      - "Research validation methodologies"
      - "Source credibility assessment techniques"
      - "Evidence cross-referencing strategies"
      - "Confidence scoring and risk assessment"
      
    output_capabilities:
      - "Research quality validation"
      - "Source credibility assessments"
      - "Evidence-based recommendations"
      - "Risk-calibrated confidence scoring"
      
    development_priority: "high"
    dependencies: ["research_methodology_complete", "consultation_risk_complete"]

# =============================================================================
# AGENT DEVELOPMENT FRAMEWORK
# =============================================================================
development_framework:
  # Template system for agent creation
  template_system:
    base_template: "specialized_agent_base.md"
    customization_points:
      - "Specialization knowledge base"
      - "Input processing patterns"
      - "Output generation templates"
      - "Performance optimization rules"
      
  # Capability boundaries and limitations
  capability_boundaries:
    strict_specialization: true
    cross_domain_coordination: "via_orchestration_only"
    learning_scope: "within_specialization_domain"
    resource_limits: "token_optimized"
    
  # Communication protocols between agents
  communication_protocols:
    message_format: "structured_yaml"
    coordination_method: "orchestrator_mediated"
    conflict_resolution: "evidence_based_with_escalation"
    result_sharing: "context_aware_formatting"
    
  # Performance optimization strategies
  performance_optimization:
    token_efficiency: "specialization_focused_context"
    response_speed: "cached_pattern_recognition"
    resource_usage: "lazy_loading_knowledge_base"
    quality_metrics: "domain_specific_validation"

# =============================================================================
# AGENT ORCHESTRATION SYSTEM
# =============================================================================
orchestration:
  # Task routing algorithms
  task_routing:
    routing_strategy: "capability_matching_with_load_balancing"
    complexity_assessment: "multi_factor_analysis"
    agent_availability: "real_time_monitoring"
    success_probability: "historical_performance_based"
    
  # Parallel execution coordination
  parallel_execution:
    coordination_model: "distributed_with_sync_points"
    dependency_resolution: "automated_with_validation"
    resource_allocation: "dynamic_based_on_complexity"
    result_aggregation: "weighted_by_confidence_scores"
    
  # Conflict resolution protocols
  conflict_resolution:
    resolution_hierarchy:
      - "Evidence-based automatic resolution"
      - "Expertise-weighted voting"
      - "Research validator arbitration"
      - "User-mediated final decision"
      
    confidence_thresholds:
      high_confidence: 0.9
      medium_confidence: 0.7
      low_confidence: 0.5
      conflict_threshold: 0.3
      
  # Result aggregation and synthesis
  result_aggregation:
    aggregation_methods:
      - "Weighted consensus based on expertise"
      - "Evidence strength prioritization"
      - "User preference alignment"
      - "Project context relevance"
      
    quality_validation:
      consistency_check: true
      completeness_validation: true
      relevance_scoring: true
      user_value_assessment: true

# =============================================================================
# AGENT SPECIALIZATION STRATEGY
# =============================================================================
specialization_strategy:
  # Dynamic specialization based on project characteristics
  dynamic_adaptation:
    framework_specialization:
      react: "React-specific patterns and conventions"
      vue: "Vue.js ecosystem and composition patterns"
      angular: "Angular architecture and dependency injection"
      node: "Node.js backend patterns and performance"
      python: "Python conventions and framework patterns"
      
    domain_specialization:
      ecommerce: "E-commerce business rules and user journeys"
      fintech: "Financial regulations and security patterns"
      healthcare: "Healthcare compliance and data privacy"
      education: "Educational content and learning patterns"
      saas: "SaaS architecture and multi-tenancy patterns"
      
    scale_specialization:
      startup: "Rapid iteration and MVP-focused patterns"
      enterprise: "Scalability, reliability, and compliance focus"
      open_source: "Community-driven development patterns"
      consulting: "Client-specific and adaptable patterns"
      
  # Learning and improvement mechanisms
  continuous_learning:
    pattern_recognition_improvement: "Based on successful recommendations"
    specialization_refinement: "Through project interaction feedback"
    knowledge_base_expansion: "Via validated research integration"
    performance_optimization: "Through usage pattern analysis"
    
  # Quality assurance for specialization
  specialization_validation:
    accuracy_measurement: "Recommendation success rate tracking"
    relevance_assessment: "User satisfaction and adoption rates"
    consistency_monitoring: "Cross-recommendation coherence checking"
    improvement_tracking: "Performance metrics over time"

# =============================================================================
# AGENT PERFORMANCE MONITORING
# =============================================================================
performance_monitoring:
  # Key performance indicators for each agent
  agent_kpis:
    effectiveness_metrics:
      - "Task success rate (percentage of successful completions)"
      - "User satisfaction rating (1-5 scale for recommendations)"
      - "Adoption rate (percentage of recommendations implemented)"
      - "Time to value (speed of useful recommendation delivery)"
      
    efficiency_metrics:
      - "Response time (average time to generate recommendations)"
      - "Token utilization (efficiency of context usage)"
      - "Resource consumption (computational resource usage)"
      - "Coordination overhead (time spent in multi-agent coordination)"
      
    quality_metrics:
      - "Accuracy rate (correctness of domain-specific recommendations)"
      - "Relevance score (alignment with project patterns)"
      - "Consistency rating (coherence across multiple interactions)"
      - "Learning improvement (performance enhancement over time)"
      
  # Monitoring and alerting systems
  monitoring_systems:
    real_time_dashboards: "Agent performance and health monitoring"
    automated_alerts: "Performance degradation and failure detection"
    usage_analytics: "Pattern analysis and optimization opportunities"
    feedback_integration: "User feedback incorporation into performance metrics"
    
  # Optimization and improvement processes
  optimization_processes:
    performance_tuning: "Regular optimization based on metrics"
    knowledge_base_updates: "Continuous learning integration"
    specialization_refinement: "Fine-tuning based on project feedback"
    coordination_improvement: "Multi-agent orchestration enhancement"

# =============================================================================
# INTEGRATION WITH CONSULTATION PHASES
# =============================================================================
consultation_integration:
  # Phase-specific agent activation
  phase_activation:
    research_phase:
      active_agents: ["research_validator"]
      coordination_level: "minimal"
      
    consultation_phase:
      active_agents: ["architecture_analyzer", "domain_expert", "workflow_optimizer"]
      coordination_level: "collaborative"
      
    generation_phase:
      active_agents: ["all_agents"]
      coordination_level: "full_orchestration"
      
  # Agent contribution to consultation phases
  phase_contributions:
    research_phase:
      research_validator: "Validate research quality and evidence strength"
      
    consultation_phase:
      architecture_analyzer: "Technical architecture questioning and validation"
      domain_expert: "Business domain exploration and terminology extraction"
      workflow_optimizer: "Development process and workflow discovery"
      
    generation_phase:
      all_agents: "Collaborative generation with specialized expertise"
      quality_guardian: "Quality assurance for all generated artifacts"
      pattern_detective: "Pattern consistency across generated components"

# =============================================================================
# SUCCESS CRITERIA FOR AGENT DEVELOPMENT
# =============================================================================
success_criteria:
  # Quantitative success metrics
  quantitative_metrics:
    agent_count: "6+ specialized agents operational"
    success_rate: ">90% task completion rate"
    coordination_efficiency: "<10% conflict rate with effective resolution"
    user_satisfaction: ">4.0/5 average satisfaction rating"
    
  # Qualitative success indicators
  qualitative_indicators:
    specialization_depth: "Agents demonstrate deep domain expertise"
    project_alignment: "Agent behavior aligns with project patterns"
    coordination_effectiveness: "Multi-agent tasks complete smoothly"
    learning_capability: "Agents improve through project interaction"
    
  # Integration success measures
  integration_success:
    consultation_enhancement: "Agents improve consultation quality"
    generation_quality: "Agent-generated artifacts meet standards"
    user_experience: "Agent interactions feel natural and helpful"
    system_performance: "Agent coordination doesn't degrade performance"

# =============================================================================
# FUTURE AGENT EXPANSION
# =============================================================================
future_expansion:
  # Additional agent types for specific domains
  potential_agents:
    security_specialist: "Security patterns and vulnerability analysis"
    performance_optimizer: "Performance monitoring and optimization"
    documentation_curator: "Documentation generation and maintenance"
    migration_specialist: "Legacy system migration and modernization"
    compliance_auditor: "Regulatory compliance and audit preparation"
    
  # Scalability considerations
  scalability_planning:
    agent_lifecycle_management: "Dynamic agent creation and retirement"
    knowledge_base_scaling: "Distributed knowledge management"
    coordination_complexity: "Hierarchical orchestration patterns"
    resource_optimization: "Efficient resource allocation at scale"

# =============================================================================
# END OF AGENT SPECIFICATIONS
# =============================================================================