name: Claude Code Framework Validation

on:
  push:
    branches: [ main, develop ]
    paths: 
      - '.claude/**'
      - 'CLAUDE.md'
      - 'PROJECT_CONFIG.xml'
  pull_request:
    branches: [ main ]
    paths:
      - '.claude/**'
      - 'CLAUDE.md'
      - 'PROJECT_CONFIG.xml'
  schedule:
    # Run framework validation daily at 04:00 UTC
    - cron: '0 4 * * *'
  workflow_dispatch:

env:
  FRAMEWORK_VERSION: "3.0.0"

jobs:
  # Framework structure validation
  framework-structure:
    name: Framework Structure Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate CLAUDE.md
        run: |
          echo "üìã Validating CLAUDE.md"
          echo "======================="
          
          if [ ! -f "CLAUDE.md" ]; then
            echo "‚ùå CLAUDE.md not found"
            exit 1
          fi
          
          # Check for required sections
          required_sections=(
            "# CLAUDE.md - Framework Control Document"
            "# Overview"
            "# Command Status"
            "# Quality Gates"
            "# Architecture"
          )
          
          for section in "${required_sections[@]}"; do
            if ! grep -q "$section" CLAUDE.md; then
              echo "‚ùå Missing required section: $section"
              exit 1
            fi
            echo "‚úÖ Found section: $section"
          done
          
          # Check framework version
          if ! grep -q "version.*$FRAMEWORK_VERSION" CLAUDE.md; then
            echo "‚ö†Ô∏è  Framework version $FRAMEWORK_VERSION not found in CLAUDE.md"
          else
            echo "‚úÖ Framework version $FRAMEWORK_VERSION found"
          fi
          
          echo "‚úÖ CLAUDE.md validation passed"
          
      - name: Validate .claude directory structure
        run: |
          echo "üìÅ Validating .claude directory structure"
          echo "========================================"
          
          if [ ! -d ".claude" ]; then
            echo "‚ùå .claude directory not found"
            exit 1
          fi
          
          # Required top-level directories
          required_dirs=(
            ".claude/commands"
            ".claude/modules"
            ".claude/system"
            ".claude/prompt_eng"
          )
          
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing required directory: $dir"
              exit 1
            fi
            echo "‚úÖ Found directory: $dir"
          done
          
          # Count commands and modules
          command_count=$(find .claude/commands -name "*.md" | wc -l)
          module_count=$(find .claude/modules -name "*.md" | wc -l)
          
          echo "üìä Framework Statistics:"
          echo "  Commands: $command_count"
          echo "  Modules: $module_count"
          
          if [ $command_count -lt 10 ]; then
            echo "‚ö†Ô∏è  Low command count: $command_count (expected 15+)"
          fi
          
          if [ $module_count -lt 20 ]; then
            echo "‚ö†Ô∏è  Low module count: $module_count (expected 40+)"
          fi
          
          echo "‚úÖ .claude directory structure validated"
          
      - name: Validate PROJECT_CONFIG.xml
        run: |
          echo "üìÑ Validating PROJECT_CONFIG.xml"
          echo "==============================="
          
          if [ ! -f "PROJECT_CONFIG.xml" ]; then
            echo "‚ùå PROJECT_CONFIG.xml not found"
            exit 1
          fi
          
          # Install Python for XML validation
          python3 -c "
          import xml.etree.ElementTree as ET
          import sys

          try:
              tree = ET.parse('PROJECT_CONFIG.xml')
              root = tree.getroot()
              print('‚úÖ PROJECT_CONFIG.xml is valid XML')
              
              # Check for required elements
              required_elements = ['project_info', 'tech_stack', 'commands', 'quality_standards']
              for element in required_elements:
                  if root.find(f'.//{element}') is not None:
                      print(f'‚úÖ Found element: {element}')
                  else:
                      print(f'‚ö†Ô∏è  Missing element: {element}')
              
          except ET.ParseError as e:
              print(f'‚ùå XML parse error: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'‚ùå Validation error: {e}')
              sys.exit(1)
          "

  # Command validation
  command-validation:
    name: Command Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate core commands
        run: |
          echo "‚ö° Validating Core Commands"
          echo "=========================="
          
          # Core commands that must exist
          core_commands=(
            "auto"
            "task"
            "feature"
            "query"
            "swarm"
            "session"
            "protocol"
            "docs"
            "init"
          )
          
          for cmd in "${core_commands[@]}"; do
            if [ -f ".claude/commands/${cmd}.md" ]; then
              echo "‚úÖ Found core command: $cmd"
              
              # Check command structure
              if ! grep -q "# Command:" ".claude/commands/${cmd}.md"; then
                echo "‚ö†Ô∏è  Command $cmd missing proper header"
              fi
              
              if ! grep -q "## Purpose" ".claude/commands/${cmd}.md"; then
                echo "‚ö†Ô∏è  Command $cmd missing Purpose section"
              fi
              
            else
              echo "‚ùå Missing core command: $cmd"
              exit 1
            fi
          done
          
          echo "‚úÖ Core commands validation passed"
          
      - name: Validate meta commands
        run: |
          echo "üîÑ Validating Meta Commands"
          echo "=========================="
          
          # Meta commands for framework evolution
          meta_commands=(
            "meta-review"
            "meta-evolve"
            "meta-optimize"
            "meta-govern"
            "meta-fix"
          )
          
          meta_found=0
          for cmd in "${meta_commands[@]}"; do
            if [ -f ".claude/commands/${cmd}.md" ]; then
              echo "‚úÖ Found meta command: $cmd"
              ((meta_found++))
            else
              echo "‚ÑπÔ∏è  Meta command not found: $cmd"
            fi
          done
          
          echo "üìä Meta commands found: $meta_found/${#meta_commands[@]}"
          
          if [ $meta_found -lt 3 ]; then
            echo "‚ö†Ô∏è  Low meta command coverage"
          else
            echo "‚úÖ Good meta command coverage"
          fi

  # Module validation
  module-validation:
    name: Module Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate module categories
        run: |
          echo "üì¶ Validating Module Categories"
          echo "=============================="
          
          # Required module categories
          categories=(
            "patterns"
            "development"
            "meta"
          )
          
          for category in "${categories[@]}"; do
            if [ -d ".claude/modules/$category" ]; then
              echo "‚úÖ Found module category: $category"
              
              # Count modules in category
              module_count=$(find ".claude/modules/$category" -name "*.md" | wc -l)
              echo "  üìä Modules in $category: $module_count"
              
            else
              echo "‚ùå Missing module category: $category"
              exit 1
            fi
          done
          
      - name: Validate system modules
        run: |
          echo "‚öôÔ∏è  Validating System Modules"
          echo "============================"
          
          if [ ! -d ".claude/system" ]; then
            echo "‚ùå System directory not found"
            exit 1
          fi
          
          # Required system categories
          system_categories=(
            "quality"
            "security"
            "context"
            "session"
          )
          
          for category in "${system_categories[@]}"; do
            if [ -d ".claude/system/$category" ]; then
              echo "‚úÖ Found system category: $category"
            else
              echo "‚ö†Ô∏è  Missing system category: $category"
            fi
          done
          
      - name: Check module documentation
        run: |
          echo "üìö Checking Module Documentation"
          echo "==============================="
          
          # Find all module files
          module_files=$(find .claude/modules -name "*.md")
          undocumented=0
          
          for module in $module_files; do
            # Check if module has proper documentation
            if ! grep -q "# Module:" "$module" && ! grep -q "## Purpose" "$module"; then
              echo "‚ö†Ô∏è  Underdocumented module: $module"
              ((undocumented++))
            fi
          done
          
          total_modules=$(echo "$module_files" | wc -l)
          documented=$((total_modules - undocumented))
          
          echo "üìä Documentation Coverage:"
          echo "  Total modules: $total_modules"
          echo "  Documented: $documented"
          echo "  Underdocumented: $undocumented"
          
          if [ $undocumented -gt $((total_modules / 4)) ]; then
            echo "‚ö†Ô∏è  High number of underdocumented modules"
          else
            echo "‚úÖ Good documentation coverage"
          fi

  # Quality gates validation
  quality-validation:
    name: Quality Gates Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate quality gate definitions
        run: |
          echo "üö¶ Validating Quality Gates"
          echo "=========================="
          
          # Check if quality gates are defined in CLAUDE.md
          if ! grep -q "Quality Gates" CLAUDE.md; then
            echo "‚ùå Quality Gates section not found in CLAUDE.md"
            exit 1
          fi
          
          # Check for TDD enforcement
          if ! grep -q "TDD" CLAUDE.md; then
            echo "‚ö†Ô∏è  TDD enforcement not clearly defined"
          else
            echo "‚úÖ TDD enforcement found"
          fi
          
          # Check for coverage requirements
          if ! grep -q "coverage" CLAUDE.md; then
            echo "‚ö†Ô∏è  Coverage requirements not clearly defined"
          else
            echo "‚úÖ Coverage requirements found"
          fi
          
          echo "‚úÖ Quality gates validation completed"
          
      - name: Check atomic rollback protocol
        run: |
          echo "üîÑ Checking Atomic Rollback Protocol"
          echo "==================================="
          
          if grep -q "Atomic.*Rollback" CLAUDE.md; then
            echo "‚úÖ Atomic rollback protocol found"
          else
            echo "‚ö†Ô∏è  Atomic rollback protocol not clearly defined"
          fi
          
          if grep -q "git.*commit" CLAUDE.md; then
            echo "‚úÖ Git commit strategy found"
          else
            echo "‚ö†Ô∏è  Git commit strategy not defined"
          fi

  # Framework integration validation
  integration-validation:
    name: Framework Integration Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate command-module integration
        run: |
          echo "üîó Validating Command-Module Integration"
          echo "======================================="
          
          # Check if commands reference modules
          command_files=$(find .claude/commands -name "*.md")
          commands_with_modules=0
          
          for cmd_file in $command_files; do
            if grep -q "modules/" "$cmd_file"; then
              ((commands_with_modules++))
            fi
          done
          
          total_commands=$(echo "$command_files" | wc -l)
          echo "üìä Integration Statistics:"
          echo "  Total commands: $total_commands"
          echo "  Commands with module references: $commands_with_modules"
          
          if [ $commands_with_modules -lt $((total_commands / 2)) ]; then
            echo "‚ö†Ô∏è  Low command-module integration"
          else
            echo "‚úÖ Good command-module integration"
          fi
          
      - name: Check cross-references
        run: |
          echo "üîç Checking Cross-References"
          echo "==========================="
          
          # Find broken internal references
          echo "Checking for broken .claude/ references..."
          
          # This is a basic check - could be enhanced
          if grep -r "\.claude/" . --include="*.md" | grep -v "File does not exist"; then
            echo "‚úÖ Found .claude/ references"
          else
            echo "‚ö†Ô∏è  No .claude/ references found"
          fi

  # Framework summary
  framework-summary:
    name: Framework Validation Summary
    runs-on: ubuntu-latest
    needs: [framework-structure, command-validation, module-validation, quality-validation, integration-validation]
    if: always()
    steps:
      - name: Framework validation summary
        run: |
          echo "üèõÔ∏è  Claude Code Framework Validation Summary"
          echo "============================================"
          echo ""
          echo "Framework Version: $FRAMEWORK_VERSION"
          echo "Validation Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo ""
          
          # Check results of each validation job
          if [ "${{ needs.framework-structure.result }}" == "success" ]; then
            echo "‚úÖ Framework structure: VALID"
          else
            echo "‚ùå Framework structure: INVALID"
          fi
          
          if [ "${{ needs.command-validation.result }}" == "success" ]; then
            echo "‚úÖ Command validation: PASSED"
          else
            echo "‚ùå Command validation: FAILED"
          fi
          
          if [ "${{ needs.module-validation.result }}" == "success" ]; then
            echo "‚úÖ Module validation: PASSED"
          else
            echo "‚ùå Module validation: FAILED"
          fi
          
          if [ "${{ needs.quality-validation.result }}" == "success" ]; then
            echo "‚úÖ Quality validation: PASSED"
          else
            echo "‚ùå Quality validation: FAILED"
          fi
          
          if [ "${{ needs.integration-validation.result }}" == "success" ]; then
            echo "‚úÖ Integration validation: PASSED"
          else
            echo "‚ùå Integration validation: FAILED"
          fi
          
          echo ""
          
          # Overall framework health
          if [ "${{ needs.framework-structure.result }}" == "success" ] && \
             [ "${{ needs.command-validation.result }}" == "success" ] && \
             [ "${{ needs.module-validation.result }}" == "success" ] && \
             [ "${{ needs.quality-validation.result }}" == "success" ] && \
             [ "${{ needs.integration-validation.result }}" == "success" ]; then
            echo "üéâ Overall Framework Status: HEALTHY"
            echo "All framework validations passed successfully."
            echo "Framework is ready for production use."
          else
            echo "‚ö†Ô∏è  Overall Framework Status: ISSUES DETECTED"
            echo "Some framework validations failed."
            echo "Please review the issues above before production deployment."
          fi
          
          echo ""
          echo "üìã Framework Recommendations:"
          echo "- Keep framework documentation up to date"
          echo "- Regularly validate command-module integration"
          echo "- Ensure quality gates are properly enforced"
          echo "- Monitor framework evolution and versioning"