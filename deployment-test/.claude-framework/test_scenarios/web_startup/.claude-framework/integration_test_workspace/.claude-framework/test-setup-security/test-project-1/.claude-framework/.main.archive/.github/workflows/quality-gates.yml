name: Quality Gates Enforcement
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  MUTATION_SCORE_THRESHOLD: 70
  COVERAGE_THRESHOLD: 95
  PERFORMANCE_THRESHOLD_MS: 100

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        # Mutation testing tools
        pip install mutmut pytest-cov pytest-xdist
        # Security scanning
        pip install bandit safety
        # Performance testing  
        pip install pytest-benchmark
        # AI bias testing
        pip install fairlearn aif360
    
    # Gate 1: Unit Testing Excellence
    - name: "üß™ Gate 1: Unit Testing Excellence"
      run: |
        echo "::group::Running Unit Tests with Coverage"
        python -m pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} \
          --junitxml=test-results.xml \
          -n auto \
          --tb=short
        echo "::endgroup::"
    
    - name: "üî¨ Mutation Testing (MuTAP Enhanced)"
      run: |
        echo "::group::Executing Mutation Testing"
        # Create mutation testing configuration
        cat > mutation_config.ini << EOF
        [mutmut]
        paths_to_mutate=src/
        backup=False
        runner=python -m pytest tests/ -x --tb=no -q
        tests_dir=tests/
        EOF
        
        # Run mutation testing
        mutmut run --paths-to-mutate=src/ 2>&1 | tee mutation_output.txt
        
        # Calculate mutation score
        KILLED=$(grep -o "killed" mutation_output.txt | wc -l)
        TOTAL=$(grep -o -E "(killed|survived|timeout)" mutation_output.txt | wc -l)
        
        if [ $TOTAL -gt 0 ]; then
          MUTATION_SCORE=$((KILLED * 100 / TOTAL))
          echo "Mutation Score: $MUTATION_SCORE%"
          
          if [ $MUTATION_SCORE -lt ${{ env.MUTATION_SCORE_THRESHOLD }} ]; then
            echo "‚ùå Mutation score $MUTATION_SCORE% below threshold ${{ env.MUTATION_SCORE_THRESHOLD }}%"
            exit 1
          else
            echo "‚úÖ Mutation score $MUTATION_SCORE% meets threshold"
          fi
        else
          echo "‚ö†Ô∏è No mutations found or executed"
        fi
        echo "::endgroup::"
    
    # Gate 2: Integration Testing
    - name: "üîó Gate 2: Integration Testing"
      run: |
        echo "::group::Integration Testing"
        python -m pytest tests/integration/ \
          --tb=short \
          --strict-markers \
          --disable-warnings
        echo "::endgroup::"
    
    # Gate 3: AI-Specific Quality
    - name: "ü§ñ Gate 3: AI-Specific Quality"
      run: |
        echo "::group::AI Quality Assessment"
        # Prompt coverage analysis
        python scripts/analyze_prompt_coverage.py
        
        # Behavioral consistency testing
        python scripts/test_behavioral_consistency.py
        
        # Bias detection
        python scripts/detect_bias.py --threshold=5
        echo "::endgroup::"
    
    # Gate 4: Security & Compliance
    - name: "üîí Gate 4: Security & Compliance"
      run: |
        echo "::group::Security Scanning"
        # Static security analysis
        bandit -r src/ -f json -o bandit-report.json
        
        # Dependency vulnerability check
        safety check --json --output safety-report.json
        
        # Check for secrets
        pip install detect-secrets
        detect-secrets scan --all-files --baseline .secrets.baseline
        echo "::endgroup::"
    
    # Gate 5: Performance & Scalability  
    - name: "‚ö° Gate 5: Performance & Scalability"
      run: |
        echo "::group::Performance Testing"
        python -m pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark.json \
          --benchmark-max-time=${{ env.PERFORMANCE_THRESHOLD_MS }}ms
        echo "::endgroup::"
    
    # Gate 6: Production Readiness
    - name: "üöÄ Gate 6: Production Readiness"
      run: |
        echo "::group::Production Readiness Check"
        # Check for required documentation
        python scripts/check_documentation.py
        
        # Validate monitoring configuration
        python scripts/validate_monitoring.py
        
        # Check deployment configuration
        python scripts/validate_deployment_config.py
        echo "::endgroup::"
    
    # AI-Enhanced Quality Analysis
    - name: "üß† AI-Enhanced Quality Analysis"
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "::group::AI Quality Analysis"
        python scripts/ai_quality_analysis.py \
          --coverage-report=htmlcov/index.html \
          --mutation-report=mutation_output.txt \
          --test-results=test-results.xml \
          --security-report=bandit-report.json \
          --performance-report=benchmark.json
        echo "::endgroup::"
    
    # Generate Quality Report
    - name: "üìä Generate Quality Dashboard"
      run: |
        echo "::group::Generating Quality Report"
        python scripts/generate_quality_report.py \
          --output=quality-report.html \
          --format=html,json \
          --include-trends \
          --include-recommendations
        echo "::endgroup::"
    
    # Upload Artifacts
    - name: Upload Quality Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: quality-reports-${{ matrix.python-version }}
        path: |
          htmlcov/
          quality-report.html
          quality-report.json
          test-results.xml
          bandit-report.json
          safety-report.json
          benchmark.json
          mutation_output.txt
    
    # Comment on PR with Results
    - name: Comment PR with Quality Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read quality report
          let qualityData = {};
          try {
            qualityData = JSON.parse(fs.readFileSync('quality-report.json', 'utf8'));
          } catch (e) {
            console.log('No quality report found');
            return;
          }
          
          const comment = `## üõ°Ô∏è Quality Gates Report
          
          | Gate | Status | Score | Threshold |
          |------|--------|-------|-----------|
          | Unit Testing | ${qualityData.coverage >= ${{ env.COVERAGE_THRESHOLD }} ? '‚úÖ' : '‚ùå'} | ${qualityData.coverage}% | ${{ env.COVERAGE_THRESHOLD }}% |
          | Mutation Testing | ${qualityData.mutation_score >= ${{ env.MUTATION_SCORE_THRESHOLD }} ? '‚úÖ' : '‚ùå'} | ${qualityData.mutation_score}% | ${{ env.MUTATION_SCORE_THRESHOLD }}% |
          | Security | ${qualityData.security_issues === 0 ? '‚úÖ' : '‚ùå'} | ${qualityData.security_issues} issues | 0 critical |
          | Performance | ${qualityData.performance_ms <= ${{ env.PERFORMANCE_THRESHOLD_MS }} ? '‚úÖ' : '‚ùå'} | ${qualityData.performance_ms}ms | <${{ env.PERFORMANCE_THRESHOLD_MS }}ms |
          | AI Quality | ${qualityData.ai_quality_score >= 85 ? '‚úÖ' : '‚ùå'} | ${qualityData.ai_quality_score}% | 85% |
          
          **Overall Quality Score: ${qualityData.overall_score}%**
          
          ${qualityData.overall_score >= 90 ? 'üéâ Excellent quality!' : 
            qualityData.overall_score >= 80 ? '‚ö†Ô∏è Good quality, minor improvements needed' : 
            '‚ùå Quality improvements required before merge'}
          
          <details>
          <summary>üìà Detailed Metrics</summary>
          
          - **Code Coverage**: ${qualityData.coverage}%
          - **Mutation Score**: ${qualityData.mutation_score}%
          - **Test Execution Time**: ${qualityData.test_time}s
          - **Security Issues**: ${qualityData.security_issues}
          - **Performance**: ${qualityData.performance_ms}ms average
          - **AI Bias Score**: ${qualityData.bias_score}%
          
          </details>
          
          ${qualityData.recommendations ? 
            `<details><summary>üí° Recommendations</summary>\n\n${qualityData.recommendations.map(r => `- ${r}`).join('\n')}\n\n</details>` : 
            ''}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    # Fail job if quality gates don't pass
    - name: "üö® Quality Gate Enforcement"
      run: |
        echo "::group::Final Quality Assessment"
        
        # Check if all quality gates passed
        OVERALL_PASSED=true
        
        # Coverage check
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'{coverage:.1f}')
        except:
            print('0')
        ")
        
        if (( $(echo "$COVERAGE < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
          echo "‚ùå Coverage gate failed: $COVERAGE% < ${{ env.COVERAGE_THRESHOLD }}%"
          OVERALL_PASSED=false
        fi
        
        # Add other gate checks here...
        
        if [ "$OVERALL_PASSED" = false ]; then
          echo "üö® Quality gates failed - blocking deployment"
          exit 1
        else
          echo "‚úÖ All quality gates passed - ready for deployment"
        fi
        echo "::endgroup::"

  # Self-Healing Quality Gates (if enabled)
  self-healing:
    runs-on: ubuntu-latest
    needs: quality-gates
    if: failure() && github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: "üîß Auto-Healing Quality Issues"
      run: |
        echo "::group::Attempting Auto-Healing"
        
        # Install AI healing tools
        pip install openai anthropic
        
        # Attempt to auto-fix common issues
        python scripts/auto_heal_quality_issues.py \
          --coverage-threshold=${{ env.COVERAGE_THRESHOLD }} \
          --mutation-threshold=${{ env.MUTATION_SCORE_THRESHOLD }} \
          --auto-fix=true \
          --create-pr=true
        echo "::endgroup::"

  # Quality Trend Analysis
  quality-trends:
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: "üìà Update Quality Trends"
      run: |
        echo "::group::Updating Quality Trends Database"
        
        # Store quality metrics for trending
        python scripts/update_quality_trends.py \
          --branch=${{ github.ref_name }} \
          --commit=${{ github.sha }} \
          --timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        echo "::endgroup::"

  # Notification and Reporting
  notify:
    runs-on: ubuntu-latest
    needs: [quality-gates, self-healing, quality-trends]
    if: always()
    
    steps:
    - name: "üìß Quality Report Notification"
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        echo "::group::Sending Quality Notifications"
        
        # Send Slack notification with quality results
        python scripts/send_quality_notification.py \
          --channel="#quality-gates" \
          --status="${{ needs.quality-gates.result }}" \
          --details="quality-report.json"
        echo "::endgroup::"